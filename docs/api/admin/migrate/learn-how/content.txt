Overview
 Learn how to migrate
 Update API calls in your app
 New product model
 App Bridge
 Web pixel app extensions
 Marketing activities app extensions
 Product subscription app extensions
 Migrate to GraphQL from REST
 When you begin using GraphQL, you need to change how you think about retrieving and working with data. This guide describes some of the key considerations when migrating from REST to GraphQL. It's meant for app developers who are primarily using REST in their apps.
 Finding GraphQL objects and operations
 Many REST Admin API resources and endpoints have a direct equivalent in GraphQL. Most GET, PUT, POST and DELETE requests in REST have an equivalent query or mutation in GraphQL.
 However, some REST resources and operations might not have an exact GraphQL equivalent. This is because Shopify GraphQL APIs are built to leverage the efficiencies of GraphQL, newer platform features are exposed only in GraphQL, and some enhancements to the Shopify data model are reflected in only the GraphQL schema. The functionality included in one REST POST, PUT, or DELETE operation is often split between multiple GraphQL mutations.
 You can explore the GraphQL Admin API reference and build your mutations using the GraphiQL explorer to identify which mutation is appropriate for your use case.
 Example: Direct equivalent in GraphQL
 Retrieving information about a single customer is very similar in REST and GraphQL.
 In this example, the GraphQL query retrieves all of the same information as is returned in the REST GET request. However, some of the field names and data structures are slightly different from their REST equivalents.
 Tip
 In GraphQL, you can optimize your query to retrieve only the fields that you need.
 REST
 Endpoint
 1 GET https://{shop}.myshopify.com/admin/api/{api_version}/customer/6201722765389.json
 JSON response
 1 HTTP/1.1 200 OK
 2 {
 3
    "customer": {
 4
      "id": 6201722765389,
 5
      "email": "russel.winfield@example.com",
 6
      "accepts_marketing": false,
 7
      "created_at": "2023-10-31T16:41:34-04:00",
 8
      "updated_at": "2023-11-15T17:57:44-04:00",
 9
      "first_name": "Russell",
 10
      "last_name": "Winfield",
 11
      "orders_count": 3,
 12
      "state": "disabled",
 13
      "total_spent": "6366.19",
 14
      "last_order_id": 4649035038797,
 15
      "note": "Customer note",
 16
      "verified_email": true,
 17
      "multipass_identifier": null,
 18
      "tax_exempt": false,
 19
      "tags": "VIP",
 20
      "last_order_name": "#1003",
 21
      "currency": "CAD",
 22
      "phone": "+16135550135",
 23
      "addresses": [
 24
        {
 25
          "id": 7647998738509,
 26
          "customer_id": 6201722765389,
 27
          "first_name": "Russell",
 28
          "last_name": "Winfield",
 29
          "company": "Company Name",
 30
          "address1": "105 Victoria St",
 31
          "address2": "",
 32
          "city": "Toronto",
 33
          "province": "Ontario",
 34
          "country": "Canada",
 35
          "zip": "M5C1N7",
 36
          "phone": "+16135550135",
 37
          "name": "Russell Winfield",
 38
          "province_code": "ON",
 39
          "country_code": "CA",
 40
          "country_name": "Canada",
 41
          "default": true
 42
        }
 43
      ],
 44
      "accepts_marketing_updated_at": null,
 45
      "marketing_opt_in_level": null,
 46
      "tax_exemptions": [],
 47
      "email_marketing_consent": {
 48
        "state": "not_subscribed",
 49
        "opt_in_level": null,
 50
        "consent_updated_at": null
 51
      },
 52
      "sms_marketing_consent": {
 53
        "state": "not_subscribed",
 54
        "opt_in_level": "single_opt_in",
 55
        "consent_updated_at": null,
 56
        "consent_collected_from": "OTHER"
 57
      },
 58
      "admin_graphql_api_id": "gid://shopify/Customer/6201722765389",
 59
      "default_address": {
 60
        "id": 7647998738509,
 61
        "customer_id": 6201722765389,
 62
        "first_name": "Russell",
 63
        "last_name": "Winfield",
 64
        "company": "Company Name",
 65
        "address1": "105 Victoria St",
 66
        "address2": "",
 67
        "city": "Toronto",
 68
        "province": "Ontario",
 69
        "country": "Canada",
 70
        "zip": "M5C1N7",
 71
        "phone": "+16135550135",
 72
        "name": "Russell Winfield",
 73
        "province_code": "ON",
 74
        "country_code": "CA",
 75
        "country_name": "Canada",
 76
        "default": true
 77
      }
 78
    }
 79 }
 GraphQL
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 Graphql query
 1 {
 2
    customer(id: "gid://shopify/Customer/6201722765389") {
 3
      id
 4
      email
 5
      emailMarketingConsent {
 6
        marketingState
 7
        consentUpdatedAt
 8
        marketingOptInLevel
 9
      }
 10
      createdAt
 11
      updatedAt
 12
      firstName
 13
      lastName
 14
      numberOfOrders
 15
      state
 16
      amountSpent {
 17
        amount
 18
        currencyCode
 19
      }
 20
      lastOrder {
 21
        id
 22
        name
 23
      }
 24
      note
 25
      verifiedEmail
 26
      multipassIdentifier
 27
      taxExempt
 28
      tags
 29
      market {
 30
        currencySettings {
 31
          baseCurrency {
 32
            currencyCode
 33
          }
 34
        }
 35
      }
 36
      phone
 37
      addresses {
 38
        id
 39
        firstName
 40
        lastName
 41
        company
 42
        address1
 43
        address2
 44
        city
 45
        province
 46
        zip
 47
        phone
 48
        name
 49
        provinceCode
 50
        countryCodeV2
 51
        country
 52
      }
 53
          taxExemptions
 54
      smsMarketingConsent {
 55
        marketingState
 56
        marketingOptInLevel
 57
        consentUpdatedAt
 58
        consentCollectedFrom
 59
      }
 60
      defaultAddress {
 61
        id
 62
        firstName
 63
        lastName
 64
        company
 65
        address1
 66
        address2
 67
        city
 68
        province
 69
        country
 70
        zip
 71
        phone
 72
        name
 73
        provinceCode
 74
        countryCodeV2
 75
        country
 76
      }
 77
    }
 78 }
 JSON response
 1 {
 2
    "data": {
 3
      "customer": {
 4
        "id": "gid://shopify/Customer/6201722765389",
 5
        "email": "russel.winfield@example.com",
 6
        "emailMarketingConsent": {
 7
          "marketingState": "NOT_SUBSCRIBED",
 8
          "consentUpdatedAt": null,
 9
          "marketingOptInLevel": "SINGLE_OPT_IN"
 10
        },
 11
        "createdAt": "2023-10-31T16:41:34Z",
 12
        "updatedAt": "2023-11-15T17:57:44Z",
 13
        "firstName": "Russell",
 14
        "lastName": "Winfield",
 15
        "numberOfOrders": "3",
 16
        "state": "DISABLED",
 17
        "amountSpent": {
 18
          "amount": "6366.19",
 19
          "currencyCode": "CAD"
 20
        },
 21
        "lastOrder": {
 22
          "id": "gid://shopify/Order/4649035038797",
 23
          "name": "#1003"
 24
        },
 25
        "note": "Customer note",
 26
        "verifiedEmail": true,
 27
        "multipassIdentifier": null,
 28
        "taxExempt": false,
 29
        "tags": [
 30
          "VIP"
 31
        ],
 32
        "market": {
 33
          "currencySettings": {
 34
            "baseCurrency": {
 35
              "currencyCode": "CAD"
 36
            }
 37
          }
 38
        },
 39
        "phone": "+16135550135",
 40
        "addresses": [
 41
          {
 42
            "id": "gid://shopify/MailingAddress/7647998738509?model_name=CustomerAddress",
 43
            "firstName": "Russell",
 44
            "lastName": "Winfield",
 45
            "company": "Company Name",
 46
            "address1": "105 Victoria St",
 47
            "address2": null,
 48
            "city": "Toronto",
 49
            "provinceCode": null,
 50
            "zip": "M5C1N7",
 51
            "phone": null,
 52
            "name": "Russell Winfield",
 53
            "countryCodeV2": "CA",
 54
            "country": "Canada"
 55
          },
 56
          {
 57
            "id": "gid://shopify/MailingAddress/7676436873293?model_name=CustomerAddress",
 58
            "firstName": "Russell",
 59
            "lastName": "Winfield",
 60
            "company": "Company Name",
 61
            "address1": "105 Victoria St",
 62
            "address2": null,
 63
            "city": "Toronto",
 64
            "provinceCode": "ON",
 65
            "zip": "M5C 1N7",
 66
            "phone": null,
 67
            "name": "Russell Winfield",
 68
            "countryCodeV2": "CA",
 69
            "country": "Canada"
 70
          }
 71
        ],
 72
        "taxExemptions": [],
 73
        "smsMarketingConsent": {
 74
          "marketingState": "NOT_SUBSCRIBED",
 75
          "marketingOptInLevel": "UNKNOWN",
 76
          "consentUpdatedAt": null,
 77
          "consentCollectedFrom": "OTHER"
 78
        },
 79
        "defaultAddress": {
 80
          "id": "gid://shopify/MailingAddress/7676436873293?model_name=CustomerAddress",
 81
          "firstName": "Russell",
 82
          "lastName": "Winfield",
 83
          "company": "Company Name",
 84
          "address1": "105 Victoria St",
 85
          "address2": null,
 86
          "city": "Toronto",
 87
          "province": "Ontario",
 88
          "country": "Canada",
 89
          "zip": "M5C 1N7",
 90
          "phone": null,
 91
          "name": "Russell Winfield",
 92
          "provinceCode": "ON",
 93
          "countryCodeV2": "CA"
 94
        }
 95
      }
 96
    }
 97 }
 Example: REST functionality split in GraphQL
 In the following example, using REST you can use the generic product update request to delete an image from a product. This functionality isn't included in the GraphQL Admin APIâ€™s productUpdate mutation. Instead, to delete images, you need to use the productDeleteMedia mutation.
 REST
 Endpoint
 1 PUT https://{shop}.myshopify.com/admin/api/{api_version}/products/{product_id}.json
 Request body
 1 {
 2
    "product": {
 3
      "id": 632910392,
 4
      "images": []
 5
    }
 6 }
 JSON response (truncated)
 1 {
 2
    "product": {
 3
      "id": 632910392,
 4
      "title": "IPod Nano - 8GB",
 5
      ...
 6
      "images": [],
 7
      "image": null
 8
    }
 9 }
 GraphQL
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation productDeleteMedia {
 2
    productDeleteMedia(mediaIds:["gid://shopify/MediaImage/183532652","gid://shopify/MediaImage/731367280"],productId:"gid://shopify/Product/632910392") {
 3
      deletedMediaIds
 4
      product {
 5
        id
 6
        title
 7
        media(first: 5) {
 8
          nodes {
 9
            alt
 10
            mediaContentType
 11
            status
 12
          }
 13
        }
 14
      }
 15
    }
 16 }
 JSON response
 1 {
 2
    "data": {
 3
      "productDeleteMedia": {
 4
        "deletedMediaIds": [
 5
          "gid://shopify/MediaImage/183532652",
 6
          "gid://shopify/MediaImage/731367280"
 7
        ],
 8
        "product": {
 9
          "id": "gid://shopify/Product/632910392",
 10
          "title": "IPod Nano - 8GB",
 11
          "media": {
 12
            "nodes": []
      }
 16
    }
 17 }
 Translating IDs from REST to GraphQL
 REST and GraphQL use different formats for resource and object IDs. If you use stored IDs to retrieve resources in the REST Admin API, then you need to retrieve and store the equivalent GraphQL API global ID (GID) before you can run the corresponding queries and mutations in GraphQL APIs.
 Most REST responses include the admin_graphql_api_id property. You can use the ID in this property to directly query the equivalent object in GraphQL.
 You can also view some common examples of GraphQL GIDs in our GID documentation.
 Note
 The admin_graphql_api_id property is returned only to apps. It isn't included in responses that are viewed in a web browser.
 Example: Retrieve a GraphQL object ID from REST
 The following example retrieves a product variant ID in REST, and then uses the admin_graphql_api_id property to query the equivalent product variant ID in GraphQL.
 REST
 Endpoint
 1 GET https://{shop}.myshopify.com/admin/api/{api_version}/products/{product_id}/variants/{variant_id}.json
 JSON response (truncated)
 1 {
 2
    "variant": {
 3
      "id": 12195007594552,
 4
      "product_id": 1321540747320,
 5
      "title": "Default Title",
 6
      "...": "...",
 7
      "admin_graphql_api_id": "gid://shopify/ProductVariant/12195007594552"
 8
    }
 9 }
 GraphQL
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 {
 2
    productVariant (id: "gid://shopify/ProductVariant/12195007594552") {
 3
      id
 4
      title
 5
    }
 6 }
 JSON response
 1 {
 2
    "data": {
 3
      "productVariant": {
 4
        "id": "gid://shopify/ProductVariant/12195007594552",
 5
        "title": "Default Title"
 6
      }
 7
    },
 8 }
 Resources that don't return an Admin GraphQL API ID
 In some cases, a resource might not return an admin_graphql_api_id. This ID might not be available for several reasons. For example, a resource might not have an exact equivalent GraphQL object. In this case, you can determine the appropriate object to use, and then use examples in the GraphQL Admin API reference or query the object in the GraphiQL explorer to learn about the ID format.
 Anatomy of a GraphQL ID
 GraphQL ID generation is implementation dependent, and doesn't follow any convention other than being a URI. There is no guarantee that GraphQL IDs will follow the structure gid://shopify/{resource}/{rest_id} as in the previous example, so you shouldn't generate IDs programmatically. Always treat the admin_graphql_api_id string as an opaque ID.
 The following example shows how the admin_graphql_api_id property doesn't always follow an expected structure:
 Example
 Endpoint
 1 GET /admin/api/{api_version}/inventory_levels.json?inventory_item_ids={inventory_item_id}
 JSON response
 1 {
 2
    "inventory_levels": [
 3
      {
 4
        "inventory_item_id": 12261979488312,
 5
        "location_id": 6884556842,
 6
        "available": 5,
 7
        "updated_at": "2018-05-17T12:58:30-04:00",
 8
        "admin_graphql_api_id": "gid://shopify/InventoryLevel/6485147690?inventory_item_id=12261979488312"
 9
      },
 10
      {
 11
        "inventory_item_id": 12261979488312,
 12
        "location_id": 13968834616,
 13
        "available": 7,
 14
        "updated_at": "2018-05-17T12:58:35-04:00",
 15
        "admin_graphql_api_id": "gid://shopify/InventoryLevel/13570506808?inventory_item_id=12261979488312"
 16
      },
 17
      {
 18
        "inventory_item_id": 12261979488312,
 19
        "location_id": 13968867384,
 20
        "available": 9,
 21
        "updated_at": "2018-05-17T12:58:35-04:00",
 22
        "admin_graphql_api_id": "gid://shopify/InventoryLevel/13570539576?inventory_item_id=12261979488312"
 23
      }
 24
    ]
 25 }
 Implementing and updating pagination
 In REST, you can paginate data using query parameters. Using the limit parameter, you can split the total number of entries into manageable groups:
 1 https://{shop}.myshopify.com/admin/api/{api_version}/products.json?limit=1
 To get the next page of results, you can make a request to the URL stored in the Link header of the last response:
 1 https://{shop}.myshopify.com/admin/api/{api_version}/products.json?page_info={page_info_id}&limit=3
 In GraphQL, you can apply similar concepts using cursor-based pagination. When querying a connection in GraphQL, you need to provide the first or last argument, which specifies the number of items that you want returned from the beginning or the end of the set. This is equivalent to the limit parameter in REST.
 Tip
 A connection is a GraphQL type that's used to retrieve a list of nodes. A node is an individual item or data object in the list, and represents the data that you're querying for. For example, the ProductConnection finds all the edges that connect the query root to a Product node.
 You can query the cursor field to get a reference to the position of a node in a connection, and use that reference to obtain the next set of items. The cursor field in GraphQL is equivalent to the page_info parameter in REST.
 You can also query the pageInfo object in GraphQL to determine if there are any more pages to request. The fields hasNextPage and hasPreviousPage are boolean fields that indicate whether you can paginate forwards or backwards. Depending on the direction that you're paging in, you can use the relevant field to determine when you've reached the end of the list. For example, if you're paginating forward using the first argument, then you've reached the end of the list when hasNextPage is false.
 You can retrieve up to 250 resources in a single request. If you need to retrieve larger volumes of data, then you can perform a bulk query operation. A bulk query operation lets you asynchronously fetch all of the items in a list using as little as one query, avoiding the need to paginate results and the risk of your requests being throttled.
 Example
 The following example shows how to query the first three products and determine whether you can paginate forward. The JSON response returns the product IDs, titles, and cursor IDs, and indicates that you can paginate forward.
 Example
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 {
 2
    products(first: 3) {
 3
      edges {
 4
        cursor
 5
        node {
 6
          id
 7
          title
 8
      handle
 9
        }
 10
      }
 11
      pageInfo {
 12
        hasNextPage
 13
      }
 14
    }
 15 }
 JSON response
 1 {
 2
    "products": {
 3
      "edges": [
 4
        {
 5
          "node": {
 6
            "id": "gid://shopify/Product/108828309",
 7
            "title": "Draft",
 8
            "handle": "draft"
 9
          },
 10
          "cursor": "eyJsYXN0X2lkIjoxMDg4MjgzMDksImxhc3RfdmFsdWUiOiIxMDg4MjgzMDkifQ=="
 11
        },
 12
        {
 13
          "node": {
 14
            "id": "gid://shopify/Product/121709582",
 15
            "title": "Boots",
 16
            "handle": "boots"
 17
          },
 18
          "cursor": "eyJsYXN0X2lkIjoxMjE3MDk1ODIsImxhc3RfdmFsdWUiOiIxMjE3MDk1ODIifQ=="
 19
        },
 20
        {
 21
          "node": {
 22
            "id": "gid://shopify/Product/440089423",
 23
            "title": "IPod Nano - 8GB",
 24
            "handle": "ipod-nano"
 25
          },
 26
          "cursor": "eyJsYXN0X2lkIjo0NDAwODk0MjMsImxhc3RfdmFsdWUiOiI0NDAwODk0MjMifQ=="
 27
        }
 28
      ],
 29
      "pageInfo": {
 30
        "hasNextPage": true
 31
      }
 32
    }
 33 }
 You can provide the after argument with the last cursor from the response to request the next set of data:
 Example
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 {
 2
    products(first: 3, after: "eyJsYXN0X2lkIjo0NDAwODk0MjMsImxhc3RfdmFsdWUiOiI0NDAwODk0MjMifQ==") {
 3
      edges {
 4
        cursor
 5
        node {
 6
          id
 7
          title
 8
        }
 9
      }
 10
      pageInfo {
 11
        hasNextPage
 12
      }
 13
    }
 14 }
 JSON response
 1 {
 2
    "data": {
 3
      "products": {
 4
        "edges": [
 5
          {
 6
            "cursor": "eyJsYXN0X2lkIjoyMDI0MzMyMTk3OTEwLCJsYXN0X3ZhbHVlIjoiMjAyNDMzMjE5NzkxMCJ9",
 7
            "node": {
 8
              "id": "gid://shopify/Product/2024332197910",
 9
              "title": "Bronze guy",
 10
              "handle": "bronze-guy"
 11
            }
 12
          },
 13
          {
 14
            "cursor": "eyJsYXN0X2lkIjoyMDI0MzMyMjMwNjc4LCJsYXN0X3ZhbHVlIjoiMjAyNDMzMjIzMDY3OCJ9",
 15
            "node": {
 16
              "id": "gid://shopify/Product/2024332230678",
 17
              "title": "Dalmatian",
 18
              "handle": "dalmatian"
 19
            }
 20
          },
 21
          {
 22
            "cursor": "eyJsYXN0X2lkIjoyMDI0MzMyMjk2MjE0LCJsYXN0X3ZhbHVlIjoiMjAyNDMzMjI5NjIxNCJ9",
 23
            "node": {
 24
              "id": "gid://shopify/Product/2024332296214",
 25
              "title": "Cowlick pigeon",
 26
              "handle": "cowlick-pigeon"
 27
            }
 28
          }
 29
        ],
 30
        "pageInfo": {
 31
          "hasNextPage": true
 32
        }
 33
      }
 34
    }
 35 }
 Understanding error handling
 In GraphQL, you can't always rely on HTTP status codes to determine whether a query or mutation completed without errors. In cases that would typically produce 4xx or 5xx errors in REST, GraphQL might return a 200 OK status with additional error information in its response.
 The 4xx and 5xx errors occur infrequently. They're often related to network communications, your account, or an issue with Shopifyâ€™s services.
 To learn about the possible response codes and what they mean, refer to Shopify API response status and error codes.
 Query errors
 If a query results in an error, then an errors object is returned. The object contains additional detail that can help you debug your operation.
 Example
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 {
 2
    shop {
 3
      name
 4
      address
 5
    }
 6 }
 JSON response - 200 OK
 1 {
        "message": "Field 'address' doesn't exist on type 'Shop'",
 5
        "locations": [
 6
          {
 7
            "line": 4,
 8
            "column": 5
 9
          }
 10
        ],
 11
        "path": [
 12
          "query",
 13
          "shop",
 14
          "address"
 15
        ],
 16
        "extensions": {
 17
          "code": "undefinedField",
 18
          "typeName": "Shop",
 19
          "fieldName": "address"
 20
        }
 21
      }
 22
    ]
 23 }
 Mutation errors
 The response for mutations also can return additional detail to help debug your mutation. To access this information, you must request the userErrors field.
 Example
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    productDelete(input: {id: "gid://shopify/Product/123"}) {
 3
      deletedProductId
 4
      userErrors {
 5
        field
 6
        message
 JSON response - 200 OK
 1 {
 2
    "data": {
 3
      "productDelete": {
 4
        "deletedProductId": null,
 5
        "userErrors": [
 6
          {
 7
            "field": [
 8
              "id"
 9
            ],
 10
            "message": "Product does not exist"
 11
          }
 12
        ]
 13
      }
 14
    }
 15 }
 Updating your error handling
 The following is a basic JavaScript example of how you might handle an error in REST, and how your error handling might be updated to parse errors returned in GraphQL responses with a status of 200 OK.
 Handling errors in REST
 1 const response = await fetch(url);
 2
 3 if (!response.ok) {
 4
      throw new Error(`HTTP ${response.status} - ${response.statusText}`);
 5 }
 Handling errors in GraphQL
 1 const data = await response.json();
 2
 3 if (data.errors) {
 4
      console.error('GraphQL Error: ', data.errors);
 5
      throw new Error('GraphQL Error');
 6 }
 Understanding rate limiting
 To ensure the Shopify platform remains stable and fair for everyone, both the REST and GraphQL Admin APIs are rate-limited. However, these two APIs use a different rate limiting approach.
 REST
 The REST Admin API is governed by request-based limits. It provides credits that clients spend every time they make a request, and those credits are refilled every second. This allows clients to keep a request pace that never limits the API usage (two requests for each second) and makes occasional request bursts when needed (making 10 requests for each second).
 However, the request-based model has the following limitations:
 Clients use the same amount of credits regardless, even if they donâ€™t need all the data in an API response.
 POST, PUT, PATCH and DELETE requests produce side effects that demand more load on servers than GET requests, which only reads existing data. Despite the difference in resource usage, all these requests consume the same amount of credits in the request-based model.
 GraphQL
 GraphQL addresses some limitations of common methods that are typically used in REST APIs.
 The GraphQL Admin API uses a calculated cost query method for rate limiting. By default, in a calculated query cost method, clients receive 50 points per second up to a limit of 1,000 points.
 The main difference from the REST request-based model is that every GraphQL request has a different cost.
 Calculating costs
 The best way to determine the true cost of a query or mutation is to run it. In the following mutation example that creates a metaobject, the JSON response includes information about the total mutation cost and the clientâ€™s current quota under the extensions field. You can include an 'X-GraphQL-Cost-Include-Fields': true header to receive a more detailed breakdown of the query or mutation cost.
 You can use the currentlyAvailable and restoreRate fields returned in the throttleStatus object to understand how many points you have available and how quickly they'll refill. This also helps you to adjust if a client has a different bucket size or restore rate, or if the global allocation changes in future.
 Example
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    metaobjectCreate(metaobject: {
 3
      type: "$app:product_highlight",
 4
      fields: [
 5
        {
 6
          key: "title",
 7
          value: "100% Reusable Plastics"
 8
        },
 9
        {
 10
          key: "description",
 11
          value: "Rest easy - our glasses are made from 100% reusable materials"
 12
        },
 13
        {
 14
          key: "creative",
 15
          value: "gid://shopify/MediaImage/1"
 16
        }
 17
      ]
 18
    }) {
 19
      metaobject {
 20
        id
 21
        type
 22
        handle
 23
        title: field(key: "title") { value }
 24
        description: field(key: "description") { value },
 25
        creative: field(key: "creative") { value }
 26
      }
 27
    }
 28 }
 JSON response
 1 {
 2
    "data": {
 3
      "metaobjectCreate": {
 4
        "metaobject": {
 5
          "id": "gid://shopify/Metaobject/15328903245",
 6
          "type": "app--2315872--product_highlight",
 7
          "handle": "app--2315872--product-highlight-ueyger14",
 8
          "title": {
 9
            "value": "100% Reusable Plastics"
 10
          },
 11
          "description": {
 12
            "value": "Rest easy - our glasses are made from 100% reusable materials"
 13
          },
 14
          "creative": {
 15
            "value": "gid://shopify/MediaImage/1"
 16
          }
 17
        }
 18
      }
 19
    },
 20
    "extensions": {
 21
      "cost": {
 22
        "requestedQueryCost": 13,
 23
        "actualQueryCost": 13,
 24
        "throttleStatus": {
 25
          "maximumAvailable": 1000,
 26
          "currentlyAvailable": 987,
 27
          "restoreRate": 50
 28
        }
 29
      }
 30
    }
 31 }
 Throttled requests
 In REST, if an app reaches an API rate limit, then it receives a 429 Too Many Requests response and a message that a throttle has been applied.
 In GraphQL, if an app reaches an API rate limit, then it receives a 200 OK response, but the response body contains an error with a message that a throttle has been applied. You can handle for these throttled requests the same way that you handle for other errors returned by GraphQL.
 Example response
 1 {
        "message": "Throttled",
 5
        "extensions": {
 6
          "code": "THROTTLED",
 7
          "documentation": "https://shopify.dev/api/usage/rate-limits"
 8
        }
 9
      }
 10
    ],
 11
    "extensions": {
 12
      "cost": {
 13
        "requestedQueryCost": 202,
 14
        "actualQueryCost": null,
 15
        "throttleStatus": {
 16
          "maximumAvailable": 1000,
 17
          "currentlyAvailable": 186,
 18
          "restoreRate": 50
 19
        }
 20
      }
 21
    }
 22 }
 Optimizing your requests
 Depending on your use case, you might be able to further optimize your GraphQL requests. Optimizing requests improves the performance of your app by reducing the number of calls that need to be made to the GraphQL endpoint, and helps you to avoid being throttled by sending fewer queries or queries with a lower cost.
 You can investigate the following optimization opportunities:
 Combine multiple REST requests into a single GraphQL query: Retrieve all of the information about a single object in a single request, rather than chaining multiple requests together.
 Request only the data that you need: Simplify your queries and mutations by requesting only information that your app is using.
 Use the best mutation: Avoid round trips and chaining by using a mutation that's tailored to your use case.
 Use bulk operations: Fetch or upload data in bulk to make working with large volumes of data easier.
 Combine multiple REST requests into a single GraphQL query
 In GraphQL, you can use connections to get information about related objects with a single request.
 For example, in the case of an order, you might want to know the total price, the customer's name, metafields, and the title of other variants belonging to the product in the order.
 Using REST, you need to make a request to the following endpoints and filter out unnecessary data:
 /orders/{order_id}.json
 /products/{product_id}/variants.json
 /customers/{customer_id}/metafields.json
 Using GraphQL, you can make a single request using connections to get the desired data:
 Example
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 query {
 2
    order(id:"gid://shopify/Order/5369369690390") {
 3
      id
 4
      totalPriceSet{
 5
        shopMoney {
 6
          amount
 7
        }
 8
      }
 9
      customer {
 10
        displayName
 11
        metafields (first:10) {
 12
          edges {
 13
            node {
 14
              key
 15
              value
 16
            }
 17
          }
 18
        }
 19
      }
 20
      lineItems (first:10) {
 21
        edges {
 22
          node {
 23
            variant {
 24
              product {
 25
                variants(first:10) {
 26
                  edges {
 27
                    node {
 28
                      title
 29
                    }
 30
                  }
 31
                }
 32
              }
 33
            }
 34
          }
 35
        }
 36
      }
 37
    }
 38 }
 JSON response
 1 {
 2
    "data": {
 3
      "order": {
 4
        "id": "gid://shopify/Order/5369369690390",
 5
        "totalPriceSet": {
 6
          "shopMoney": {
 7
            "amount": "2099.85"
 8
          }
 9
        },
 10
        "customer": {
 11
          "displayName": "Ayumu Hirano",
 12
          "metafields": {
 13
            "edges": [
 14
              {
 15
                "node": {
 16
                  "key": "birth_date",
 17
                  "value": "1990-02-22"
 18
                }
 19
              }
 20
            ]
 21
          }
 22
        },
 23
        "lineItems": {
 24
          "edges": [
 25
            {
 26
              "node": {
 27
                "variant": {
 28
                  "product": {
 29
                    "variants": {
 30
                      "edges": [
 31
                        {
 32
                          "node": {
 33
                            "title": "Ice"
 34
                          }
 35
                        },
 36
                        {
 37
                          "node": {
 38
                            "title": "Dawn"
 39
                          }
 40
                        }
 41
                      ]
 42
                    }
 43
                  }
 44
                }
 45
              }
 46
            }
 47
          ]
 48
        }
 49
      }
 50
    }
 51 }
 Request only the data you need
 To avoid over-fetching, request only the fields that your app is using in your queries and mutations. This reduces the payload size, reducing bandwidth usage and improving performance.
 For example, when you request a customer using REST, the response contains over 60 fields:
 REST
 Endpoint
 1 GET https://{shop}.myshopify.com/admin/api/{api_version}/customers/{customer_id}.json
 JSON response
 1 {
 2
    "customer": {
 3
      "id": 1073339469,
 4
      "email": "bob@example.com",
 5
      "accepts_marketing": false,
 6
      "created_at": "{api_version}-03T13:37:56-04:00",
 7
      "updated_at": "{api_version}-03T13:37:56-04:00",
 8
      "first_name": "Bob",
 9
      "last_name": "Bobsen",
 10
      "orders_count": 1,
 11
      "state": "disabled",
 12
      "total_spent": "199.65",
 13
      "last_order_id": 450789469,
 14
      "note": null,
 15
      "verified_email": true,
 16
      "multipass_identifier": null,
 17
      "tax_exempt": false,
 18
      "tags": "LÃ©on, NoÃ«l",
 19
      "last_order_name": "#1001",
 20
      "currency": "USD",
 21
      "phone": "+16136120707",
 22
      "addresses": [
 23
        {
 24
          "id": 207119551,
 25
          "customer_id": 207119551,
 26
          "first_name": null,
 27
          "last_name": null,
 28
          "company": null,
 29
          "address1": "123 Amoebobacterieae St",
 30
          "address2": "",
 31
          "city": "Ottawa",
 32
          "province": "Ontario",
 33
          "country": "United States",
 34
          "zip": "40202",
 35
          "phone": "555-625-1199",
 36
          "name": "",
 37
          "province_code": "KY",
 38
          "country_code": "US",
 39
          "country_name": "United States",
 40
          "default": true
 41
        }
 42
      ],
 43
      "accepts_marketing_updated_at": "2005-06-12T11:57:11-04:00",
 44
      "marketing_opt_in_level": null,
 45
      "tax_exemptions": [],
 46
      "email_marketing_consent": {
 47
        "state": "not_subscribed",
 48
        "opt_in_level": null,
 49
        "consent_updated_at": "2004-06-13T11:57:11-04:00"
 50
      },
 51
      "sms_marketing_consent": {
 52
        "state": "not_subscribed",
 53
        "opt_in_level": "single_opt_in",
 54
        "consent_updated_at": "{api_version}-03T13:37:56-04:00",
 55
        "consent_collected_from": "OTHER"
 56
      },
 57
      "admin_graphql_api_id": "gid://shopify/Customer/207119551",
 58
      "default_address": {
 59
        "id": 207119551,
 60
        "customer_id": 207119551,
 61
        "first_name": null,
 62
        "last_name": null,
 63
        "company": null,
 64
        "address1": "Chestnut Street 92",
 65
        "address2": "",
 66
        "city": "Louisville",
 67
        "province": "Kentucky",
 68
        "country": "United States",
 69
        "zip": "40202",
 70
        "phone": "555-625-1199",
 71
        "name": "",
 72
        "province_code": "KY",
 73
        "country_code": "US",
 74
        "country_name": "United States",
 75
        "default": true
 76
      }
 77
    }
 78 }
 If you only need to retrieve customer contact and address information, then you can build your query to retrieve only this information:
 GraphQL
 Endpoint
 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 {
 2
    customer(id: "gid://shopify/Customer/544365967") {
 3
      email
 4
      firstName
 5
      lastName
 6
      defaultAddress {
 7
        address1
 8
        city
 9
        province
 10
        zip
 11
        country
 12
      }
 13
    }
 14 }
 JSON response
 1 {
 2
    "customer": {
 3
      "email": "bob@example.com",
 4
      "firstName": "Bob",
 5
      "lastName": "Bobsen",
 6
      "defaultAddress": {
 7
        "address1": "123 Amoebobacterieae St",
 8
        "city": "Ottawa",
 9
        "province": "Ontario",
 10
        "zip": "K2P0V6",
 11
        "country": "Canada"
 12
      }
 13
    }
 14 }
 Use the best mutation
 In some cases, you can lessen the number of calls that you need to make by choosing a mutation that's tailored for your use case.
 For example, if you wanted to make a copy of a product using a new name, then you could query for the product to be duplicated using a product query, edit the product fields, and then create a new product using a productCreate mutation. However, the GraphQL Admin API provides a productDuplicate mutation, which allows you to duplicate the product and update key information including the title and status, avoiding a round trip and lessening the amount of data that needs to be sent to and retrieved from Shopify.
 If you don't need to use the duplicated product right away, then you also have the option to use productDuplicateAsyncV2 to duplicate the product asynchronously.
 Use bulk operations
 If you need to import or export large volumes of data, then you can perform a bulk operation. Bulk operations lessen complexity by reducing the number of requests that you need to make, avoiding throttling and considerations such as pagination.
 For example, if you retrieved all products in REST from the /products.json endpoint, then you can instead use bulkOperationRunQuery.
 Learn more about bulk queries and mutations.
 Understanding library support
 Many API client libraries that you might use to call the Shopify Admin API support both REST and GraphQL.
 Official Shopify API libraries:
 shopify-api-js
 shopify-api-ruby
 Fetch API / Node Fetch
 Axios
 Some third-party Admin API libraries
 However, you need to make updates to your code that uses these libraries. You might have to perform some or all of the following tasks:
 Switching from a REST client to a GraphQL client
 Changing the API endpoint
 Updating the request type
 Adding your query or mutation and specifying the fields to return
 Destructuring or digging into the response
 For examples of updating your implementation using some commonly used libraries, refer to Updating API calls in your app.
 Next steps
 Learn how to use GraphQL APIs by following our how-to guides that cover different use cases:
 Getting started with discounts
 Learn how to create and manage different types of discounts with the GraphQL Admin API.
 Edit existing orders
 Learn how to edit orders that a Shopify channel creates, such as Shopify Point of Sale (POS), Online Store, or draft orders, or orders that the app creates through the GraphQL Admin API.
 Manage media for products
 Learn how to manage different types of media associated with products using the GraphQL Admin and Storefront APIs.
 Manage media for product variants
 Learn how to manage different types of media associated with product variants using the GraphQL Admin API.
 Manage inventory quantities and states
 Learn how to maintain accurate inventory quantities and transition products to different inventory states.
 Manage returns
 Learn how to manage returns using the GraphQL Admin API.
 Manage metafields
 Learn how to manage metafields using the GraphQL Admin API.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Finding GraphQL objects and operations
 Translating IDs from REST to GraphQL
 Implementing and updating pagination
 Understanding error handling
 Understanding rate limiting
 Optimizing your requests
 Understanding library support
 Next steps
 Updates & News
