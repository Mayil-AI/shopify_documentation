Product subscription app extensions
 Sync product data from an external source
 Use the productSet mutation to sync the desired state of a product with data from an external source in a single operation
 This mutation is suited for apps and use cases where the state of the product model is managed outside of Shopify, for example with an Enterprise Resource Planning (ERP) system or Worksheet, and you want to update Shopify's product model to reflect your external state.
 The mutation is available in both asynchronous and synchronous modes. The default is asynchronous.
 Note
 The productSet mutation has an input limit of 2K variants when run asynchronously and only 100 variants when run synchronously.
 This guide provides examples of how to create and update products asynchronously and synchronously, with data from an external source..
 Create a product with variants and options asynchronously
 The following productSet mutation initiates an asynchronous operation to create a product with an option named Color. The option has three possible values: Red, Green, and Blue. The mutation also sets up product variants, each associated with one of the color options.
 The response to the mutation indicates that the operation has been successfully initiated with the status CREATED.
 Products, variants, and options
 Variant GID Option name Option value name
 gid://shopify/ProductVariant/1 Color Red
 gid://shopify/ProductVariant/2 Color Green
 gid://shopify/ProductVariant/3 Color Blue
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation setProduct {
 2
    productSet(
 3
      input: {
 4
        id: "gid://shopify/Product/1",
 5
        title: "My Cool Product",
 6
        productOptions: [
 7
          {
 8
            name: "Color",
 9
            values: [
 10
              { name: "Red" },
 11
              { name: "Green" },
 12
              { name: "Blue" }
 13
            ]
 14
          }
 15
        ],
 16
        variants: [
 17
          { optionValues: [{ optionName: "Color", name: "Red" }] },
 18
          { optionValues: [{ optionName: "Color", name: "Green" }] },
 19
          { optionValues: [{ optionName: "Color", name: "Blue" }] }
 20
        ]
 21
      }
 22
    ) {
 23
      productSetOperation {
 24
        id
 25
        status
 26
        userErrors {
 27
          code
 28
          field
 29
          message
 30
        }
 31
      }
 32
      userErrors {
 33
        field
 34
        message
 35
      }
 36
    }
 37 }
      "productSet": {
 4
        "productSetOperation": {
 5
          "id": "gid://shopify/ProductSetOperation/1",
 6
          "status": "CREATED",
 7
          "userErrors": []
 8
        },
 9
        "userErrors": []
 10
      }
 11
    }
 12 }
 Check the status of the operation
 Use the productOperation query to check the status of the operation, using the ID that was returned when the product was created.
 The query response indicates that the operation is COMPLETE and provides the details of the created product.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 query productSetOperation {
 2
    productOperation(id: "gid://shopify/ProductSetOperation/1") {
 3
      ... on ProductSetOperation {
 4
        id
 5
        status
 6
        product {
 7
          id
 8
          title
 9
          options {
 10
            id
 11
            name
 12
            optionValues {
 13
              id
 14
              name
          variants(first: 100) {
 18
            edges {
 19
              node {
 20
                id
 21
                selectedOptions {
 22
                  name
 23
                  value
 24
                }
 25
              }
 26
            }
 27
          }
 28
        }
 29
        userErrors {
 30
          code
 31
          field
 32
          message
 33
        }
 34
      }
 35
    }
 36 }
 JSON response
 1 {
 2
    "data": {
 3
      "productOperation": {
 4
        "id": "gid://shopify/ProductSetOperation/1",
 5
        "status": "COMPLETE",
 6
        "product": {
 7
          "id": "gid://shopify/Product/1",
 8
          "title": "My Cool Product",
 9
          "options": [
 10
            {
 11
              "id": "gid://shopify/ProductOption/1",
 12
              "name": "Color",
 13
              "optionValues": [
 14
                {
 15
                  "id": "gid://shopify/ProductOptionValue/1",
 16
                  "name": "Red"
 17
                },
 18
                {
 19
                  "id": "gid://shopify/ProductOptionValue/2",
 20
                  "name": "Green"
 21
                },
 22
                {
 23
                  "id": "gid://shopify/ProductOptionValue/3",
 24
                  "name": "Blue"
 25
                }
 26
              ]
 27
            }
 28
          ],
 29
          "variants": {
 30
            "edges": [
 31
              {
 32
                "node": {
 33
                  "id": "gid://shopify/ProductVariant/1",
 34
                  "selectedOptions": [
 35
                    {
 36
                      "name": "Color",
 37
                      "value": "Red"
 38
                    }
 39
                  ]
 40
                }
 41
              },
 42
              {
 43
                "node": {
 44
                  "id": "gid://shopify/ProductVariant/2",
 45
                  "selectedOptions": [
 46
                    {
 47
                      "name": "Color",
 48
                      "value": "Green"
 49
                    }
 50
                  ]
 51
                }
 52
              },
 53
              {
 54
                "node": {
 55
                  "id": "gid://shopify/ProductVariant/3",
 56
                  "selectedOptions": [
 57
                    {
 58
                      "name": "Color",
 59
                      "value": "Blue"
 60
                    }
 61
                  ]
 62
                }
 63
              }
 64
            ]
 65
          }
 66
        },
 67
        "userErrors": []
 68
      }
 69
    }
 70 }
 Update the product data asynchronously
 The following productSet mutation initiates an asynchronous operation to update an existing product's Color option. The original color values of Red, Green, and Blue are replaced with new values of Maroon, Forest Green, and Deep Sea Blue. The mutation also updates the product variants from the old color values to the new ones. Each variant retains its original GID.
 Updated products, variants, and options
 Variant GID Option name Option value name
 gid://shopify/ProductVariant/1 Color Deep Sea Blue
 gid://shopify/ProductVariant/2 Color Forest Green
 gid://shopify/ProductVariant/3 Color Maroon
 The response to the mutation indicates that the operation has been successfully initiated with the status CREATED.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation setProduct {
 2
    productSet(
 3
      input: {
 4
        id: "gid://shopify/Product/1",
 5
        title: "My Extra Cool Product",
 6
        productOptions: [
 7
          {
 8
            name: "Color",
 9
            values: [
 10
              { name: "Maroon" },
 11
              { name: "Forest Green" },
 12
              { name: "Deep Sea Blue" }
 13
            ]
 14
          }
 15
        ],
 16
        variants: [
 17
          { optionValues: [{ optionName: "Color", name: "Deep Sea Blue" }] },
 18
          { optionValues: [{ optionName: "Color", name: "Forest Green" }] },
 19
          { optionValues: [{ optionName: "Color", name: "Maroon" }] }
 20
        ]
 21
      }
 22
    ) {
 23
      productSetOperation {
 24
        id
 25
        status
 26
        userErrors {
 27
          code
 28
          field
 29
          message
 30
        }
 31
      }
 32
      userErrors {
 33
        field
 34
        message
 35
      }
 36
    }
 37 }
 JSON response
 1 {
 2
    "data": {
 3
      "productSet": {
 4
        "productSetOperation": {
 5
          "id": "gid://shopify/ProductSetOperation/2",
 6
          "status": "CREATED",
 7
          "userErrors": []
 8
        },
 9
        "userErrors": []
 10
      }
 11
    },
 12
    "extensions": {
 13
      "cost": {
 14
        "requestedQueryCost": 11,
 15
        "actualQueryCost": 11
 16
      }
 17
    }
 18 }
 Query the updated product asynchronously
 After the product has been updated asynchronously, use the productOperation query to retrieve the updated product data. This query uses the ProductSetOperation object to check the status of the operation and to retrieve the details of the updated product and its variants.
 The response to this query indicates that the operation is COMPLETE, and indicates that the product's title has been updated, and the color options have been updated to Deep Sea Blue, Forest Green, and Maroon.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 query productSetOperation {
 2
    productOperation(id: "gid://shopify/ProductSetOperation/2") {
 3
      ... on ProductSetOperation {
 4
        id
 5
        status
 6
        product {
 7
          id
 8
          title
 9
          options {
 10
            id
 11
            name
 12
            optionValues {
 13
              id
 14
              name
 15
            }
 16
          }
 17
          variants(first: 100) {
 18
            edges {
 19
              node {
 20
                id
 21
                selectedOptions {
 22
                  name
 23
                  value
 24
                }
 25
              }
 26
            }
 27
          }
 28
        }
 29
        userErrors {
 30
          code
 31
          field
 32
          message
 33
        }
 34
      }
 35
    }
 36 }
 JSON response
 1 {
 2
    "data": {
 3
      "productOperation": {
 4
        "id": "gid://shopify/ProductSetOperation/2",
 5
        "status": "COMPLETE",
 6
        "product": {
 7
          "id": "gid://shopify/Product/1",
 8
          "title": "My Extra Cool Product",
 9
          "options": [
 10
            {
 11
              "id": "gid://shopify/ProductOption/1",
 12
              "name": "Color",
 13
              "optionValues": [
 14
                {
 15
                  "id": "gid://shopify/ProductOptionValue/1",
 16
                  "name": "Deep Sea Blue"
 17
                },
 18
                {
 19
                  "id": "gid://shopify/ProductOptionValue/2",
 20
                  "name": "Forest Green"
 21
                },
 22
                {
 23
                  "id": "gid://shopify/ProductOptionValue/3",
 24
                  "name": "Maroon"
 25
                }
 26
              ]
 27
            }
 28
          ],
 29
          "variants": {
 30
            "edges": [
 31
              {
 32
                "node": {
 33
                  "id": "gid://shopify/ProductVariant/1",
 34
                  "selectedOptions": [
 35
                    {
 36
                      "name": "Color",
 37
                      "value": "Deep Sea Blue"
 38
                    }
 39
                  ]
 40
                }
 41
              },
 42
              {
 43
                "node": {
 44
                  "id": "gid://shopify/ProductVariant/2",
 45
                  "selectedOptions": [
 46
                    {
 47
                      "name": "Color",
 48
                      "value": "Forest Green"
 49
                    }
 50
                  ]
 51
                }
 52
              },
 53
              {
 54
                "node": {
 55
                  "id": "gid://shopify/ProductVariant/3",
 56
                  "selectedOptions": [
 57
                    {
 58
                      "name": "Color",
 59
                      "value": "Maroon"
 60
                    }
 61
                  ]
 62
                }
 63
              }
 64
            ]
 65
          }
 66
        },
 67
        "userErrors": []
 68
      }
 69
    }
 70 }
 Create a product with variants and options synchronously
 The following productSet mutation creates a product with an option named Color. The option has three possible values, Red, Green, and Blue. The mutation creates product variants where each is associated with one of the color options. Each variant is identified by a globally-unique ID.
 The mutation runs synchronously because the synchronous field is set.
 Products, variants, and options
 Variant GID Option name Option value name
 gid://shopify/ProductVariant/1 Color Red
 gid://shopify/ProductVariant/2 Color Green
 gid://shopify/ProductVariant/3 Color Blue
 Note
 synchronous: true executes the mutation in synchronous mode.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 mutation setProductSync {
 2
    productSet(
 3
      synchronous: true,
 4
      input: {
 5
        title: "My Cool Product",
 6
        productOptions: [
 7
          {
 8
            name: "Color",
 9
            values: [
 10
              { name: "Red" },
 11
              { name: "Green" },
 12
              { name: "Blue" }
 13
            ]
 14
          }
 15
        ],
 16
        variants: [
 17
          { optionValues: [{ optionName: "Color", name: "Red" }] },
 18
          { optionValues: [{ optionName: "Color", name: "Green" }] },
 19
          { optionValues: [{ optionName: "Color", name: "Blue" }] }
 20
        ]
 21
      }
 22
    ) {
 23
      product {
 24
        id
 25
        title
 26
        description
 27
        options {
 28
          id
 29
          name
 30
          position
 31
          values
 32
          optionValues {
 33
            id
 34
            name
 35
            hasVariants
 36
          }
 37
        }
 38
        variants(first: 100) {
 39
          edges {
 40
            node {
 41
              id
 42
              selectedOptions {
 43
                name
 44
                value
 45
              }
 46
            }
 47
          }
 48
        }
 49
      }
 50
      userErrors {
 51
       field
 52
       message
 53
      }
 54
    }
 55 }
 JSON response
 1 {
 2
    "data": {
 3
      "productSet": {
 4
        "product": {
 5
          "id": "gid://shopify/Product/1",
 6
          "title": "My Cool Product",
 7
          "description": "",
 8
          "options": [
 9
            {
 10
              "id": "gid://shopify/ProductOption/1",
 11
              "name": "Color",
 12
              "position": 1,
 13
              "values": [
 14
                "Red",
 15
                "Green",
 16
                "Blue"
 17
              ],
 18
              "optionValues": [
 19
                {
 20
                  "id": "gid://shopify/ProductOptionValue/1",
 21
                  "name": "Red",
 22
                  "hasVariants": true
 23
                },
 24
                {
 25
                  "id": "gid://shopify/ProductOptionValue/2",
 26
                  "name": "Green",
 27
                  "hasVariants": true
 28
                },
 29
                {
 30
                  "id": "gid://shopify/ProductOptionValue/3",
 31
                  "name": "Blue",
 32
                  "hasVariants": true
 33
                }
 34
              ]
 35
            }
 36
          ],
 37
          "variants": {
 38
            "edges": [
 39
              {
 40
                "node": {
 41
                  "id": "gid://shopify/ProductVariant/1",
 42
                  "selectedOptions": [
 43
                    {
 44
                      "name": "Color",
 45
                      "value": "Red"
 46
                    }
 47
                  ]
 48
                }
 49
              },
 50
              {
 51
                "node": {
 52
                  "id": "gid://shopify/ProductVariant/2",
 53
                  "selectedOptions": [
 54
                    {
 55
                      "name": "Color",
 56
                      "value": "Green"
 57
                    }
 58
                  ]
 59
                }
 60
              },
 61
              {
 62
                "node": {
 63
                  "id": "gid://shopify/ProductVariant/3",
 64
                  "selectedOptions": [
 65
                    {
 66
                      "name": "Color",
 67
                      "value": "Blue"
 68
                    }
 69
                  ]
 70
                }
 71
              }
 72
            ]
 73
          }
 74
        },
 75
        "userErrors": []
 76
      }
 77
    }
 78 }
 Update the product data synchronously
 Note
 Because this mutation encapsulates many domain entities and their relationships, forming valid product inputs requires more care and attention and the mutations will take longer to execute.
 The following productSet mutation updates the existing product's Color option. The original color values Red, Green, and Blue are replaced with new values of Maroon, Forest Green, and Deep Sea Blue. The mutation also updates the product variants from the old color values to the new ones. Each variant retains its original GID.
 The mutation runs synchronously because the synchronous field is set.
 Updated products, variants, and options
 Variant GID Option name Option value name
 gid://shopify/ProductVariant/1 Color Deep Sea Blue
 gid://shopify/ProductVariant/2 Color Forest Green
 gid://shopify/ProductVariant/3 Color Maroon
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 mutation setProductSync {
 2
    productSet(
 3
      synchronous: true,
 4
      input: {
 5
        id: "gid://shopify/Product/1",
 6
        title: "My Extra Cool Product",
 7
        productOptions: [
 8
          {
 9
            name: "Color",
 10
            values: [
 11
              { name: "Maroon" },
 12
              { name: "Forest Green" },
 13
              { name: "Deep Sea Blue" }
 14
            ]
 15
          }
 16
        ],
 17
        variants: [
 18
          { optionValues: [{ optionName: "Color", name: "Deep Sea Blue" }] },
 19
          { optionValues: [{ optionName: "Color", name: "Forest Green" }] },
 20
          { optionValues: [{ optionName: "Color", name: "Maroon" }] }
 21
        ]
 22
      }
 23
    ) {
 24
      product {
 25
        id
 26
        title
 27
        description
 28
        options {
 29
          id
 30
          name
 31
          position
 32
          values
 33
          optionValues {
 34
            id
 35
            name
 36
            hasVariants
 37
          }
 38
        }
 39
        variants(first: 100) {
 40
          edges {
 41
            node {
 42
              id
 43
              selectedOptions {
 44
                name
 45
                value
 46
              }
 47
            }
 48
          }
 49
        }
 50
      }
 51
      userErrors {
 52
       field
 53
       message
 54
      }
 55
    }
 56 }
      "productSet": {
 4
        "product": {
 5
          "id": "gid://shopify/Product/1",
 6
          "title": "My Extra Cool Product",
 7
          "description": "",
 8
          "options": [
 9
            {
 10
              "id": "gid://shopify/ProductOption/1",
 11
              "name": "Color",
 12
              "position": 1,
 13
              "values": [
 14
                "Deep Sea Blue",
 15
                "Forest Green",
 16
                "Maroon"
 17
              ],
 18
              "optionValues": [
 19
                {
 20
                  "id": "gid://shopify/ProductOptionValue/1",
 21
                  "name": "Deep Sea Blue",
 22
                  "hasVariants": true
 23
                },
 24
                {
 25
                  "id": "gid://shopify/ProductOptionValue/2",
 26
                  "name": "Forest Green",
 27
                  "hasVariants": true
 28
                },
 29
                {
 30
                  "id": "gid://shopify/ProductOptionValue/3",
 31
                  "name": "Maroon",
 32
                  "hasVariants": true
 33
                }
 34
              ]
 35
            }
 36
          ],
 37
          "variants": {
 38
            "edges": [
 39
              {
 40
                "node": {
 41
                  "id": "gid://shopify/ProductVariant/1",
 42
                  "selectedOptions": [
 43
                    {
 44
                      "name": "Color",
 45
                      "value": "Deep Sea Blue"
 46
                    }
 47
                  ]
 48
                }
 49
              },
 50
              {
 51
                "node": {
 52
                  "id": "gid://shopify/ProductVariant/2",
 53
                  "selectedOptions": [
 54
                    {
 55
                      "name": "Color",
 56
                      "value": "Forest Green"
 57
                    }
 58
                  ]
 59
                }
 60
              },
 61
              {
 62
                "node": {
 63
                  "id": "gid://shopify/ProductVariant/3",
 64
                  "selectedOptions": [
 65
                    {
 66
                      "name": "Color",
 67
                      "value": "Maroon"
 68
                    }
 69
                  ]
 70
                }
 71
              }
 72
            ]
 73
          }
 74
        },
 75
        "userErrors": []
 76
      }
 77
    }
 78 }
 Next steps
 Product management in GraphQL versus REST
 Learn about the differences between using GraphQL and REST to interact with products, variants, and related API components.
 Migrate to GraphQL
 If you're new to using GraphQL at Shopify, review guides and resources for migrating your app to the GraphQL Admin API from the REST Admin API.
 GraphQL basics
 Learn about the basics of GraphQL, including its benefits over REST.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Create a product with variants and options asynchronously
 Update the product data asynchronously
 Create a product with variants and options synchronously
 Update the product data synchronously
 Next steps
