Previous versions
 App Bridge from npm
 App setup
 Using React
 Actions
 Methods
 Debugging
 Remix app package
 Partner API
 Payments Apps API
 Function APIs
 Discounts
 Multipass
 ShopifyQL
 Blockchain
 Getting started with App Bridge React
 If you're using React in your project, then you should use the App Bridge React library. App Bridge React provides hooks and components that let you use App Bridge in a standard and familiar way inside your React application.
 To get started, you need to add the App Bridge Provider and any custom routing features that you want to use.
 Provider
 The App Bridge Provider provides the app context for all the components within it. It accepts a config object and an optional router prop. For more information about props, refer to Provider props.
 Example code
 This example demonstrates setting up the app with a Provider and using the Loading component.
 Import the Provider from @shopify/app-bridge-react and pass a config object into it. You can then use App Bridge React components and hooks within the Provider.
 Note
 In the following example, config is a valid App Bridge configuration object. Learn more about configuring App Bridge.
 1 import React from 'react';
 2 import ReactDOM from 'react-dom';
 3 import {Provider, Loading} from '@shopify/app-bridge-react';
 4
 5 function MyApp() {
 6
    return (
 7
      <Provider config={config}>
 8
        <Loading />
 9
      </Provider>
 10
    );
 11 }
 12
 13 const root = document.createElement('div');
 14 document.body.appendChild(root);
 15 ReactDOM.createRoot(root).render(<MyApp />);
 Using a custom router
 You may want to use a custom client-side router, such as react-router, to manage navigation within your app. Prior to version 2.0.25 you would use the client router, along with the route propagator to manage custom routing. In newer versions of App Bridge React, the Provider accepts an optional router prop and configures custom routing for you.
 Example code
 Passing in a router will allow you to bypass setting up the client router and the route propagator. If you are using React Router, ensure that the Provider is a child of the router component.
 1 import {useMemo} from 'react';
 2 import {useLocation, useNavigate, BrowserRouter} from 'react-router-dom';
 3 import {Provider} from '@shopify/app-bridge-react';
 4 import Routes from './Routes';
 5
 6 export function MyApp() {
 7
    const navigate = useNavigate();
 8
    const location = useLocation();
 9
    const history = useMemo(
 10
      () => ({replace: (path) => navigate(path, {replace: true})}),
 11
      [navigate],
 12
    );
 13
 14
    const router = useMemo(
 15
      () => ({
 16
        location,
 17
        history,
 18
      }),
 19
      [location, history],
 20
    );
 21
 22
    return (
 23
      <Provider
 24
        config={config}
 25
        router={router}
 26
      >
 27
        <Routes />
 28
      </Provider>
 29
    );
 30 }
 31
 32 export default function AppWrapper() {
 33
    return (
 34
      <BrowserRouter>
 35
        <MyApp />
 36
      </BrowserRouter>
 37
    );
 38 }
 Provider Props
 Name Type Description Required
 config AppConfig Your application configuration Yes
 router RouterConfig Custom router configuration No
 AppConfig
 Name Type Description Required
 apiKey string The client ID from Shopify Partner Dashboard Yes
 host string The hostname for the current shop. Learn more Yes
 forceRedirect boolean Use to toggle redirecting to the Shopify admin when the app is not opened inside the Shopify admin. Defaults to true in production. Defaults to false in dev environments. No
 RouterConfig
 Name Type Description Required
 history {replace: (path) => navigate(path, {replace: boolean})} An object to control the history of the browser Yes
 location Location An object with the location infomation of the current page Yes
 Using App Bridge React with Polaris
 App Bridge React is fully compatible with Polaris. To use them together, wrap your app in both Polaris’s <AppProvider> component and App Bridge React’s <Provider> component.
 1 import React from 'react';
 2 import ReactDOM from 'react-dom';
 3 import {Provider, Loading} from '@shopify/app-bridge-react';
 4 import {AppProvider, Card} from '@shopify/polaris';
 5
 6 function MyApp() {
 7
    return (
 8
      <AppProvider>
 9
        <Provider config={config}>
 10
          <Loading />
 11
          <Card />
 12
        </Provider>
 13
      </AppProvider>
 14
    );
 15 }
 16
 17 const root = document.createElement('div');
 18 document.body.appendChild(root);
 19 ReactDOM.createRoot(root).render(<MyApp />);
 Accessing the App Bridge context directly
 App Bridge React provides access to the App Bridge client app instance using the React Context API.
 Some ways to access the app context include:
 useAppBridge (recommended)
 useContext (for Apps using version 1.24.0 and below)
 Context.Consumer (using render props)
 useAppBridge
 The useAppBridge hook is available in version 1.25.0 and above. You can use this hook to access the App Bridge client app in a functional component.
 1 import React, {useEffect} from 'react';
 2 import ReactDOM from 'react-dom';
 3 import {Provider, useAppBridge} from '@shopify/app-bridge-react';
 4
 5 function MyFunctionalComponent() {
 6
    const app = useAppBridge();
 7
 8
    useEffect(() => {
 9
      const getState = async () => {
 10
        const state = await app.getState();
 11
        console.log(state);
 12
      };
 13
 14
      getState();
 15
    }, [app]);
 16
 17
    return <span>Hello world!</span>;
 18 };
 19
 20 function MyApp() {
 21
    return (
 22
      <Provider config={config}>
 23
        <MyFunctionalComponent />
 24
      </Provider>
 25
    );
 26 }
 27 const root = document.createElement('div');
 28 document.body.appendChild(root);
 29 ReactDOM.createRoot(root).render(<MyApp />);
 useContext
 If you're using a version of App Bridge below 1.25.0 where the useAppBridge hook isn't available, use React’s useContext hook directly.
 1 import React, {useContext} from 'react';
 2 import {Provider, Context} from '@shopify/app-bridge-react';
 3
 4 function MyFunctionalComponent() {
 5
    const app = useContext(Context);
 6
    if (app) {
 7
      // Do something with App Bridge `app` instance...
 8
      app.getState().then(state => console.log(state));
 9
    }
 10
 11
    return (<span>Hello world!</span>);
 12 };
 13
 14 function MyApp() {
 15
    return (
 16
      <Provider config={config}>
 17
        <MyFunctionalComponent />
 18
      </Provider>
 19
    );
 20 }
 21
 22 const root = document.createElement('div');
 23 document.body.appendChild(root);
 24 ReactDOM.createRoot(root).render(<MyApp />);
 App Context with RenderProps
 Use Context.Consumer to get access to the App Bridge client app in render props.
 1 import React from 'react';
 2 import {Provider, Context} from '@shopify/app-bridge-react';
 3
 4 function MyComponent() {
 5
    return (
 6
      <Context.Consumer>
 7
        {app => {
 8
          // Do something with App Bridge `app` instance...
 9
          if (app) {
 10
            app.getState().then(state => console.log(state));
 11
          }
 12
 13
          return (<span>Hello world!</span>);
 14
        }}
 15
      </Context.Consumer>
 16
    );
 17 };
 18
 19 function MyApp() {
 20
    return (
 21
      <Provider config={config}>
 22
        <MyComponent />
 23
      </Provider>
 24
    );
 25 }
 26
 27 const root = document.createElement('div');
 28 document.body.appendChild(root);
 29 ReactDOM.createRoot(root).render(<MyApp />);
 ClientRouter
 Note
 Although the client router and route propagator utilies remain available in the current version of App Bridge React, we recommend avoiding the manual process of setting up these features. Instead, you can use the optional routing prop in the Provider to accomplish the same behavior.
 By default, App Bridge applies URL changes from outside your app by updating the iframe URL. If your app uses client-side routing, such as React Router, then you need to override this behavior to avoid unnecessary full-page reloads. ClientRouter prevents App Bridge from changing the iframe URL, and enables you provide a custom client-side router, for example react-router, to handle navigation. Use ClientRouter with any routing system that provides a history.replace method, which accepts a string for the updated path.
 You can use ClientRouter as a hook or a component.
 useClientRouting hook
 In App.jsx, set up a custom history object and pass it into a Router component.
 Note
 In the following example, config is a valid App Bridge configuration object. Learn more about configuring App Bridge.
 1 // App.jsx
 2 import React from 'react';
 3 import {useNavigate, BrowserRouter} from 'react-router-dom';
 4 import {Provider} from '@shopify/app-bridge-react';
 5
 6 import MyRouter from '../MyRouter';
 7
 8 export default function MyApp() {
 9
    const navigate = useNavigate();
 10
    const history = useMemo(
 11
      () => ({replace: (path) => navigate(path, {replace: true})}),
 12
      [navigate],
 13
    );
 14
 15
    return (
 16
      <BrowserRouter>
 17
        <Provider config={config}>
 18
          <MyRouter history={history} />
 19
        </Provider>
 20
      </BrowserRouter>
 21
    );
 22 }
 In the Router component, pass the history prop into the useClientRouting hook.
 1 // MyRouter.jsx
 2 import React from 'react';
 3 import {useClientRouting} from '@shopify/app-bridge-react';
 4
 5 export default function MyRouter(props) {
 6
    const {history} = props;
 7
 8
    useClientRouting(history);
 9
 10
    return null;
 11 }
 <ClientRouter /> component
 Pass the history prop into the ClientRouter component.
 1 import React from 'react';
 2 import {useNavigate, BrowserRouter} from 'react-router-dom';
 3 import {ClientRouter, Provider} from '@shopify/app-bridge-react';
 4
 5 export default function MyApp() {
 6
    const navigate = useNavigate();
 7
    const history = useMemo(
 8
      () => ({replace: (path) => navigate(path, {replace: true})}),
 9
      [navigate],
 10
    );
 11
 12
    return (
 13
      <BrowserRouter>
 14
        <Provider config={config}>
 15
          <ClientRouter history={history} />
 16
        </Provider>
 17
      </BrowserRouter>
 18
    );
 19 }
 RoutePropagator
 Note
 Although the client router and route propagator utilies remain available in the current version of App Bridge React, we recommend avoiding the manual process of setting up these features. Instead, you can use the optional routing prop in the Provider to accomplish the same behavior.
 When a user navigates inside an embedded app, the URL of the embedded app iframe changes. If the user reloads the page, then the navigation isn't reflected in the URL of the parent page. RoutePropagator enables you synchronize a Shopify embedded app's URL with the parent page.
 You can also use the App Bridge History API to keep the parent URL in sync manually.
 You can use RoutePropagator as a hook or a component.
 useRoutePropagation hook
 Import useRoutePropagation from @shopify/app-bridge-react.
 Call useRoutePropagation with a location parameter.
 Configure the routes according to your custom routing solution.
 Note
 In the following example, config is a valid App Bridge configuration object. Learn more about configuring App Bridge.
 1 import React from 'react';
 2 import {Routes, Route, useLocation} from 'react-router-dom';
 3 import {Provider as AppBridgeProvider} from '@shopify/app-bridge-react';
 4 import {useRoutePropagation} from '@shopify/app-bridge-react';
 5
 6 export default function MyApp() {
 7
    const location = useLocation();
 8
 9
    useRoutePropagation(location);
 10
 11
    return (
 12
      <AppBridgeProvider config={config}>
 13
        <Routes>
 14
          <Route path="/" element={<span>Hello world!</span>} />
 15
          { /* other routes */ }
 16
        </Routes>
 17
      </AppBridgeProvider>
 18
    );
 19 }
 <RoutePropagator />
 Import or create a location object and pass it onto a RoutePropagator component.
 Note
 In the following example, config is a valid App Bridge configuration object. Learn more about configuring App Bridge.
 1 import React from 'react';
 2 import {Routes, Route, useLocation} from 'react-router-dom';
 3 import {Provider as AppBridgeProvider} from '@shopify/app-bridge-react';
 4 import {RoutePropagator as AppBridgeRoutePropagator} from '@shopify/app-bridge-react';
 5
 6
 7 export default function MyApp() {
 8
    const location = useLocation();
 9
 10
    return (
 11
      <AppBridgeProvider config={config}>
 12
        <AppBridgeRoutePropagator location={location} />
 13
        <Routes>
 14
          <Route path="/" element={<span>Hello world!</span>} />
 15
          { /* other routes */ }
 16
        </Routes>
 17
      </AppBridgeProvider>
 18
    );
 19 }
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Provider
 Using a custom router
 Provider Props
 Using App Bridge React with Polaris
 Accessing the App Bridge context directly
 ClientRouter
 RoutePropagator
