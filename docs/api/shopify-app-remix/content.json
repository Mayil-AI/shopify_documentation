APIs
 Collapse sidebar
 shopify app remix
 v2
 v1
 v2
 Overview
 Quick start
 Installation
 Backend setup
 Response headers
 Error boundaries
 OAuth route
 New embedded app authorization strategy
 AppProvider
 Interacting with Shopify Admin
 Entrypoints
 Authenticate
 Unauthenticated
 APIs
 Subscribing to webhooks
 Future flags
 Typing GraphQL operations
 Shopify App package for Remix
 The @shopify/shopify-app-remix package enables Remix apps to authenticate with Shopify and make API calls. It uses App Bridge to enable apps to embed themselves in the Shopify Admin.
 In this page we'll go over the main components you need to integrate an app with Shopify.
 Quick start
 The quickest way to create a new app is using the Shopify CLI. You can use your preferred package manager for that.
 Check out the getting started guide, or the app template for a complete example.
 Navigate to
 Build an app
 Create an app
 npm
 yarn
 pnpm
 1 npm init @shopify/app@latest
 Installation
 If you're not using the CLI, then you can use the examples in this page to set up an existing app to use this package. Start by installing it using your preferred package manager.
 Install package
 npm
 yarn
 pnpm
 1 npm i --save @shopify/shopify-app-remix
 Backend setup
 Using the shopifyApp function, you can create an object that enables your app's backend to authenticate requests coming from Shopify, and interacting with Shopify APIs.
 These functions make it easy for your app stays up to date, benefitting from the current best practices and security updates.
 Caution
 When running on a node environment, you'll also need to import the node adapter, as per the example. This will ensure your app is using the appropriate implementation of the Web fetch and crypto APIs.
 shopifyApp
 Configure ShopifyApp
 /app/shopify.server.ts
 1 import '@shopify/shopify-app-remix/server/adapters/node';
 2 import {
 3
    LATEST_API_VERSION,
 4
    shopifyApp,
 5 } from '@shopify/shopify-app-remix/server';
 6
 7 const shopify = shopifyApp({
 8
    apiKey: process.env.SHOPIFY_API_KEY!,
 9
    apiSecretKey: process.env.SHOPIFY_API_SECRET!,
 10
    appUrl: process.env.SHOPIFY_APP_URL!,
 11
    scopes: ['read_products'],
 12
    apiVersion: LATEST_API_VERSION,
 13 });
 14 export default shopify;
 Response headers
 When loading inside the Shopify Admin, your app will need to add the required Content-Security-Policy header directives, as per our documentation. To do that, this package provides the shopify.addDocumentResponseHeaders method.
 You should return these headers from any endpoint that renders HTML in your app. Most likely you'll want to add this to every HTML response by updating the entry.server.tsx file:
 Add required headers
 /app/entry.server.tsx
 1 import shopify from './shopify.server';
 2
 3 export default function handleRequest(
 4
    request: Request,
 5
    responseStatusCode: number,
 6
    responseHeaders: Headers,
 7
    remixContext: EntryContext,
 8 ) {
 9
    shopify.addDocumentResponseHeaders(request, responseHeaders);
 10
 11
    // ..etc
 12 }
 Error boundaries
 The OAuth process can't happen inside the admin iframe, and this package is capable of detecting that scenario and properly redirecting using the Remix ErrorBoundary export to set the correct headers for App Bridge.
 Use the abstractions provided by this package in your authenticated routes, to automatically set up the error and headers boundaries to redirect outside the iframe when needed.
 Tip
 You can also add this to a Remix layout if you want to authenticate more than one route, but make sure to call the Shopify boundary methods whenever you need to add your own exports.
 Configure header boundaries
 /app/routes/**/*.tsx
 1 import {boundary} from '@shopify/shopify-app-remix/server';
 2
 3 export function ErrorBoundary() {
 4
    return boundary.error(useRouteError());
 5 }
 6
 7 export const headers = (headersArgs) => {
 8
    return boundary.headers(headersArgs);
 9 };
 OAuth route
 Tip
 This is only applicable to non-embedded apps or legacy embedded apps that are not using the new embedded app authorization strategy for OAuth and installation flow. If you're building an embedded app, we strongly recommend using the new embedded app authorization strategy
 To install an app or refresh tokens, you'll need to set up an OAuth route. To do that, set up a splat route that calls authenticate.admin.
 When that function is called, the package will start the OAuth process, and handle the callback from Shopify after it completes.
 The default route is /app/routes/auth/$.tsx, but you can configure this route using the authPathPrefix option.
 Add OAuth route
 /app/routes/auth/$.tsx
 1 import {LoaderFunctionArgs} from '@remix-run/node';
 2
 3 import shopify from '~/shopify.server';
 4
 5 export async function loader({request}: LoaderFunctionArgs) {
 6
    await shopify.authenticate.admin(request);
 7
 8
    // App logic goes here
 9
 10
    return null;
 11 }
 New embedded app authorization strategy
 Tip
 This is available for embedded apps that are using Shopify managed installation. If you're building an embedded app, we strongly recommend using this feature that utilizes Shopify managed install with token exchange.
 We have introduced a new authorization and installation strategy for embedded apps that eliminates the redirects that were previously necessary. It replaces the legacy authorization Code install and grant flow.
 It takes advantage of Shopify managed installation to handle automatic app installations and scope updates, while using token exchange to get an access token for the logged-in user.
 Note
 Newly created Remix apps from the template after February 1st 2024 has this feature enabled by default.
 Enable Shopify managed installation by configuring your scopes through the Shopify CLI.
 Enable the future flag unstable_newEmbeddedAuthStrategy in your app's server configuration file.
 Enjoy no-redirect OAuth flow, and app installation process.
 Enabling the new embedded auth strategy
 /app/shopify.server.ts
 1 // ... imports
 2 const shopify = shopifyApp({
 3
    // .. and the rest of the config
 4
    isEmbeddedApp: true,
 5
    future: {
 6
      unstable_newEmbeddedAuthStrategy: true,
 7
    },
 8 )};
 9
 10 // ... exports
 AppProvider
 In order to use all of the features from App Bridge, you'll need to use the AppProvider component in your app's routes.
 This component will set up App Bridge and Polaris so you can integrate your app into the Shopify Admin, and it helps us ensure your app stays up to date with Shopify requirements.
 To do this pass the process.env.SHOPIFY_API_KEY to the frontend via the loader.
 Learn more about App Bridge.
 App bridge
 Learn more about Polaris.
 Polaris
 AppProvider
 Add AppProvider
 /app/root.tsx
 1 import {LoaderFunctionArgs} from '@remix-run/node';
 2 import {AppProvider} from '@shopify/shopify-app-remix/react';
 3
 4 import shopify from '~/shopify.server';
 5
 6 export async function loader({request}: LoaderFunctionArgs) {
 7
    await shopify.authenticate.admin(request);
 8
 9
    return json({
 10
      apiKey: process.env.SHOPIFY_API_KEY,
 11
    });
 12 }
 13
 14 export default function App() {
 15
    const {apiKey} = useLoaderData<typeof loader>();
 16
 17
    return (
 18
      <html>
 19
        <head>
 20
          <Meta />
 21
          <Links />
 22
        </head>
 23
        <body>
 24
          <AppProvider apiKey={apiKey} isEmbeddedApp>
 25
            <Outlet />
 26
          </AppProvider>
 27
        </body>
 28
      </html>
 29
    );
 30 }
 Updates & News
 Developer changelog
 Partner blog
 Engineering blog
