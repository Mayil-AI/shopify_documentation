Bring your own stack
 Overview
 Headless with B2B
 Building with the Storefront API
 Building with the Customer Account API
 Additional SDKs
 Headless with B2B
 Note
 B2B only works with new customer accounts. Existing auth/login code related to classic customer accounts will need to be updated to use new customer accounts.
 B2B customers cannot be accessed via the Storefront API. All requests for B2B customers should be made through the Customer Account API.
 This guide will help you build either a dedicated or blended B2B custom storefront. It'll take you through the following steps:
 Creating a storefront customerAccessToken
 Retrieving a companyLocationId
 Using the customerAccessToken and companyLocationId, contextualize storefront queries to get B2B pricing, volume pricing, and quantity rules
 Using the customerAccessToken and companyLocationId, update cart to be aware of B2B specific rules and pricing
 Completing these steps should result in a storefront and cart that is contextualized for a B2B buyer. Checking out with the cart will lead to a B2B checkout.
 Requirements
 Your store is on a Shopify Plus plan.
 You have Apps and channels permissions on the Shopify store that you’re working with.
 You’ve completed the Getting started with the Storefront API guide.
 You’re familiar with Creating and updating a cart with the Storefront API.
 You’ve completed the Getting started with the Customer Account API guide.
 You’ve obtained a Customer access token.
 Step 1: Get a Storefront Customer Access Token
 A storefront customerAccessToken is one component needed to contextualize Storefront API queries for B2B and set a buyer identity on cart.
 After obtaining a Customer Accounts API access token, call the storefrontCustomerAccessTokenCreate mutation on the Customer Account API to get a Storefront customer access token. Save the Storefront customerAccessToken returned by this request as it will be used later.
 1 mutation storefrontCustomerAccessTokenCreate {
 2
    storefrontCustomerAccessTokenCreate {
 3
      customerAccessToken
 4
    }
 5 }
 Step 2: Get a Company Location ID
 A companyLocationId is the other component needed to contextualize Storefront API queries for B2B and set a buyer identity on cart.
 To obtain a companyLocationId, make a Customer Account API query on the customer to get the locations they have access to.
 If this query returns a single location, save the companyLocationId and move on to Step 3: Contextualize Storefront API Requests
 Otherwise continue to the next sub section, Building a location selector for a multi-location buyer
 1 query customer {
 2
    customer {
 3
      id
 4
      companyContacts(first: 1) {
 5
        edges {
 6
          node {
 7
            company {
 8
              id
 9
              name
 10
              locations(first: 10) {
 11
                edges {
 12
                  node {
 13
                    id
 14
                    name
 15
                  }
 16
                }
 17
              }
 18
            }
 19
          }
 20
        }
 21
      }
 22
    }
 23 }
 Building a location selector for a multi-location buyer
 If the customer can buy for multiple locations, you'll need to build a location selector so the customer can choose which location they want to buy for. It can be rendered anywhere on your storefront. To provide a seamless user experience, it is advised to redirect the user to the location selector after successfully authenticating with the Customer Account API.
 Display all locations from the customer query in a location selector on your storefront
 Allow the user to select a location
 Save the selected location’s ID for later requests
 Step 3: Contextualize Storefront API Requests
 Including the buyer argument on the @inContext directive will contextualize any storefront queries for a B2B buyer. Any queries and mutations that need to be contextualized should be updated to include a buyer.
 With a contextualized query, you can access a quantityRule and quantityPriceBreaks on a product variant, as well as get a price that is contextualized for the buyer.
 Contextualized RecommendedProducts Query
 GraphQL mutation
 1 query RecommendedProducts (
 2
     $buyer: BuyerInput
 3 ) @inContext(buyer: $buyer) {
 4
     products(first: 5) {
 5
       nodes {
 6
         id
 7
         variants(first: 5) {
 8
          nodes {
 9
            id
 10
            quantityRule {
 11
              maximum
 12
              minimum
 13
              increment
 14
            }
 15
            quantityPriceBreaks(first: 5) {
 16
              nodes {
 17
                minimumQuantity
 18
                price {
 19
                  amount
 20
                  currencyCode
 21
                }
 22
              }
 23
            }
 24
          }
 25
        }
 26
      }
 27
    }
 28 }
 Variables
 1 "buyer": {
 2
     "customerAccessToken": "<your-customerAccessToken>",
 3
     "companyLocationId": "gid://shopify/CompanyLocation/10079785100",
 4 }
 Note
 The buyer argument for @inContext is ignored for cart queries. In order to get a contextualized cart, follow Step 4: Set the Buyer Identity on Cart and set the buyer identity with cartBuyerIdentityUpdate, or include the buyer identity on cartCreate.
 Other arguments on the @inContext directive (country and language) will still work as expected for cart queries.
 Step 4: Set the Buyer Identity on Cart
 Include buyer identity on cart with the storefront customerAccessToken from an authenticated user and the companyLocationId. For more details on carts, see the Create and update a cart with the Storefront API guide.
 Call the cartCreate mutation. The buyerIdentity argument should be supplied with the input fields customerAccessToken and companyLocationId.
 For customerAccessToken, use the saved storefront customer access token from Step 1: Get a Storefront Customer Access Token
 For companyLocationId, use the location ID from Step 2: Get a Company Location ID
 Setting Buyer Identity on Cart
 GraphQL mutation
 1 mutation cartCreate {
 2
    cartCreate {
 3
      cart {
 4
        # Cart fields
 10
    }
 11 }
 Variables
 1 {
 2
    "buyerIdentity": {
 3
      "customerAccessToken": "<your-customerAccessToken>",
 4
      "companyLocationId": "gid://shopify/CompanyLocation/10079785100",
 5
    }
 6 }
 The cartBuyerIdentityUpdate mutation also supports a buyerIdentity argument. Use this mutation to update and existing cart with the customerAccessToken and companyLocationId.
 Caution
 Updating the buyer identity on an existing cart with added products may result in an invalid cart.
 Products not available for the current buyer will be removed from cart. Products that are available, but with new quantity rules, will remain unchanged. Querying the cart will not return an error, but making updates to the cart may result in an error which can be read in the returned userErrors field.
 If the customer continues to checkout with an invalid cart, the issues will be displayed to the customer as an error message.
 (Optional) Building a gated B2B store
 With headless you have the flexibility to gate specific features to B2B buyers. For example, you can, allow potential buyers to view products, but without prices or the ability to order
 When querying for a product, only include the price if there is a logged in session (valid customerAccessToken with a saved companyLocationId). Only show the "add to cart" button if there is a logged in session (valid customerAccessToken with a saved companyLocationId)
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Step 1: Get a Storefront Customer Access Token
 Step 2: Get a Company Location ID
 Step 3: Contextualize Storefront API Requests
 Step 4: Set the Buyer Identity on Cart
 (Optional) Building a gated B2B store
 Updates & News
 Developer changelog
 Partner blog
 Engineering blog
