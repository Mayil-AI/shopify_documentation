Building with the Customer Account API
 Additional SDKs
 Retrieve metafields with the Storefront API
 You can retrieve metafields with the Storefront API to access additional information from different types of resources. This guide describes how to expose metafields to the Storefront API, retrieve them, and hide them from the Storefront API.
 Requirements
 You've completed the Getting started with the Storefront API guide.
 You're familiar with querying products and collections.
 You've created resources that support metafields in your store, and you've created metafields for those resources.
 You're familiar with how metafields work.
 Note
 You can't create, update, or delete metafields with the Storefront API. If you want to perform these types of operations on metafields, then you need to use the GraphQL Admin API or the REST Admin API.
 Step 1: Expose metafields
 To create a MetafieldStorefrontVisibility record, you can use the metafieldStorefrontVisibilityCreate mutation in the GraphQL Admin API. The input object for the mutation uses the following fields:
 namespace — The namespace of the metafields to be visible to the Storefront API.
 key — The key of the metafields to be visible to the Storefront API.
 ownerType — The core resource that owns this metafield. For example, PRODUCT.
 The following example creates a MetafieldStorefrontVisibility record that exposes all product metafields that have the namespace testapp and the key pizza-size-inches:
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    metafieldStorefrontVisibilityCreate(
 3
      input: {
 4
        namespace: "testapp"
 5
        key: "pizza-size-inches"
 6
        ownerType: PRODUCT
 7
      }
 8
    ) {
 9
      metafieldStorefrontVisibility {
 10
        id
 11
      }
 12
      userErrors {
 13
        field
 14
        message
 15
      }
 16
    }
 17 }
 JSON response
 1 // Any product metafield with the namespace `testapp` and the key `pizza-size-inches` will now be visible to the Storefront API.
 2 {
 3
    "data": {
 4
      "metafieldStorefrontVisibilityCreate": {
 5
        "metafieldStorefrontVisibility": {
 6
          "id": "gid://shopify/MetafieldStorefrontVisibility/196664"
 7
        },
 8
        "userErrors": []
 9
      }
 10
    }
 11 }
 Step 2: Retrieve metafields
 After exposing metafields, you can retrieve them with the Storefront API by using the metafield field. You can retrieve a single metafield for a product or a product variant. To specify the metafield that you want to retrieve, use the namespace and key arguments.
 In the following example, you have a product called “Amazing Frozen Pizza” and you've created metafields that store the size of the pizza and the pizza's expiration date. You want to display those values on the storefront according to each metafield's type. The following example shows how to retrieve the value and type for each metafield using the Storefront API.
 POST https://{shop}.myshopify.com/api/{api_version}/graphql.json
 GraphQL query
 1 query {
 2
    product(handle: "amazing-frozen-pizza") {
 3
      pizzaSizeInches: metafield(namespace: "testapp", key: "pizza-size-inches") {
 4
        value
 5
        type
 6
      }
 7
      expirationDate: metafield(namespace: "testapp", key: "expiration-date") {
 8
        value
 9
        type
 10
      }
 11
    }
 12 }
 JSON response
 1 {
 2
    "data": {
 3
      "productByHandle": {
 4
        "pizzaSizeInches": {
 5
          "value": "9",
 6
          "type": "number_integer"
 7
        },
 8
        "expirationDate": {
 9
          "value": "2022-06-30",
 10
          "type": "date"
 11
        }
 Step 3: Hide metafields (optional)
 If you no longer need to access a metafield with the Storefront API, then you can hide it again by using the GraphQL Admin API to delete the MetafieldStorefrontVisibility record that you created.
 To delete a MetafieldStorefrontVisibility record, you need to provide its ID to the metafieldStorefrontVisibilityDelete mutation.
 The following example retrieves a list of MetafieldStorefrontVisibility records. Each result returns the object's id, namespace, key, and ownerType.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 query {
 2
    metafieldStorefrontVisibilities(first:5, namespace: "testapp") {
 3
 6
          namespace
 7
          key
 8
          ownerType
 9
        }
 10
      }
 11
    }
 12 }
 JSON response
 1 {
 2
    "data": {
 3
      "metafieldStorefrontVisibilities": {
 4
 7
              "id": "gid://shopify/MetafieldStorefrontVisibility/393272",
 8
              "namespace": "testapp",
 9
              "key": "pizza-size-inches",
 10
              "ownerType": "Product"
 11
            }
 12
          },
 13
          {
 14
            "node": {
 15
              "id": "gid://shopify/MetafieldStorefrontVisibility/426040",
 16
              "namespace": "testapp",
 17
              "key": "expiration-date",
 18
              "ownerType": "Product"
 19
            }
 20
          }
 21
        ]
 The following example uses one of the returned IDs to delete the MetafieldStorefrontVisibility that has the namespace testapp and the key pizza-size-inches.
 POST https://{shop}.myshopify.com/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    metafieldStorefrontVisibilityDelete(id: "gid://shopify/MetafieldStorefrontVisibility/426040") {
 3
      deletedMetafieldStorefrontVisibilityId
 4
      userErrors {
 5
        field
 6
        message
 7
      }
 8
    }
 9 }
 JSON response
 1 {
 2
    "data": {
 3
      "deletedMetafieldStorefrontVisibilityId": "gid://shopify/MetafieldStorefrontVisibility/426040",
 4
      "userErrors": []
 5
    }
 6 }
 Next steps
 Learn how to use metafields to store information related to your app and attach that information to Shopify API resources.
 Explore the metafield reference for the Storefront API.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Step 1: Expose metafields
 Step 2: Retrieve metafields
 Step 3: Hide metafields (optional)
