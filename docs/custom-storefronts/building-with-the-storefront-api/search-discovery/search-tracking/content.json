API exploration
 Products and collections
 Search and discovery
 Overview
 Set up search tracking
 Markets
 Cart
 Customers
 Prioritizing data in your query
 Release notes
 Storefront API reference
 Building with the Customer Account API
 Additional SDKs
 Optimize your store’s performance with search tracking
 You can measure your storefront’s search performance and improve its relevance by collecting and leveraging customer interaction data.
 This guide shows you how to set up search tracking on your custom storefront using the Storefront API and Shopify analytics functionality available in Hydrogen.
 Note
 Search tracking is only supported in custom storefronts built with either Hydrogen or other React frameworks using the Hydrogen React library.
 What you’ll learn
 In this tutorial, you’ll learn how to do the following tasks:
 Set up Shopify cookies.
 Extract and append search tracking parameters.
 Send analytics to Shopify.
 Requirements
 You've completed the Getting started with the Storefront API guide.
 You’ve learned how to set up Shopify analytics in Hydrogen.
 You’re using the Storefront API version 2023-07 or higher.
 Step 1: Set up Shopify cookies
 To enable search tracking, use Hydrogen’s useShopifyCookies hook to create and refresh required Shopify cookies. It's up to you to decide how to obtain the value for hasUserConsent. Without hasUserConsent set to true, Shopify cookies are removed.
 File
 JavaScript
 TypeScript
 app/root.jsx
 1 import {useShopifyCookies} from '@shopify/hydrogen';
 2
 3 export default function App() {
 4
    useShopifyCookies({hasUserConsent: true});
 Tip
 Learn more about how to set up Shopify analytics.
 Shopify cookies are automatically added to Storefront API queries when Hydrogen’s createStorefrontClient utility function is used.
 For Hydrogen storefronts, follow the Hydrogen documentation.
 For storefronts using other React frameworks and the Hydrogen React library, follow the Hydrogen React documentation.
 Step 2: Extract and append search tracking parameters
 You can extract search tracking parameters from the search and predictiveSearch responses using the trackingParameters field. The following examples show how to return the tracking parameters and append them to the search result URLs.
 Example of search
 POST https://{shop}.myshopify.com/api/{api_version}/graphql.json
 GraphQL query
 1 {
 2
    search(query: "snowboard", types: PRODUCT, first: 3) {
 3
      edges {
 4
        node {
 5
          ... on Product {
 6
            handle
 7
            trackingParameters
 8
          }
 9
        }
      "search": {
 4
        "edges": [
 5
          {
 6
            "node": {
 7
              "handle": "mail-it-in-freestyle-snowboard",
 8
              "trackingParameters": "_pos=1&_sid=2d34dc612&_ss=r"
 9
            }
 10
          },
 11
          {
 12
            "node": {
 13
              "handle": "the-dev-snowboard",
 14
              "trackingParameters": "_pos=2&_sid=2d34dc612&_ss=r"
 15
            }
 16
          },
 17
          {
 18
            "node": {
 19
              "handle": "snowboard",
 20
              "trackingParameters": "_pos=3&_sid=2d34dc612&_ss=r"
 21
            }
 22
          }
 23
        ]
 24
      }
 25
    }
 26 }
 Example of predictiveSearch
 POST https://{shop}.myshopify.com/api/{api_version}/graphql.json
 GraphQL query
 1 {
 2
    predictiveSearch(query: "toy") {
 3
      queries {
 4
        text
 5
        trackingParameters
 6
      }
 7
      collections {
 8
        handle
 9
        trackingParameters
 10
      }
 11
      products {
 12
        handle
 13
        trackingParameters
 14
      }
 15
    }
 16 }
 JSON response
 1 {
 2
    "data": {
 3
      "predictiveSearch": {
 4
        "queries": [
 5
          {
 6
            "text": "snowboard",
 7
            "trackingParameters": "_pos=1&_psq=snow&_ss=e&_v=1.0"
 8
          },
 9
          {
 10
            "text": "oxygen snowboard",
 11
            "trackingParameters": "_pos=2&_psq=snow&_ss=e&_v=1.0"
 12
          },
 13
          {
 14
            "text": "3d snowboard",
 15
            "trackingParameters": "_pos=3&_psq=snow&_ss=e&_v=1.0"
 16
          }
 17
        ],
 18
        "collections": [
 19
          {
 20
            "handle": "hydrogen-snowboards",
 21
            "trackingParameters": "_pos=1&_psq=toy&_ss=e&_v=1.0"
 22
          }
 23
        ],
 24
        "products": [
 25
          {
 26
            "handle": "the-hosted-snowboard",
 27
            "trackingParameters": "_pos=1&_psq=snow&_ss=e&_v=1.0"
 28
          },
 29
          {
 30
            "handle": "the-dev-snowboard",
 31
            "trackingParameters": "_pos=2&_psq=snow&_ss=e&_v=1.0"
 32
          },
 33
          {
 34
            "handle": "the-hero-snowboard",
 35
            "trackingParameters": "_pos=3&_psq=snow&_ss=e&_v=1.0"
 36
          }
 37
        ]
 38
      }
 39
    }
 40 }
 Example of appending tracking parameters
 The following example shows how to construct search result URLs using an array of products.
 1 const products = [
 2
    {
 3
      handle: "mail-it-in-freestyle-snowboard",
 4
      trackingParameters: "_pos=1&_sid=2d34dc612&_ss=r"
 5
    },
 6
    {
 7
      handle: "the-dev-snowboard",
 8
      trackingParameters: "_pos=2&_sid=2d34dc612&_ss=r"
 9
    },
 10
    {
 11
      handle: "snowboard",
 12
      trackingParameters: "_pos=3&_sid=2d34dc612&_ss=r"
 13
    }
 14 ];
 15 const searchResultUrls = products.map((product) => {
 16
    return `https://yourstore.com/products/${product.handle}?${product.trackingParameters}`;
 17 });
 The following example shows how to construct search result URLs using an array of queries.
 1 const getQueryParams = (resource, params) => {
 2
    if (params) {
 3
      return resource.trackingParameters
 4
        ? `?${params}&${resource.trackingParameters}`
 5
        : `?${params}`;
 6
    } else {
 7
      return resource.trackingParameters
 8
        ? `?${resource.trackingParameters}`
 9
        : '';
 10
    }
 11 };
 12
 13 const queries = [
 14
    {
 15
      text: "snowboard",
 16
      trackingParameters: "_pos=1&_psq=snow&_ss=e&_v=1.0"
 17
    },
 18
    {
 19
      text: "oxygen snowboard",
 20
      trackingParameters: "_pos=2&_psq=snow&_ss=e&_v=1.0"
 21
    },
 22
    {
 23
      text: "3d snowboard",
 24
      trackingParameters: "_pos=3&_psq=snow&_ss=e&_v=1.0"
 25
    }
 26 ];
 27 const searchResultUrls = queries.map((query) => {
 28
    const queryParams = getQueryParams(query, `q=${encodeURIComponent(query.text)}`)
 29
    return `https://yourstore.com/search${queryParams}`;
 30 });
 Step 3: Send analytics to Shopify
 Follow the Hydrogen analytics documentation to learn how to send page view and cart events to Shopify.
 Next steps
 Customize search, filters, and product recommendations using the Shopify Search & Discovery app.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you’ll learn
 Requirements
 Step 1: Set up Shopify cookies
 Step 2: Extract and append search tracking parameters
 Step 3: Send analytics to Shopify
 Next steps
 Updates & News
 Developer changelog
 Partner blog
