Building with the Storefront API
 Building with the Customer Account API
 Additional SDKs
 Build a product details page with Hydrogen
 In this tutorial, you'll create a new page in your Remix app to display product data from Shopify.
 By creating a product page, you can share information about a product with customers, including the product’s variants, description, and price. You’ll also be able to offer customers a way to purchase the product.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Set up a new Remix route
 Query products by their handle
 Render product data on the page
 Create a product variant selector
 Make the product variant selector interactive with Remix Links and Optimistic UI
 Add a Shop Pay button
 Requirements
 You've built a collection page with Hydrogen.
 You're using API version 2023-07 or higher.
 Step 1: Create a product route
 To begin building your product page, create a file called app/routes/products.$handle.jsx, and add the following code.
 app/routes/products.$handle.jsx
 1 export default function ProductHandle() {
 2
    return (
 3
      <div className="product-wrapper">
 4
        <h2>Product content will go here</h2>
 5
      </div>
 6
    );
 7 }
 Ensure the page renders by clicking through to the Hoodie.
 Step 2: Setup the Remix loader to get product data
 Loaders are functions that retrieve the data that's needed to render the page.
 Create the loader
 Create a loader function by adding the following code to the top of your products.$handle.jsx route. This code example retrieves the URL handle variable from the params that are passed to the loader function, and returns sample JSON that you can use in the JSX component.
 app/routes/products.$handle.jsx
 1 import {json} from '@shopify/remix-oxygen';
 2
 3 export function loader({params}) {
 4
    const {handle} = params;
 5
 6
    return json({
 7
      handle
 8
    });
 9 }
 Render the loader data
 Now that you have a loader, you can get the loader's data in your JSX component with the useLoaderData() hook. Import the hook and render the handle. Your complete products.$handle.jsx file should look like this.
 app/routes/products.$handle.jsx
 1 import {useLoaderData} from '@remix-run/react';
 2 import {json} from '@shopify/remix-oxygen';
 3
 4 export function loader({params}) {
 5
    const {handle} = params;
 6
 7
    return json({
 8
      handle
 9
    });
 10 }
 11
 12 export default function ProductHandle() {
 13
    const {handle} = useLoaderData();
 14
 15
    return (
 16
      <div className="product-wrapper">
 17
        <h2>Product Handle: {handle}</h2>
 18
      </div>
 19
    );
 20 }
 Reload your page to see the URL handle render on the page.
 Step 3: Query the Storefront API
 Your loader function uses the params object to get URL data. Remix loaders also include the request and context objects. Shopify's storefront query function exists in the context object. You can use the following steps to set up a GraphQL query and connect it to your storefront query() function.
 Create a GraphQL string
 Add the following query to the bottom of your product route. This simple query uses the $handle variable to retrieve the data for a single product.
 app/routes/products.$handle.jsx
 1 const PRODUCT_QUERY = `#graphql
 2
    query product($handle: String!) {
 3
      product(handle: $handle) {
 4
        id
 5
        title
 6
        handle
 7
        vendor
 8
      }
 9
    }
 10 `;
 Execute the query in the Remix loader
 Now you can combine your handle and GraphQL query string with a storefront query() function. Update your loader:
 app/routes/products.$handle.jsx
 1 export async function loader({params, context}) {
 2
    const {handle} = params; // Destructure the handle from the URL params
 3
    const {product} = await context.storefront.query(PRODUCT_QUERY, {
 4
      variables: {
 5
        handle, // Pass the handle to the GraphQL query
 6
      },
 7
    });
 8
 9
    if (!product?.id) {
 10
      throw new Response(null, {status: 404});
 11
    }
 12
 13
    return json({
 14
      handle,
 15
      product,
 16
    });
 17 };
 Log the product data
 Update your ProductHandle() component to destructure and log product data:
 app/routes/products.$handle.jsx
 1 export default function ProductHandle() {
 2
    const {handle, product} = useLoaderData();
 3
    console.log(product);
 4
 5
    return (
 6
      <div className="product-wrapper">
 7
        <h2>Product Handle: {handle}</h2>
 8
      </div>
 9
    );
 10 }
 You should see product details in your developer console.
 Step 4: Display title, description, and product images
 Now that you're familiar with querying product data, you can start building out the page. First, update your GraphQL query to get more product data.
 Update the GraphQL query
 Replace your existing PRODUCT_QUERY with the following query to fetch more product data, including descriptive details, images, and options.
 app/routes/products.$handle.jsx
 1 const PRODUCT_QUERY = `#graphql
 2
    query product($handle: String!) {
 3
      product(handle: $handle) {
 4
        id
 5
        title
 6
        handle
 7
        vendor
 8
        description
 9
        descriptionHtml
 10
        featuredImage{
 11
          id
 12
          url
 13
          altText
 14
          width
 15
          height
 16
        }
 17
        options {
 18
          name,
 19
          values
 20
        }
 21
      }
 22
    }
 23 `;
 Render the title, vendor and description on the page:
 app/routes/products.$handle.jsx
 1 export default function ProductHandle() {
 2
    const {product} = useLoaderData();
 3
 4
    return (
 5
      <section className="w-full gap-4 md:gap-8 grid px-6 md:px-8 lg:px-12">
 6
        <div className="grid items-start gap-6 lg:gap-20 md:grid-cols-2 lg:grid-cols-3">
 7
          <div className="grid md:grid-flow-row  md:p-0 md:overflow-x-hidden md:grid-cols-2 md:w-full lg:col-span-2">
 8
            <div className="md:col-span-2 snap-center card-image aspect-square md:w-full w-[80vw] shadow rounded">
 9
              <h2>TODO Product Image</h2>
 10
            </div>
 11
          </div>
 12
          <div className="md:sticky md:mx-auto max-w-xl md:max-w-[24rem] grid gap-2 p-0 md:p-6 md:px-0 top-[6rem] lg:top-[8rem] xl:top-[10rem]">
 13
            <div className="grid gap-2">
 14
              <h1 className="text-4xl font-bold leading-10 whitespace-normal">
 15
                {product.title}
 16
              </h1>
 17
              <span className="max-w-prose whitespace-pre-wrap inherit text-copy opacity-50 font-medium">
 18
                {product.vendor}
 19
              </span>
 20
            </div>
 21
            <h3>TODO Product Options</h3>
 22
            <div
 23
              className="prose border-t border-gray-200 pt-6 text-black text-md"
 24
              dangerouslySetInnerHTML={{ __html: product.descriptionHtml }}
 25
            ></div>
 26
          </div>
 27
        </div>
 28
      </section>
 29
    );
 30 }
 SEO
 Export a handle object for your SEO component.
 app/routes/products.$handle.jsx
 1 const seo = ({data}) => ({
 2
    title: data?.product?.title,
 3
    description: data?.product?.description.substr(0, 154),
 4 });
 5
 6 export const handle = {
 7
    seo,
 8 };
 Render the product image
 Import the Image component at the top of your product route. This component will render a responsive image.
 app/routes/products.$handle.jsx
 1 import {Image} from '@shopify/hydrogen-react';
 Replace <h2>TODO Product Image</h2> in your ProductHandle() function with the <Image> component and pass along your featured image.
 app/routes/products.$handle.jsx
 1 <Image
 2
    className={`w-full h-full aspect-square object-cover`}
 3
    data={product.featuredImage}
 4 />
 Tip
 Hydrogen also offers a MediaFile component which can render images, videos and 3D models.
 You should have the featured image, title, vendor, and description rendering in a two-column layout.
 Step 5: Render the product variant options
 Remix loads a full page when you navigate to it. For each additional URL change, React Router will handle page updates. The end result is a website that feels like an app, without all of the hassle.
 Remix uses the URL to store state. This means that any interaction that you build for the product options selector should also be reflected in the URL. You'll use Remix <Link> components to help you build these interactive pieces.
 The option selector works as follows:
 User clicks on option <Link>
 Remix updates the URL
 Remix runs the loader() function with the new URL
 The loader function executes a storefront.query() request
 Remix returns the new data as JSON
 React receives an update from the useLoaderData() hook and makes the necessary updates to the page.
 You will need to make two updates for the options selector to work.
 Render the options as <Link> components
 Update the storefront.query() to accept the new options URL parameters
 Render the product options links
 Create a new component to render the options as links. Create the file app/components/ProductOptions.jsx. Add in the following code.
 app/components/ProductOptions.jsx
 1 import {Link, useLocation} from '@remix-run/react';
 2
 3 export default function ProductOptions({options}) {
 4
    // pathname and search will be used to build option URLs
 5
    const {pathname, search} = useLocation();
 6
 7
    return (
 8
      <div className="grid gap-4 mb-6">
 9
 10
        {/* Each option will show a label and option value <Links> */}
 11
        {options.map((option) => {
 12
          if (!option.values.length) {
 13
            return;
 14
          }
 15
          return (
 16
            <div
 17
              key={option.name}
 18
              className="flex flex-col flex-wrap mb-4 gap-y-2 last:mb-0"
 19
            >
 20
              <h3 className="whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]">
 21
                {option.name}
 22
              </h3>
 23
 24
              <div className="flex flex-wrap items-baseline gap-4">
 25
                {option.values.map((value) => {
 26
                  // Build a URLSearchParams object from the current search string
 27
                  const linkParams = new URLSearchParams(search);
 28
                  // Set the option name and value, overwriting any existing values
 29
                  linkParams.set(option.name, value);
 30
                  return (
 31
                    <Link
 32
                      key={value}
 33
                      to={`${pathname}?${linkParams.toString()}`}
 34
                      preventScrollReset
 35
                      replace
 36
                      className="leading-none py-1 border-b-[1.5px] cursor-pointer hover:no-underline transition-all duration-200"
 37
                    >
 38
                      {value}
 39
                    </Link>
 40
                  );
 41
                })}
 42
              </div>
 43
            </div>
 44
          );
 45
        })}
 46
      </div>
 47
    );
 48 }
 Now you can add this component to your ProductHandle() function in products.$handle.jsx.
 At the top of the file, import the new component.
 app/routes/products.$handle.jsx
 1 import ProductOptions from '~/components/ProductOptions';
 Right before the description block, render the component.
 app/routes/products.$handle.jsx
 1 <ProductOptions options={product.options} />
 2 <div
 3
    className="prose border-t border-gray-200 pt-6 text-black text-md"
 4
    dangerouslySetInnerHTML={{ __html: product.descriptionHtml }}
 5 />
 Reload your page and click on some links. You should see the URL change, but the page doesn't reload. This is React Router taking control and loading your updated state.
 You still need to update the loader function to recognize our URL parameters and update the data, which is covered in the next section.
 Update the Loader
 As well as params and context, the loader also has access to the request object. You'll need the searchParams from the request URL.
 Remix
 Did you know that Remix uses Web Standard Request APIs? In fact, Remix makes use of many web standards so you won't need to learn a new and custom way of doing familiar work.
 Use the following code to update the loader function in your product route to pull in the request and format the options data for the Storefront API.
 app/routes/products.$handle.jsx
 1 export async function loader({params, context, request}) {
 2
    const {handle} = params;
 3
    const searchParams = new URL(request.url).searchParams;
 4
    const selectedOptions = [];
 5
 6
    // set selected options from the query string
 7
    searchParams.forEach((value, name) => {
 8
      selectedOptions.push({name, value});
 9
    });
 10
 11
    const {product} = await context.storefront.query(PRODUCT_QUERY, {
 12
      variables: {
 13
        handle,
 14
        selectedOptions,
 15
      },
 16
    });
 17
 18
    if (!product?.id) {
 19
      throw new Response(null, {status: 404});
 20
    }
 21
 22
    return json({
 23
      product,
 24
    });
 25 }
 This updated code takes the search params and creates a selectedOptions array of objects that's passed to the PRODUCT_QUERY.
 Tip
 Pay close attention to the searchParams.forEach() loop. The web standard URLSearchParams object passes the value, and then the key to the function. This code block names them as value and name as required by the Storefront API selectedOptionInput input
 Now, you can update your PRODUCT_QUERY to get a selected variant from the selectedOptions data:
 1 const PRODUCT_QUERY = `#graphql
 2
    query product($handle: String!, $selectedOptions: [SelectedOptionInput!]!) {
 3
      product(handle: $handle) {
 4
        id
 5
        title
 6
        handle
 7
        vendor
 8
        description
 9
        descriptionHtml
 10
        featuredImage{
 11
          id
 12
          url
 13
          altText
 14
          width
 15
          height
 16
        }
 17
        options {
 18
          name,
 19
          values
 20
        }
 21
        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {
 22
          id
 23
          availableForSale
 24
          selectedOptions {
 25
            name
 26
            value
 27
          }
 28
          image {
 29
            id
 30
            url
 31
            altText
 32
            width
 33
            height
 34
          }
 35
          price {
 36
            amount
 37
            currencyCode
 38
          }
 39
          compareAtPrice {
 40
            amount
 41
            currencyCode
 42
          }
 43
          sku
 44
          title
 45
          unitPrice {
 46
            amount
 47
            currencyCode
 48
          }
 49
          product {
 50
            title
 51
            handle
 52
          }
 53
        }
 54
        variants(first: 1) {
 55
          nodes {
 56
            id
 57
            title
 58
            availableForSale
 59
            price {
 60
              currencyCode
 61
              amount
 62
            }
 63
            compareAtPrice {
 64
              currencyCode
 65
              amount
 66
            }
 67
            selectedOptions {
 68
              name
 69
              value
 70
            }
 71
          }
 72
        }
 73
      }
 74
    }
 75 `;
 The variantBySelectedOptions returns the selected variant based on the option values that you retrieved from the URL. You can test the return by adding a line below <ProductOptions/> to print out the selected variant ID:
 app/routes/products.$handle.jsx
 1 <ProductOptions options={product.options} />
 2 {/* Delete this after verifying */}
 3 <p>Selected Variant: {product.selectedVariant?.id}</p>
 Click on some options to see the selected variant ID change. After you have verified, you can remove the selected variant line of code.
 Right now you can't visually see which options are selected. You will fix this in the next section.
 Display the selected variant's image
 Update the product image to display the selected variant's image (if available).
 app/routes/products.$handle.jsx
 1 <Image
 2
    className={`w-full h-full aspect-square object-cover`}
 3
    data={product.selectedVariant?.image || product.featuredImage}
 4 />
 Update the product options UI
 URL query parameters hold your state, so you can refer to these parameters to determine the selected option. You can read these parameters with Remix's useSearchParams() hook. Update your logic so that it loops over each option to add a dark underline to selected <Link> elements.
 app/components/ProductOptions.jsx
 1 import {Link, useLocation,useSearchParams} from '@remix-run/react';
 2
 3 export default function ProductOptions({options}) {
 4
    const {pathname, search} = useLocation();
 5
    const [currentSearchParams] = useSearchParams();
 6
 7
    const searchParams = currentSearchParams;
 8
 9
    return (
 10
      <div className="grid gap-4 mb-6">
 11
        {options.map((option) => {
 12
          if (!option.values.length) {
 13
            return;
 14
          }
 15
 16
          // get the currently selected option value
 17
          const currentOptionVal = searchParams.get(option.name);
 18
          return (
 19
            <div
 20
              key={option.name}
 21
              className="flex flex-col flex-wrap mb-4 gap-y-2 last:mb-0"
 22
            >
 23
              <h3 className="whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]">
 24
                {option.name}
 25
              </h3>
 26
 27
              <div className="flex flex-wrap items-baseline gap-4">
 28
                {option.values.map((value) => {
 29
                  const linkParams = new URLSearchParams(searchParams);
 30
                  const isSelected = currentOptionVal === value;
 31
                  linkParams.set(option.name, value);
 32
                  return (
 33
                    <Link
 34
                      key={value}
 35
                      to={`${pathname}?${linkParams.toString()}`}
 36
                      preventScrollReset
 37
                      replace
 38
                      className={`leading-none py-1 border-b-[1.5px] hover:no-underline cursor-pointer transition-all duration-200 ${
 39
                        isSelected ? 'border-gray-500' : 'border-neutral-50'
 40
                      }`}
 41
                    >
 42
                      {value}
 43
                    </Link>
 44
                  );
 45
                })}
 46
              </div>
 47
            </div>
 48
          );
 49
        })}
 50
      </div>
 51
    );
 52 }
 Optimistic UI
 Now you have an option selector that responds to URL changes, but the link underline doesn't update immediately.
 This delay happens because Remix is responding to the URL change, running the loader() function, and passing that data down to the React component. Even when all servers and APIs are fast, this process isn't instant. Because you know that the selection will usually be successful, you can update the UI without waiting for a server response. Remix's Optimistic UI pattern is perfect for this use case. Next you'll add the useNavigation() hook and update the logic that reads the search parameters.
 Import useNavigation at the top of your ProductOptions.jsx file:
 app/components/ProductOptions.jsx
 1 import {
 2
    Link,
 3
    useLocation,
 4
    useSearchParams,
 5
    useNavigation,
 6 } from '@remix-run/react';
 Insert the following code at the top of your ProductOptions function:
 app/components/ProductOptions.jsx
 1 const navigation = useNavigation();
 Replace the searchParams value:
 app/components/ProductOptions.jsx
 1 // Update the in-flight request data from the 'navigation' (if available)
 2 // to create an optimistic UI that selects a link before the request completes
 3 const searchParams = navigation.location
 4
    ? new URLSearchParams(navigation.location.search)
 5
    : currentSearchParams;
 Reload the page and make some option selections. The image changes and the underline selections are now instant, even when the loader is still working to update the data.
 Here is your complete ProductOptions component:
 app/components/ProductOptions.jsx
 1 import {
 2
    Link,
 3
    useLocation,
 4
    useSearchParams,
 5
    useNavigation,
 6 } from '@remix-run/react';
 7
 8 export default function ProductOptions({options}) {
 9
    const {pathname, search} = useLocation();
 10
    const [currentSearchParams] = useSearchParams();
 11
    const navigation = useNavigation();
 12
 13
    // Update the in-flight request data from the 'navigation' (if available)
 14
    // to create an optimistic UI that selects a link before the request completes
 15
    const searchParams = navigation.location
 16
      ? new URLSearchParams(navigation.location.search)
 17
      : currentSearchParams;
 18
 19
    return (
 20
      <div className="grid gap-4 mb-6">
 21
        {options.map((option) => {
 22
          if (!option.values.length) {
 23
            return;
 24
          }
 25
 26
          // get the currently selected option value
 27
          const currentOptionVal = searchParams.get(option.name);
 28
          return (
 29
            <div
 30
              key={option.name}
 31
              className="flex flex-col flex-wrap mb-4 gap-y-2 last:mb-0"
 32
            >
 33
              <h3 className="whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]">
 34
                {option.name}
 35
              </h3>
 36
 37
              <div className="flex flex-wrap items-baseline gap-4">
 38
                {option.values.map((value) => {
 39
                  const linkParams = new URLSearchParams(searchParams);
 40
                  const isSelected = currentOptionVal === value;
 41
                  linkParams.set(option.name, value);
 42
                  return (
 43
                    <Link
 44
                      key={value}
 45
                      to={`${pathname}?${linkParams.toString()}`}
 46
                      preventScrollReset
 47
                      replace
 48
                      className={`leading-none py-1 border-b-[1.5px] cursor-pointer hover:no-underline transition-all duration-200 ${
 49
                        isSelected ? 'border-gray-500' : 'border-neutral-50'
 50
                      }`}
 51
                    >
 52
                      {value}
 53
                    </Link>
 54
                  );
 55
                })}
 56
              </div>
 57
            </div>
 58
          );
 59
        })}
 60
      </div>
 61
    );
 62 }
 Step 6: Set a default variant
 You might notice that a fresh product page has no options selected. You can update your loader to use a default variant so there is always an orderable product available on the page.
 The PRODUCT_QUERY already gets the first variant for you with the variants(first: 1) query filter. You can use that data to update the logic in your loader() function. You'll need to make updates in 4 places:
 Create a new selectedVariant value in the loader
 Destructure it from useLoaderData() in your ProductHandle JSX function
 Pass the selectedVariant to the ProductOptions component
 Update the logic in ProductOptions to set the selected default value
 Update the loader
 Add the following code to the bottom of the loader function, replacing the return statement:
 app/routes/products.$handle.jsx
 1 // Set a default variant so you always have an "orderable" product selected
 2 const selectedVariant =
 3
    product.selectedVariant ?? product?.variants?.nodes[0];
 4
 5 return json({
 6
    product,
 7
    selectedVariant,
 8 });
 Update the useLoaderData() hook
 Add selectedVariant to the useLoaderData() destructured object:
 app/routes/products.$handle.jsx
 1 const {product, selectedVariant} = useLoaderData();
 Pass the variant to ProductOptions
 Update the <ProductOptions> component to accept a selectedVariant parameter:
 app/routes/products.$handle.jsx
 1 <ProductOptions
 2
    options={product.options}
 3
    selectedVariant={selectedVariant}
 4 />
 Update ProductOptions
 Replace the top portion of ProductOptions with the following code:
 app/components/ProductOptions.jsx
 1 export default function ProductOptions({options, selectedVariant}) {
 2
    const {pathname, search} = useLocation();
 3
    const [currentSearchParams] = useSearchParams();
 4
    const navigation = useNavigation();
 5
 6
    const paramsWithDefaults = (() => {
 7
      const defaultParams = new URLSearchParams(currentSearchParams);
 8
 9
      if (!selectedVariant) {
 10
        return defaultParams;
 11
      }
 12
 13
      for (const {name, value} of selectedVariant.selectedOptions) {
 14
        if (!currentSearchParams.has(name)) {
 15
          defaultParams.set(name, value);
 16
        }
 17
      }
 18
 19
      return defaultParams;
 20
    })();
 21
 22
    // Update the in-flight request data from the 'navigation' (if available)
 23
    // to create an optimistic UI that selects a link before the request is completed
 24
    const searchParams = navigation.location
 25
      ? new URLSearchParams(navigation.location.search)
 26
      : paramsWithDefaults;
 27
 28
    return (
 The new logic does the following:
 Get the selectedVariant from the component props
 On render, create a paramsWithDefaults URLSearchParams Object
 Clone the existing parameters
 If the parameters don't already include a selected value for the selected variant, then add it to the cloned parameters
 Use paramsWithDefaults as the fallback when you create the searchParams object
 Test the new logic by visiting http://localhost:3000/products/snowboard. Default option values should be selected on page load.
 This logic doesn't override a user selection, but it pre-populates selected options based on the first variant returned from the Storefront API.
 Step 7: Add a Shop Pay Button
 You've already created a page where customers can view and select your product. To add a Shop Pay button, you can refer to the Hydrogen React components for pre-built commerce primitives.
 Hydrogen React components add client-side ecommerce functionality to JavaScript-based apps. In this step, you'll use the Money and ShopPay components to simplify your development experience.
 Get the Shop Domain
 To use the Shop Pay button, you'll need to get the shop's primary domain from the Storefront API.
 Update your PRODUCT_QUERY to also fetch the shop's primary domain URL.
 app/routes/products.$handle.jsx
 1 const PRODUCT_QUERY = `#graphql
 2
    query product($handle: String!, $selectedOptions: [SelectedOptionInput!]!) {
 3
      shop {
 4
        primaryDomain {
 5
          url
 6
        }
 7
      }
 8
      product(handle: $handle) {
 9
        id
 10
        title
 11
        handle
 12
        vendor
 13
        description
 14
        descriptionHtml
 15
        featuredImage {
 16
          id
 17
          url
 18
          altText
 19
          width
 20
          height
 21
        }
 22
        options {
 23
          name,
 24
          values
 25
        }
 26
        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {
 27
          id
 28
          availableForSale
 29
          selectedOptions {
 30
            name
 31
            value
 32
          }
 33
          image {
 34
            id
 35
            url
 36
            altText
 37
            width
 38
            height
 39
          }
 40
          price {
 41
            amount
 42
            currencyCode
 43
          }
 44
          compareAtPrice {
 45
            amount
 46
            currencyCode
 47
          }
 48
          sku
 49
          title
 50
          unitPrice {
 51
            amount
 52
            currencyCode
 53
          }
 54
          product {
 55
            title
 56
            handle
 57
          }
 58
        }
 59
        variants(first: 1) {
 60
          nodes {
 61
            id
 62
            title
 63
            availableForSale
 64
            price {
 65
              currencyCode
 66
              amount
 67
            }
 68
            compareAtPrice {
 69
              currencyCode
 70
              amount
 71
            }
 72
            selectedOptions {
 73
              name
 74
              value
 75
            }
 76
          }
 77
        }
 78
      }
 79
    }
 80 `;
 Destructure the shop object from the response.
 app/routes/products.$handle.jsx
 1 const {shop, product} = await context.storefront.query(PRODUCT_QUERY, {
 2
    variables: {
 3
      handle,
 4
      selectedOptions,
 5
    },
 6 });
 Return the shop object in the json() function.
 app/routes/products.$handle.jsx
 1 return json({
 2
    shop,
 3
    product,
 4
    selectedVariant,
 5 });
 In the ProductHandle function, destructure shop to the useLoaderData() hook.
 app/routes/products.$handle.jsx
 1 const {shop, product, selectedVariant} = useLoaderData();
 Render the Shop Pay Button
 In the products.$handle.jsx file, import the Hydrogen React components to render pricing and the Shop Pay button:
 app/routes/products.$handle.jsx
 1 import {Image, Money, ShopPayButton} from '@shopify/hydrogen-react';
 Below the <ProductOptions>, render the price and the Shop Pay button:
 app/routes/products.$handle.jsx
 1 <ProductOptions
 2
    options={product.options}
 3
    selectedVariant={selectedVariant}
 4 />
 5 <Money
 6
    withoutTrailingZeros
 7
    data={selectedVariant.price}
 8
    className="text-xl font-semibold mb-2"
 9 />
 10 {selectedVariant.availableForSale && (
 11
    <ShopPayButton
 12
      storeDomain={shop.primaryDomain.url}
 13
      variantIds={[selectedVariant?.id]}
 14
      width={'400px'}
 15
    />
 16 )}
 The pricing should now show for the selected variant, and you can jump directly to a Shop Pay checkout (if the store has it activated).
 The product page now renders all of the details for a product and its variants. It also includes a button to purchase the product.
 Next steps
 Implement an Add to cart button, enabling customers to choose products to purchase before entering the payment process.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Create a product route
 Step 2: Setup the Remix loader to get product data
 Step 3: Query the Storefront API
 Step 4: Display title, description, and product images
 Step 5: Render the product variant options
 Step 6: Set a default variant
 Step 7: Add a Shop Pay Button
 Next steps
 Updates & News
