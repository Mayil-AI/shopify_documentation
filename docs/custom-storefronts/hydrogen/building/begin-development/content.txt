Building with the Storefront API
 Building with the Customer Account API
 Additional SDKs
 Begin developing a Hydrogen storefront
 You're ready to develop a Hydrogen storefront. You want to set up your development environment so that you can begin coding.
 In this tutorial, you'll create a Hydrogen app locally to begin developing a Hydrogen storefront. Hydrogen is an ecommerce toolkit for Remix that's optimized for commerce with Shopify.
 Scenario
 You want to develop a fully functional Hydrogen storefront that includes a collection page, a product page, and a cart. Because this is your first time creating a Hydrogen storefront, you can start with basic boilerplate code that makes your programming experience easier and more efficient.
 Hydrogen storefronts enable you to use Shopify as the commerce engine behind your independently-built storefront experience.
 What you'll learn
 In this tutorial, you’ll learn how to do the following tasks:
 Set up your development environment.
 Generate a codebase for building your custom storefront.
 Familiarize yourself with the structure of your Hydrogen project.
 Create an index route
 Requirements
 You're using API version 2023-07 or higher.
 You’ve installed the following dependencies:
 Node.js version 16 or greater
 npm version 7
 You've familiarized yourself with React and Tailwind CSS. In this tutorial, you'll build with Tailwind's style library.
 In your terminal, run the following command:
 Terminal
 $ npm create @shopify/hydrogen@latest
 Select the following configuration:
 Connect to Shopify: Use sample data from Mock.shop.
 Where would you like to create your storefront? hydrogen-storefront
 Select a language: JavaScript
 Select a styling library: Tailwind
 Install dependencies with npm? (y) Yes
 Create a global `h2` alias? (y) Yes
 Do you want to scaffold routes and core functionality? (n) No, set up later
 Change to the directory for your new Hydrogen storefront:
 Terminal
 $ cd hydrogen-storefront
 Step 2: Start the development server
 Run the following command to start the development server:
 Terminal
 $ npm run dev
 Navigate to the MiniOxygen development server by navigating to http://localhost:3000, or using the port provided in the console output. The placeholder page appears:
 Step 3. Explore your project structure
 So far, you've created a minimal Hydrogen storefront without any routes. Open your code editor and navigate to your Hydrogen project directory to explore the project structure.
 File structure of the Hello World template
 1 ├── app
 2 │   ├── entry.client.jsx // component that sets up browser hydration
 3 │   ├── entry.server.jsx // Remix entry point for the server
 4 │   ├── root.jsx // Your app's top level Remix route
 5 │   └── components // Some scaffolding components like layout, header & cart
 6 │   └── styles // Tailwind directives, reset and app styles
 7 ├── dist
 8 │   ├── client
 9 │   └── worker
 10 ├── .env  // Environment variables including demo store tokens
 11 ├── jsconfig.json // JavaScript or TypeScript configuration file
 12 ├── package.json // Used to install dependencies and run scripts
 13 ├── postcss.config.js // PostCSS configuration
 14 ├── public
 15 │   └── favicon.svg // Hydrogen favicon
 16 ├── remix.config.js // Build and development configuration options
 17 ├── server.js // The absolute entry point for the server when a new HTTP request arrives
 18 └── tailwind.config.js // Tailwind configuration
 Step 4: Create a route
 Remix
 Learn more about routing in Remix.
 Now that you've explored your Hydrogen project structure, you're ready to create your first route.
 Create an app/routes/_index.jsx file, export an Index component and return a message.
 app/routes/_index.jsx
 1 export function meta() {
 2
    return [
 3
      {title: 'Hydrogen'},
 4
      {description: 'A custom storefront powered by Hydrogen'},
 5
    ];
 6 }
 7
 8 export default function Index() {
 9
    return (
 10
      <div>
 11
        <h1>Hello from the home page!</h1>
 12
      </div>
 13
    );
 14 }
 Save the file to see your home page update in real-time.
 The header and footer you can see in your index page were generated by the Skeleton template and rendered in app/components/Layout.jsx.
 You are now ready to dig in and start building your own custom storefront.
 Next steps
 Learn how to build a collection page.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Scenario
 What you'll learn
 Requirements
 Step 2: Start the development server
 Step 3. Explore your project structure
 Step 4: Create a route
 Next steps
