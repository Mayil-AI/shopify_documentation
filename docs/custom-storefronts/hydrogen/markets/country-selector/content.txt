Building with the Customer Account API
 Additional SDKs
 Create a country selector
 In this guide you will learn how to create a country selector so that buyers can change the store language and currency.
 Requirements
 You've completed the Hydrogen getting started with a Hello World example project.
 You've setup the regions and languages for your store with Shopify Markets.
 You've completed the setup multi-region and multilingual storefront with URL paths or setup multi-region and multilingual storefront with domains and subdomains tutorial.
 You're familiar with using the Storefront API with Shopify Markets.
 Step 1: Provide a list of available countries
 Create a JSON file with a list of available countries that will be rendered at every page. You can use the /app/data/countries.js file in the Hydrogen demo store as a point of reference.
 For performance and SEO reasons, Shopify recommends using a static JSON variable for the countries. Optionally, you can create a build script that generates this file on build.
 The following is an example of the countries data structure:
 /app/data/countries
 JavaScript
 TypeScript
 /app/data/countries.js
 1 export const countries = {
 2
    default: {
 3
      language: 'EN',
 4
      country: 'US',
 5
      label: 'United States (USD $)', // Labels to be shown in the country selector
 6
      host: 'hydrogen.shop', // The host and pathPrefix are used for linking
 7
    },
 8
    'en-ca': {
 9
      language: 'EN',
 10
      country: 'CA',
 11
      label: 'Canada (CAD $)',
 12
      host: 'ca.hydrogen.shop',
 13
    },
 14
    'fr-ca': {
 15
      language: 'EN',
 16
      country: 'CA',
 17
      label: 'Canada (FranÃ§ais) (CAD $)',
 18
      host: 'ca.hydrogen.shop',
 19
      pathPrefix: '/fr',
 20
    },
 21
    'en-au': {
 22
      language: 'EN',
 23
      country: 'AU',
 24
      label: 'Australia (AUD $)',
 25
      host: 'hydrogen.au',
 26
    },
 27 };
 Step 2: Create getLocaleFromRequest utility
 Create the getLocaleFromRequest utility function. This function will read the request and determine the locale to be used throughout the app.
 You can use the /app/lib/utils.js file in the demo Hydrogen demo store as an example.
 /app/lib/utils
 JavaScript
 TypeScript
 /app/lib/utils.js
 1 import {countries} from '~/data/countries';
 2
 3 export function getLocaleFromRequest(request) {
 4
    const url = new URL(request.url);
 5
 6
    switch (url.host) {
 7
      case 'ca.hydrogen.shop':
 8
        if (/^\/fr($|\/)/.test(url.pathname)) {
 9
          return countries['fr-ca'];
 10
        } else {
 11
          return countries['en-ca'];
 12
        }
 13
        break;
 14
      case 'hydrogen.au':
 15
        return countries['en-au'];
 16
        break;
 17
      default:
 18
        return countries['default'];
 19
    }
 20 }
 Step 3: Add the selected locale in the root loader function
 This step gets the user's request and finds the associated locale. You should make the selected locale available throughout the app with the loader.
 /app/root
 JavaScript
 TypeScript
 /app/root.jsx
 1 export async function loader({context, request}) {
 2
    ...
 3
    return defer({
 4
      ...,
 5
      selectedLocale: await getLocaleFromRequest(request),
 6
    });
 7 }
 Step 4: Create a resource route for the available countries
 A Remix resource route is useful when the UI fetches the available countries to display.
 You can use the /routes/($locale).api.countries.js in the The Hydrogen demo store as an example.
 /routes/($locale).api.countries.js
 JavaScript
 TypeScript
 /routes/($locale).api.countries.js
 1 import {json} from '@remix-run/server-runtime';
 2 import {CacheLong, generateCacheControlHeader} from '@shopify/hydrogen';
 3 import {countries} from '~/data/countries';
 4
 5 export async function loader() {
 6
    return json(
 7
      {...countries},
 8
      {headers: {'cache-control': generateCacheControlHeader(CacheLong())}},
 9
    );
 10 }
 11
 12 // no-op
 13 export default function CountriesResourceRoute() {
 14
    return null;
 15 }
 Step 5: Render the available countries as a form
 Create a CountrySelector component using Remix Forms:
 You can use the app/components/CountrySelector.js file in the the Hydrogen demo store as an example.
 /app/components/CountrySelector
 JavaScript
 TypeScript
 /app/components/CountrySelector.jsx
 1 import {Form, useMatches, useLocation, useFetcher} from '@remix-run/react';
 2 import {useEffect, useState} from 'react';
 3
 4 export function CountrySelector() {
 5
    const [root] = useMatches();
 6
    const selectedLocale = root.data.selectedLocale;
 7
    const {pathname, search} = useLocation();
 8
 9
    const [countries, setCountries] = useState({});
 10
 11
    // Get available countries list
 12
    const fetcher = useFetcher();
 13
    useEffect(() => {
 14
      if (!fetcher.data) {
 15
        fetcher.load('/api/countries');
 16
        return;
 17
      }
 18
      setCountries(fetcher.data);
 19
    }, [countries, fetcher.data]);
 20
 21
    const strippedPathname = pathname.replace(selectedLocale.pathPrefix, '');
 22
 23
    return (
 24
      <details>
 25
        <summary>{selectedLocale.label}</summary>
 26
        <div className="overflow-auto border-t py-2 bg-contrast w-full max-h-36">
 27
          {countries &&
 28
            Object.keys(countries).map((countryKey) => {
 29
              const locale = countries[countryKey];
 30
              const hreflang = `${locale.language}-${locale.country}`;
 31
 32
              return (
 33
                <Form method="post" action="/locale" key={hreflang}>
 34
                  <input type="hidden" name="language" value={locale.language} />
 35
                  <input type="hidden" name="country" value={locale.country} />
 36
                  <input
 37
                    type="hidden"
 38
                    name="path"
 39
                    value={`${strippedPathname}${search}`}
 40
                  />
 41
                  <button type="submit">{locale.label}</button>
 42
                </Form>
 43
              );
 44
            })}
 45
        </div>
 46
      </details>
 47
    );
 48 }
 Step 6: Handle form submit
 Create the /app/routes/($locale).jsx route that will handle the form submit action
 /app/routes/($locale)
 JavaScript
 TypeScript
 /app/routes/($locale).jsx
 1 import {redirect} from '@shopify/remix-oxygen';
 2 import invariant from 'tiny-invariant';
 3 import {countries} from '~/data/countries';
 4
 5 export const action = async ({request, context}) => {
 6
    const {session} = context;
 7
    const formData = await request.formData();
 8
 9
    // Make sure the form request is valid
 10
    const languageCode = formData.get('language');
 11
    invariant(languageCode, 'Missing language');
 12
 13
    const countryCode = formData.get('country');
 14
    invariant(countryCode, 'Missing country');
 15
 16
    // determine where to redirect to relative to where user navigated from
 17
    // ie. hydrogen.shop/collections -> ca.hydrogen.shop/collections
 18
    const path = formData.get('path');
 19
    const toLocale = countries[`${languageCode}-${countryCode}`.toLowerCase()];
 20
 21
    const cartId = await session.get('cartId');
 22
 23
    // Update cart buyer's country code if there is a cart id
 24
    if (cartId) {
 25
      await updateCartBuyerIdentity(context, {
 26
        cartId,
 27
        buyerIdentity: {
 28
          countryCode,
 29
        },
 30
      });
 31
    }
 32
 33
    const redirectUrl = new URL(
 34
      `${toLocale.pathPrefix || ''}${path}`,
 35
      `https://${toLocale.host}`
 36
    );
 37
 38
    return redirect(redirectUrl, 302);
 39 };
 40
 41 async function updateCartBuyerIdentity({storefront}, {cartId, buyerIdentity}) {
 42
    const data = await storefront.mutate<{
 43
      cartBuyerIdentityUpdate: {cart};
 44
    }>(UPDATE_CART_BUYER_COUNTRY, {
 45
      variables: {
 46
        cartId,
 47
        buyerIdentity,
 48
    },
 49 });
 50
 51 const UPDATE_CART_BUYER_COUNTRY = `#graphql
 52
    mutation CartBuyerIdentityUpdate(
 53
      $cartId: ID!
 54
      $buyerIdentity: CartBuyerIdentityInput!
 55
      $country: CountryCode = ZZ
 56
    ) @inContext(country: $country) {
 57
      cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {
 58
        cart {
 59
          id
 60
        }
 61
      }
 62
    }
 63 `;
 Step 7: Make sure re-rendering happens at the root HTML
 Make sure to provide a key to the components that will change due to localization. Specially for URL path localization schemes.
 Sometimes, React won't know when to re-render a component. To avoid this problem, add localization as key in the App.
 /app/root
 JavaScript
 TypeScript
 /app/root.jsx
 1 export default function App() {
 2
    const data = useLoaderData();
 3
    const locale = data.selectedLocale;
 4
 5
    return (
 6
      <html lang={locale.language}>
 7
        <head>
 8
          <Seo />
 9
          <Meta />
 10
          <Links />
 11
        </head>
 12
        <body>
 13
          <Layout
 14
            layout={data.layout}
 15
            key={`${locale.language}-${locale.country}`} . // key by hreflang
 16
          >
 17
            <Outlet />
 18
          </Layout>
 19
          <Debugger />
 20
          <ScrollRestoration />
 21
          <Scripts />
 22
        </body>
 23
      </html>
 24
    );
 25 }
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Step 1: Provide a list of available countries
 Step 2: Create getLocaleFromRequest utility
 Step 3: Add the selected locale in the `root` loader function
 Step 4: Create a resource route for the available countries
 Step 5: Render the available countries as a form
 Step 6: Handle form submit
 Step 7: Make sure re-rendering happens at the root HTML
 Updates & News
 Developer changelog
 Partner blog
