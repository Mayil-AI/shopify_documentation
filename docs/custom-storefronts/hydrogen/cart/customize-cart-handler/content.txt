Bring your own stack
 Building with the Storefront API
 Building with the Customer Account API
 Additional SDKs
 Customize a cart handler
 The cart handler is an interface that allows you to easily make cart query and mutation requests to the Storefront API. It creates a new cart if one doesn't already exist, and provides default built-in cart queries.
 This guide shows you how to customize a cart handler. You can customize a cart handler to return different cart query fields, override existing cart query functions, and add new cart query functions.
 Requirements
 You've completed the quickstart guide.
 You've set up a cart handler.
 Customize the return cart fields
 The createCartHandler includes a default query fragment. Pass a custom cartQueryFragment if you need additional data from the Storefront API. See the default CartApiQuery fragment for reference. In this example, we added the note field.
 File
 JavaScript
 TypeScript
 server.js
 1 const cart = createCartHandler({
 2
    storefront,
 3
    getCartId: cartGetIdDefault(request.headers),
 4
    setCartId: cartSetIdDefault(),
 5
    cartQueryFragment: CART_QUERY_FRAGMENT, // Your custom cart query fragment
 6 });
 7
 8 /**
 9
   * cartQueryFragment requirements:
 10
   *
 11
   * - Must be named `CartApiQuery`
 12
   * - Only have access to the following query variables:
 13
   *   - $cartId: ID!
 14
   *   - $country: CountryCode
 15
   *   - $language: LanguageCode
 16
   *   - $numCartLines: Int
 17
   **/
 18 const CART_QUERY_FRAGMENT = `#graphql
 19
    fragment CartApiQuery on Cart {
 20
      note
 21
      id
 22
      checkoutUrl
 23
      totalQuantity
 24
      buyerIdentity {
 25
        countryCode
 26
        customer {
 27
          id
 28
          email
 29
          firstName
 30
          lastName
 31
          displayName
 32
        }
 33
        email
 34
        phone
 35
      }
 36
      lines(first: $numCartLines) {
 37
        edges {
 38
          node {
 39
            id
 40
            quantity
 41
            attributes {
 42
              key
 43
              value
 44
            }
 45
            cost {
 46
              totalAmount {
 47
                amount
 48
                currencyCode
 49
              }
 50
              amountPerQuantity {
 51
                amount
 52
                currencyCode
 53
              }
 54
              compareAtAmountPerQuantity {
 55
                amount
 56
                currencyCode
 57
              }
 58
            }
 59
            merchandise {
 60
              ... on ProductVariant {
 61
                id
 62
                availableForSale
 63
                compareAtPrice {
 64
                  ...CartApiMoney
 65
                }
 66
                price {
 67
                  ...CartApiMoney
 68
                }
 69
                requiresShipping
 70
                title
 71
                image {
 72
                  ...CartApiImage
 73
                }
 74
                product {
 75
                  handle
 76
                  title
 77
                  id
 78
                }
 79
                selectedOptions {
 80
                  name
 81
                  value
 82
                }
 83
              }
 84
            }
 85
          }
 86
        }
 87
      }
 88
      cost {
 89
        subtotalAmount {
 90
          ...CartApiMoney
 91
        }
 92
        totalAmount {
 93
          ...CartApiMoney
 94
        }
 95
        totalDutyAmount {
 96
          ...CartApiMoney
 97
        }
 98
        totalTaxAmount {
 99
          ...CartApiMoney
 100
        }
 101
      }
 102
      note
 103
      attributes {
 104
        key
 105
        value
 106
      }
 107
      discountCodes {
 108
        applicable
 109
        code
 110
      }
 111
    }
 112
 113
    fragment CartApiMoney on MoneyV2 {
 114
      currencyCode
 115
      amount
 116
    }
 117
 118
    fragment CartApiImage on Image {
 119
      id
 120
      url
 121
      altText
 122
      width
 123
      height
 124
    }
 125 `;
 Provide cartMutateFragment to customize what data is returned from mutation queries. See the default CartApiMutation fragment for reference. In this example, we added the checkoutUrl field.
 File
 JavaScript
 TypeScript
 server.js
 1 const cart = createCartHandler({
 2
    storefront,
 3
    getCartId: cartGetIdDefault(request.headers),
 4
    setCartId: cartSetIdDefault(),
 5
    cartMutateFragment: CART_MUTATE_FRAGMENT, // Your custom cart mutate fragment
 6 });
 7
 8 /**
 9
   * cartMutateFragment requirements:
 10
   *
 11
   * - Must be named `CartApiMutation`
 12
   * - Only have access to the following query variables:
 13
   *   - $cartId: ID!
 14
   *   - $country: CountryCode
 15
   *   - $language: LanguageCode
 16
   **/
 17 const CART_MUTATE_FRAGMENT = `#graphql
 18
    fragment CartApiMutation on Cart {
 19
      id
 20
      totalQuantity
 21
      checkoutUrl
 22
    }
 23 `;
 Add custom methods to cart handler
 If you have common cart operations that you would like to reuse across your app, you can add custom methods to your cart handler. For example, add and remove an item from the cart at the same time.
 File
 JavaScript
 TypeScript
 server.js
 1 const cartQueryOptions = {
 2
    storefront,
 3
    getCartId: cartGetIdDefault(request.headers),
 4 };
 5
 6 const cart = createCartHandler({
 7
    storefront,
 8
    getCartId: cartGetIdDefault(request.headers),
 9
    setCartId: cartSetIdDefault(),
 10
    customMethods: {
 11
      editInLine: async (addLines, removeLineIds, optionalParams) => {
 12
        // Using Hydrogen default cart query methods
 13
 14
        // Add line items
 15
        await cartLinesAddDefault(cartQueryOptions)(addLines, optionalParams);
 16
 17
        // Remove line items
 18
        return await cartLinesRemoveDefault(cartQueryOptions)(
 19
          removeLineIds,
 20
          optionalParams,
 21
        );
 22
      }
 23
    },
 24 });
 Override existing cart handler methods
 Hydrogen provides out of the box multiple methods for interacting with the cart. You can override any default method with your own logic. For example, you can override the updateAttributes to do something custom with cart attributes:
 The default cart handler includes basic cart logic. If you override these methods, you need to implement the cart logic as well. For example when adding a line item to a cart, you would need to implement the logic needed to create a cart with the line item.
 The following methods include create cart logic::
 addLines - If a cart doesn't exist, then create a cart with the line items.
 setMetafields - If a cart doesn't exist, then create a cart with the metafields applied.
 updateAttributes - If a cart doesn't exist, then create a cart with the attributes applied.
 updateBuyerIdentity - If a cart doesn't exist, then create a cart with the buyer identity applied.
 updateDiscountCode - If a cart doesn't exist, then create a cart with the discount applied.
 updateNote - If a cart doesn't exist, then create a cart with the note applied.
 File
 JavaScript
 TypeScript
 server.js
 1 const cart = createCartHandler({
 2
    storefront,
 3
    getCartId: cartGetIdDefault(request.headers),
 4
    setCartId: cartSetIdDefault(),
 5
    customMethods: {
 6
      updateAttributes: async (attributes, optionalParams) => {
 7
 8
        // Do something with attributes
 9
 10
        // Make a mutation query to update cart attributes
 11
        const {cartAttributesUpdate} = await options.storefront.mutate(CART_ATTRIBUTES_UPDATE_MUTATION, {
 12
          variables: {
 13
            cartId: optionalParams?.cartId || options.getCartId(),
 14
            attributes,
 15
          },
 16
        });
 17
        return cartAttributesUpdate;
 18
      },
 19
    },
 20 });
 21
 22 export const CART_ATTRIBUTES_UPDATE_MUTATION = `#graphql
 23
    mutation cartAttributesUpdate(
 24
      $cartId: ID!
 25
      $attributes: [CartAttributeInput!]!
 26
    ) {
 27
      cartAttributesUpdate(cartId: $cartId, attributes: $attributes) {
 28
        cart {
 29
          id
 30
        }
 31
      }
 32
    }
 33 `;
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Customize the return cart fields
 Add custom methods to cart handler
 Override existing cart handler methods
