Bring your own stack
 Building with the Storefront API
 Building with the Customer Account API
 Additional SDKs
 Update selected delivery options
 This guide shows you how to use a cart handler to update selected delivery options, such as standard or expedited delivery.
 Requirements
 You've completed the quickstart guide.
 You've set up a cart handler.
 Step 1: Read selected and available delivery groups
 Carts return an empty array for available delivery groups by default. To get a list of delivery groups, the cart must be associated with a customer access token by updating the buyer identity when a customer is logged in.
 Update the cart query fragment to return selected and available delivery options.
 File
 JavaScript
 TypeScript
 server.js
 1 const cart = createCartHandler({
 2
    storefront,
 3
    getCartId: cartGetIdDefault(request.headers),
 4
    setCartId: cartSetIdDefault(),
 5
    cartQueryFragment: CART_QUERY_FRAGMENT,
 6 });
 7
 8 const CART_QUERY_FRAGMENT = `#graphql
 9
    fragment CartApiQuery on Cart {
 10
      id
 11
      deliveryGroups(first: 1) {
 12
        nodes {
 13
          id
 14
          deliveryOptions {
 15
            handle
 16
            title
 17
            code
 18
            estimatedCost {
 19
              amount
 20
              currencyCode
 21
            }
 22
          }
 23
          selectedDeliveryOption {
 24
            handle
 25
          }
 26
        }
 27
      }
 28
    }
 29 `;
 Step 2: Create a select delivery option form
 Use Remix's useFetcher hook to create a cart note form. The hook submits a form request to the /cart route's action when users choose a delivery option. You can use this component anywhere in the app.
 When you use fetcher.submit, make sure there's a data key with the name CartForm.INPUT_NAME. The key value must be a JSON stringified object with action and inputs defined.
 File
 JavaScript
 TypeScript
 /app/components/SelectDeliveryGroup.jsx
 1 import {CartForm} from '@shopify/hydrogen';
 2
 3 function SelectDeliveryGroup({deliveryGroups}) {
 4
    const fetcher = useFetcher();
 5
    const group = deliveryGroups?.nodes[0];
 6
    const deliveryOptions = group.deliveryOptions;
 7
    const selectedHandle = group.selectedDeliveryOption?.handle;
 8
 9
    return (
 10
      <div>
 11
        {deliveryOptions.map((option) => {
 12
          return (
 13
            <div key={option.handle}>
 14
              <input
 15
                checked={selectedHandle === option.handle}
 16
                type="radio"
 17
                name="delivery"
 18
                value={option.handle}
 19
                id={option.handle}
 20
                onChange={(event) => {
 21
                  fetcher.submit(
 22
                    {
 23
                      [CartForm.INPUT_NAME]: JSON.stringify({
 24
                        action: CartForm.ACTIONS.SelectedDeliveryOptionsUpdate,
 25
                        inputs: {
 26
                          selectedDeliveryOptions: [{
 27
                            deliveryGroupId: group.id,
 28
                            deliveryOptionHandle: event.target.value,
 29
                          }],
 30
                        },
 31
                      }),
 32
                    },
 33
                    {method: 'POST', action: '/cart'}
 34
                  )
 35
                }}
 36
              />
 37
              <label htmlFor={option.handle}>{option.title}</label>
 38
            </div>
 39
          )
 40
        })}
 41
      </div>
 42
    );
 43 }
 Step 3: Handle the selected delivery option form request
 Handle the selected delivery option form request in an action. Use the cart, created from createCartHandler, to handle cart mutation requests to the Storefront API.
 File
 JavaScript
 TypeScript
 /app/routes/cart.jsx
 1 import {CartForm} from '@shopify/hydrogen';
 2 import invariant from 'tiny-invariant';
 3
 4 export async function action({request, context}) {
 5
    const {cart} = context;
 6
 7
    const formData = await request.formData();
 8
    const {action, inputs} = CartForm.getFormInput(formData);
 9
 10
    let result;
 11
 12
    switch(action) {
 13
      case CartForm.ACTIONS.SelectedDeliveryOptionsUpdate:
 14
        result = await cart.updateSelectedDeliveryOption(inputs.selectedDeliveryOptions);
 15
        break;
 16
      default:
 17
        invariant(false, `${action} cart action is not defined`);
 18
    }
 19
 20
    // The Cart ID might change after each mutation, so update it each time.
 21
    const headers = cart.setCartId(result.cart.id);
 22
 23
    return json(
 24
      result,
 25
      {status: 200, headers},
 26
    );
 27 }
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Step 1: Read selected and available delivery groups
 Step 2: Create a select delivery option form
 Step 3: Handle the selected delivery option form request
 Updates & News
