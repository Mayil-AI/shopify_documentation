Bring your own stack
 Building with the Storefront API
 Building with the Customer Account API
 Additional SDKs
 Update cart attributes
 This guide shows you how to use the cart handler to update cart attributes.
 Requirements
 You've completed the quickstart guide.
 You've set up the cart handler.
 Step 1: Create a form that will interact with a cart attribute
 Cart attributes are a list of key/value string pairs. The values can be anything you want to represent but they must be stored as strings. For example, you can add attributes that enable to add personalized messages to an order, such as requesting gift wrapping.
 Use the CartForm to create a cart attribute form. The component submits a form request to the /cart route's action when a visitor submits an attribute key/value pair. You can use this component anywhere in the app.
 File
 JavaScript
 TypeScript
 /app/components/AttributeUpdateForm.jsx
 1 import {CartForm} from '@shopify/hydrogen';
 2
 3 export default function AttributeUpdateForm({attributes}) {
 4
    return (
 5
      <CartForm
 6
        route="/cart"
 7
        action={CartForm.ACTIONS.AttributesUpdateInput}
 8
        inputs={
 9
          {attributes}
 10
        }
 11
      >
 12
        <button>Update attribute</button>
 13
      </CartForm>
 14
    );
 15 }
 Step 2: Handle the cart attribute form request
 Handle the cart attribute form request in an action. Use the cart that's created from createCartHandler to handle cart mutation requests to the Storefront API.
 File
 JavaScript
 TypeScript
 /app/routes/cart.jsx
 1 import {CartForm} from '@shopify/hydrogen';
 2 import invariant from 'tiny-invariant';
 3
 4 export async function action({request, context}) {
 5
    const {cart} = context;
 6
 7
    const formData = await request.formData();
 8
    const {action, inputs} = CartForm.getFormInput(formData);
 9
 10
    let result;
 11
 12
    switch(action) {
 13
      case CartForm.ACTIONS.AttributesUpdateInput:
 14
        result = await cart.updateAttributes(inputs.attributes);
 15
        break;
 16
      default:
 17
        invariant(false, `${action} cart action is not defined`);
 18
    }
 19
 20
    // The Cart ID might change after each mutation, so the following code updates it each time.
 21
    const headers = cart.setCartId(result.cart.id);
 22
 23
    return json(
 24
      result,
 25
      {status: 200, headers},
 26
    );
 27 }
 Note
 Cart attributes are visible to the user at checkout by default. To hide an attribute at checkout, prefix the attribute with an underscore.
 Next steps
 Learn how to apply discount codes.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Step 1: Create a form that will interact with a cart attribute
 Step 2: Handle the cart attribute form request
 Next steps
 Updates & News
 Developer changelog
