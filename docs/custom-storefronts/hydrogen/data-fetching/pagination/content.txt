Data fetching
 Shopify API data
 Third-party API data
 Pagination
 GraphiQL
 Caching
 Markets
 SEO
 Storefronts
 Environments
 Deployments
 Build your storefront
 Debugging and testing
 Migrate and upgrade
 Hydrogen API reference
 Pagination
 The Storefront API limits how many items can be queried at once. This encourages better app performance by only querying what's immediately necessary to render the page.
 However, sometimes you might have long lists of products, collections, or orders. Rather than rendering every item in the list, for better performance you should only render one page at a time. The Storefront API uses cursors to paginate through lists of data and the Pagination component enables you to render those pages.
 It's important to maintain the pagination state in the URL for the following reasons:
 Users can navigate to a product and return back to the same scrolled position in a list.
 The list state is shareable by URL.
 Search engine crawlers are also able to index the pages when the pagination state is stored in the URL,
 To set up pagination inside your app, do the following tasks:
 Setup the paginated query
 First, set up a GraphQL query to the Storefront API to return paginated content. A query needs to have the arguments first, last, startCursor, and endCursor.
 The query response needs to include pageInfo with hasPreviousPage, hasNextPage, startCursor, and endCursor passed to it.
 app/route/products.jsx
 1 const ALL_PRODUCTS_QUERY = `#graphql
 2
    query AllProducts(
 3
      $first: Int
 4
      $last: Int
 5
      $startCursor: String
 6
      $endCursor: String
 7
    ) {
 8
      products(first: $first, last: $last, before: $startCursor, after: $endCursor) {
 9
        nodes {
 10
          ...ProductCard
 11
        }
 12
        pageInfo {
 13
          hasPreviousPage
 14
          hasNextPage
 15
          startCursor
 16
          endCursor
 17
        }
 18
      }
 19
    }
 20
    ${PRODUCT_CARD_FRAGMENT}
 21 `;
 Hydrogen provides the utility getPaginationVariables to help calculate these variables from URL parameters. We recommend using the utility to pass the variables to the query within your loader:
 app/route/products.jsx
 1 import {getPaginationVariables} from '@shopify/hydrogen';
 2 import {json} from '@shopify/remix-oxygen';
 3
 4 export async function loader({context, request}) {
 5
    const variables = getPaginationVariables(request, {
 6
      pageBy: 4,
 7
    });
 8
 9
    const {products} = await context.storefront.query(ALL_PRODUCTS_QUERY, {
 10
      variables,
 11
    });
 12
 13
    return json({
 14
      products,
 15
    });
 16 }
 Render the Pagination component
 Pass the entire query connection to the Pagination component. The component provides a render prop with all the nodes in the list. Map the nodes by product ID and render them.
 app/route/products.jsx
 1 import { Pagination } from "@shopify/hydrogen";
 2 import { useLoaderData, Link } from "@remix-run/react";
 3
 4 export default function () {
 5
    const { products } = useLoaderData();
 6
 7
    return (
 8
      <Pagination connection={products}>
 9
        {({ nodes }) => {
 10
          return nodes.map((product) => (
 11
            <Link key={product.id} to={product.id}>
 12
              {product.title}
 13
            </Link>
 14
          ));
 15
        }}
 16
      </Pagination>
 17
    );
 18 }
 The Pagination component's render prop provides convenience links to either load more or previous product pages from nodes:
 app/route/products.jsx
 1 import { Pagination } from "@shopify/hydrogen";
 2 import { useLoaderData, Link } from "@remix-run/react";
 3
 4 export default function () {
 5
    const { products } = useLoaderData();
 6
 7
    return (
 8
      <Pagination connection={products}>
 9
        {({ nodes, NextLink, PreviousLink, isLoading  }) => (
 10
          <>
 11
            <PreviousLink>
 12
              {isLoading ? "Loading..." : "Load previous products"}
 13
            </PreviousLink>
 14
            {nodes.map((product) => (
 15
              <Link key={product.id} to={product.id}>
 16
                {product.title}
 17
              </Link>
 18
            ))}
 19
            <NextLink>{isLoading ? "Loading..." : "Load next products"}</NextLink>
 20
          </>
 21
        )}
 22
      </Pagination>
 23
    );
 24 }
 Complete pagination example
 The following is a complete example of data fetching using pagination:
 app/route/products.jsx
 1 import {getPaginationVariables, Pagination} from '@shopify/hydrogen';
 2 import {useLoaderData, Link} from '@remix-run/react';
 3 import {json} from '@shopify/remix-oxygen';
 4
 5 export async function loader({context, request}) {
 6
    const variables = getPaginationVariables(request, {
 7
      pageBy: 4,
 8
    });
 9
 10
    const {products} = await context.storefront.query(ALL_PRODUCTS_QUERY, {
 11
      variables,
 12
    });
 13
 14
    return json({
 15
      products,
 16
    });
 17 }
 18
 19 export default function () {
 20
    const {products} = useLoaderData();
 21
 22
    return (
 23
      <Pagination connection={products}>
 24
        {({nodes, NextLink, PreviousLink, isLoading}) => (
 25
          <>
 26
            <PreviousLink>
 27
              {isLoading ? 'Loading...' : 'Load previous products'}
 28
            </PreviousLink>
 29
            {nodes.map((product) => (
 30
              <Link key={product.id} to={product.id}>
 31
                {product.title}
 32
              </Link>
 33
            ))}
 34
            <NextLink>{isLoading ? 'Loading...' : 'Load next products'}</NextLink>
 35
          </>
 36
        )}
 37
      </Pagination>
 38
    );
 39 }
 40
 41 const PRODUCT_CARD_FRAGMENT = `#graphql
 42
    fragment ProductCard on Product {
 43
      id
 44
      title
 45
      publishedAt
 46
      handle
 47
      vendor
 48
      variants(first: 1) {
 49
        nodes {
 50
          id
 51
          image {
 52
            url
 53
            altText
 54
            width
 55
            height
 56
          }
 57
          price {
 58
            amount
 59
            currencyCode
 60
          }
 61
          compareAtPrice {
 62
            amount
 63
            currencyCode
 64
          }
 65
          selectedOptions {
 66
            name
 67
            value
 68
          }
 69
          product {
 70
            handle
 71
            title
 72
          }
 73
        }
 74
      }
 75
    }
 76 `;
 77
 78 const ALL_PRODUCTS_QUERY = `#graphql
 79
    query AllProducts(
 80
      $first: Int
 81
      $last: Int
 82
      $startCursor: String
 83
      $endCursor: String
 84
    ) {
 85
      products(first: $first, last: $last, before: $startCursor, after: $endCursor) {
 86
        nodes {
 87
          ...ProductCard
 88
        }
 89
        pageInfo {
 90
          hasPreviousPage
 91
          hasNextPage
 92
          startCursor
 93
          endCursor
 94
        }
 95
      }
 96
    }
 97
    ${PRODUCT_CARD_FRAGMENT}
 98 `;
 Automatically load pages on scroll
 We can change the implementation to support loading subsequent pages on scroll. Add the dependency react-intersection-observer and use the following example:
 app/route/products.jsx
 1 import { Pagination } from "@shopify/hydrogen";
 2 import { useEffect } from "react";
 3 import { useLoaderData, useNavigate } from "@remix-run/react";
 4 import { useInView } from "react-intersection-observer";
 5
 6 export default function () {
 7
    const { products } = useLoaderData();
 8
    const { ref, inView, entry } = useInView();
 9
 10
    return (
 11
      <Pagination connection={products}>
 12
        {({ nodes, NextLink, hasNextPage, nextPageUrl, state }) => (
 13
          <>
 14
            <ProductsLoadedOnScroll
 15
              nodes={nodes}
 16
              inView={inView}
 17
              hasNextPage={hasNextPage}
 18
              nextPageUrl={nextPageUrl}
 19
              state={state}
 20
            />
 21
            <NextLink ref={ref}>Load more</NextLink>
 22
          </>
 23
        )}
 24
      </Pagination>
 25
    );
 26 }
 27
 28 function ProductsLoadedOnScroll({ nodes, inView, hasNextPage, nextPageUrl, state }) {
 29
    const navigate = useNavigate();
 30
 31
    useEffect(() => {
 32
      if (inView && hasNextPage) {
 33
        navigate(nextPageUrl, {
 34
          replace: true,
 35
          preventScrollReset: true,
 36
          state,
 37
        });
 38
      }
 39
    }, [inView, navigate, state, nextPageUrl, hasNextPage]);
 40
 41
    return nodes.map((product) => (
 42
      <Link key={product.id} to={product.id}>
 43
        {product.title}
 44
      </Link>
 45
    ));
 46 }
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Setup the paginated query
 Render the `Pagination` component
 Complete pagination example
 Automatically load pages on scroll
 Updates & News
 Developer changelog
 Partner blog
 Engineering blog
