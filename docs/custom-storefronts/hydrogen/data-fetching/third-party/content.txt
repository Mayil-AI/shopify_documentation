Data fetching
 Shopify API data
 Third-party API data
 Pagination
 GraphiQL
 Caching
 Markets
 SEO
 Storefronts
 Environments
 Deployments
 Build your storefront
 Debugging and testing
 Migrate and upgrade
 Hydrogen API reference
 Fetch third-party API data with Hydrogen
 Hydrogen includes a built-in client and utilities for fetching data with Shopify's Storefront API and Customer Account API.
 If you need to access data from third-party sources, then you can re-use these utilities and design patterns. By consistently using the same methods for data fetching regardless of the source, your app logic is simpler to understand, and your app will be more performant.
 What you'll build
 In this guide, you'll use Hydrogen's built-in utilities to query the GraphQL Rick and Morty API and display a list of characters.
 This simplified example shows how to re-use Hydrogen tools to create a new API client, add it to the Remix context, and query your data from any route.
 Step 1: Create a new third-party API client
 The following example re-uses existing Hydrogen utilities to create an API client that handles caching with the same tooling and method that Hydrogen uses for Shopify API queries. This keeps data fetching and caching behaviors consistent across your app.
 Create a third-party API client
 JavaScript
 TypeScript
 /app/lib/createRickAndMortyClient.server.js
 1 import {createWithCache, CacheLong} from '@shopify/hydrogen';
 2
 3 export function createRickAndMortyClient({
 4
    cache,
 5
    waitUntil,
 6 }) {
 7
    const withCache = createWithCache({cache, waitUntil});
 8
 9
    async function query(
 10
      query,
 11
      options = {variables: {}, cache: CacheLong()},
 12
    ) {
 13
      return withCache(
 14
        ['r&m', query, JSON.stringify(options.variables)],
 15
        options.cache,
 16
        async function () {
 17
          // call to the API
 18
          const response = await fetch('https://rickandmortyapi.com/graphql', {
 19
            method: 'POST',
 20
            headers: {
 21
              'Content-type': 'application/json',
 22
            },
 23
            body: JSON.stringify({
 24
              query: query,
 25
              variables: options.variables,
 26
            }),
 27
          });
 28
 29
          if (!response.ok) {
 30
            throw new Error(
 31
              `Error fetching from rick and morty api: ${response.statusText}`,
 32
            );
 33
          }
 34
 35
          const json = await response.json();
 36
 37
          return json.data;
 38
        },
 39
      );
 40
    }
 41
 42
    return {query};
 43 }
 Step 2: Create the API client and pass to the Remix context
 You can now add your API client to the Remix server file so it's available to load data from your routes.
 If you're using TypeScript, then you should also add the client to your Remix type declaration file.
 Pass API client to Remix context
 JavaScript
 TypeScript
 Type declaration
 /server.js
 1 // ...Existing server.ts imports here...
 2 import {createRickAndMortyClient} from './app/lib/createRickAndMortyClient.server';
 3
 4 export default {
 5
    async fetch(request, env, executionContext) {
 6
      try {
 7
        // ... Existing Storefront API client code here...
 8
 9
        // Create the Rick and Morty API Client
 10
        const rickAndMorty = createRickAndMortyClient({
 11
          cache,
 12
          waitUntil,
 13
        });
 14
 15
        const handleRequest = createRequestHandler({
 16
          build: remixBuild,
 17
          mode: process.env.NODE_ENV,
 18
          getLoadContext: () => ({
 19
            //...Existing loader contexts here...
 20
            rickAndMorty,
 21
          }),
 22
        });
 23
 24
        const response = await handleRequest(request);
 25
 26
        return response;
 27
      } catch (error) {
 28
        // ... Existing error-handling here ...
 29
      }
 30
    },
 31 };
 Step 3: Query and render the list of entries
 You can now query your rickAndMorty API client from any loader function, on any route, using the same caching utilities that Hydrogen uses to query Shopify's Storefront API.
 The following simplified example shows how to render an unordered list of character names on the /characters route:
 Render character index route
 JSX
 TSX
 /app/routes/characters._index.jsx
 1 import {json} from '@shopify/remix-oxygen';
 2 import {useLoaderData} from '@remix-run/react';
 3 import {CacheShort} from '@shopify/hydrogen';
 4
 5 // Fetch and return API data with a Remix loader function
 6 export async function loader({context}) {
 7
    const {characters} = await context.rickAndMorty.query(CHARACTERS_QUERY, {
 8
      cache: CacheShort(),
 9
    });
 10
    return json({characters});
 11 }
 12
 13 // Render the component using data returned by the loader
 14 export default function Characters() {
 15
    const {characters} = useLoaderData();
 16
    return (
 17
      <div>
 18
        <h1>Rick & Morty Characters</h1>
 19
        <ul>
 20
          {(characters.results || []).map((character) => (
 21
            <li key={character.name}>{character.name}</li>
 22
          ))}
 23
        </ul>
 24
      </div>
 25
    );
 26 }
 27
 28 // Query the API for a list of characters
 29 const CHARACTERS_QUERY = `#graphql:rickAndMorty
 30
    query {
 31
      characters(page: 1) {
 32
        results {
 33
          name
 34
          id
    }
 38 `;
 Run npm run dev to start the development server, then open http://localhost:3000/characters to verify that the query succeeded.
 Next steps
 If you haven't already, learn about querying first-party Shopify APIs with Hydrogen
 Learn more about caching third-party API data with Hydrogen
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll build
 Step 1: Create a new third-party API client
 Step 2: Create the API client and pass to the Remix context
 Step 3: Query and render the list of entries
 Next steps
 Updates & News
