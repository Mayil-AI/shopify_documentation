App Store
 Amazon EventBridge webhook delivery
 Integrate your app with Amazon EventBridge to manage large volumes of event notifications and receive Shopify webhooks using an event bus.
 EventBridge lets you process events at the rate that works for your tech stack without getting overwhelmed. Itâ€™s highly scalable and resilient, and lets you accept more webhook traffic while reducing your infrastructure cost and complexity.
 How EventBridge integration works
 EventBridge is a serverless, event-driven alternative to receiving webhooks through standard HTTP. Integrating with EventBridge lets you send event data to AWS directly, instead of handling that traffic yourself.
 The following diagram shows the workflow to integrate your app with EventBridge:
 In your Partner Dashboard, set up an event source. This tells Shopify to send events to AWS.
 In the AWS console, associate your event source with an event bus.
 Create rules for the event bus so that AWS knows what to do with the events received. You can route events to SQS, Lambda, or another, similar service.
 Subscribe to webhooks using the GraphQL Admin API or REST Admin API. Use your partner event source Amazon Resource Number (ARN) supplied in your requests. You obtain the ARN from the AWS console.
 Requirements
 You're familiar with how webhooks work.
 You're familiar with the webhooks best practices.
 You're authenticated with the GraphQL Admin API or REST Admin API.
 You've created an app.
 You've set up your AWS Lambda function, SQS queue, or other EventBridge destination.
 You have your 12-digit Amazon Web Services (AWS) Account ID from the AWS console.
 Step 1: Set up an event source
 To begin integrating your app with EventBridge, set up an event source to tell Shopify to send events to AWS.
 Navigate to your app's settings page in the Partner Dashboard or Shopify admin:
 Partner Dashboard
 Shopify admin
 In your Partner Dashboard, go to Apps.
 Click the name of your app.
 Click Configuration.
 Under Amazon EventBridge, click Create source.
 Paste your AWS account ID, and choose your AWS region.
 You need the AWS region when you associate an event bus with the source.
 Provide a unique event source name.
 Each event source requires a unique name. If you have multiple apps, then consider a name that matches your app.
 Click Create.
 Step 2: Associate an event bus
 After you set up an event source to deliver Shopify events to AWS, associate the source with a bus to handle events.
 In the AWS console, under EventBridge, navigate to the Partner event sources page.
 In the Region drop-down list, select the AWS region that you chose when you set up your event source.
 These regions must match for the event bus to connect with the event source.
 Click the event source that you created, and note the ARN found under Partner event source ARN.
 You need this address to subscribe to a webhook.
 Click Associate with event bus.
 On the next page, click Associate.
 Step 3: Create a rule
 EventBridge groups and sorts the events that your event source sends based on the rules that you define. After you set up your event source and associate it with an event bus, create a rule that tells AWS what to do with events it receives on the bus.
 To define multiple rules, repeat this step for each rule.
 Note
 As your app audience grows, your traffic can increase significantly. Consider using AWS CloudWatch to monitor your EventBridge integration for usage patterns and errors. For example, you can trigger an alert if an EventBridge rule is broken.
 In the AWS console navigation menu, click Rules.
 In the drop-down list, select your event bus.
 Click Create rule.
 Provide a rule name.
 Provide a description for the rule.
 In the Define pattern section, choose Event pattern, and select Pre-defined pattern by service.
 You can also define a custom event pattern for your rule.
 In the list of providers, choose All Events.
 In the Service name drop-down list, select Shopify.
 This makes sure that only events that Shopify sends are processed by this rule.
 In the Select event bus section, select the event bus that will use this rule.
 In the Select targets section, choose a Lambda function or SQS queue.
 Events processed by this rule will be sent to the function or queue that you select.
 Click Create.
 Define a custom event pattern
 When you create a rule, you can process events separately depending on factors like which shop generated the event or which resource triggered the event.
 Event patterns in EventBridge rules have the same structure as the payloads that they match. Matching values are added to an array and compared using OR. You can also match by prefix using the prefix key.
 In the Define pattern section, select Event pattern.
 Select Custom pattern.
 Provide a custom pattern that matches the structure of an EventBridge payload.
 Click Save.
 Custom event example patterns
 Use the following pattern to match on a specific shop domain:
 1 {
 2
    "detail-type": [
 3
      "shopifyWebhook"
 4
    ],
 5
    "detail": {
 6
      "metadata": {
 7
        "X-Shopify-Shop-Domain": [
 8
          "{shop}.myshopify.com"
 9
        ]
 10
      }
 11
    }
 12 }
 Use the following pattern to match all products events:
 1 {
 2
    "detail-type": [
 3
      "shopifyWebhook"
 4
    ],
 5
    "detail": {
 6
      "metadata": {
 7
        "X-Shopify-Topic": [
 8
          {
 9
            "prefix": "products"
 10
 13
    }
 14 }
 Step 4: Subscribe to a webhook
 Subscribe to webhooks when your app is installed on a shop and your app successfully acquires an access token.
 Note
 Webhook data is divided by topic. Refer to the GraphQL Admin API or REST Admin API reference for the complete list of supported webhook topics.
 Some topics also support sub-topics.
 The following examples show you how to subscribe to a webhook using GraphQL and REST.
 GraphQL
 REST
 Use the eventBridgeWebhookSubscriptionCreate mutation to subscribe to a webhook with GraphQL.
 Set arn to the ARN that you retrieved.
 Note
 The structure of the ARN will be similar to the following example:
 arn:aws:events:<aws_region>::event-source/aws.partner/shopify.com/<app_id>/<event_source_name>
 Request: POST /admin/api/2024-04/graphql.json
 1 mutation {
 2
    eventBridgeWebhookSubscriptionCreate(
 3
      topic: PRODUCTS_CREATE
 4
      webhookSubscription: {
 5
        arn: {ARN}
 6
        format: JSON
 7
      }
 8
    ) {
 9
      webhookSubscription {
 10
        id
 11
      }
 12
      userErrors {
 13
        message
 14
      }
 15
    }
 16 }
 Example (GraphQL): Retrieve HTTP and EventBridge subscriptions
 Note
 You can't fetch by endpoint type with REST.
 Use the WebhookSubscription object to retrieve a list of HTTP and EventBridge subscriptions.
 The following example shows how to retrieve the first ten subscriptions:
 Request: POST /admin/api/2024-04/graphql.json
 1 {
 2
    webhookSubscriptions(first: 10) {
 3
      edges {
 4
        node {
 5
          id
 6
          endpoint {
 7
            __typename
 8
 9
            ... on WebhookHttpEndpoint {
 10
              callbackUrl
 11
            }
 12
            ... on WebhookEventBridgeEndpoint {
 13
              arn
 14
            }
 15
 18
    }
 19 }
 EventBridge payload structure
 You can use the information in EventBridge payloads to define a custom event pattern in EventBridge.
 The following is an example payload from EventBridge:
 Example EventBridge payload
 1 {
 2
    "version": "0",
 3
    "id": "1b8e2e75-b771-e964-f0e6-fbca6a21dad8",
 4
    "detail-type": ["shopifyWebhook"],
 5
    "source": "aws.partner/shopify.com/shop-event-bus",
 6
    "account": "123456789",
 7
    "resources": [""],
 8
    "time": "2024-04-02T12:47:58Z",
 9
    "region": "ca-central-1",
 10
    "detail": {
 11
      "payload": {
 12
        "product" : {
 13
          "id": 1,
 14
          "title": "Columbia Las Hermosas",
 15
          "body_html": "",
 16
          "vendor": "Reunion Island",
 17
          "product_type": "Coffee",
 18
          "created_at": "2024-04-07T14:55:00-05:00",
 19
          "handle": "columbia-las-hermosas",
 20
          ...
 21
        }
 22
      },
 23
      "metadata": {
 24
        "X-Shopify-Topic": "products/update",
 25
        "X-Shopify-API-Version": "2024-04",
 26
        "X-Shopify-Hmac-SHA256": "rncNozYG6CCjmFJjEgUWowYJ60X+oUtsqul1sTwJMpU=",
 27
        "X-Shopify-Shop-Domain": "{shop}.myshopify.com",
 28
        "X-Shopify-Order-Id": 1
 29
      }
 30
    }
 31 }
 Large payloads
 Occasionally, a shop might have very large resources. If a Shopify resource would result in a payload larger than 255 KB, then a special payload is sent with the following error message. You can use the resource ID in the X-Shopify-Product-Id field to request the resource using the REST Admin or GraphQL Admin API.
 Example large payload with error
 1 {
 2
    "version": "0",
 3
    "id": "1b8e2e75-b771-e964-f0e6-fbca6a21dad8",
 4
    "detail-type": [
 5
      "shopifyWebhook"
 6
    ],
 7
    "resources": [
 8
      ""
 9
    ],
 10
    "source": "aws.partner/shopify.com/shop-event-bus",
 11
    "account": "123456789",
 12
    "time": "2024-04-07T12:47:58Z",
 13
    "region": "ca-central-1",
 14
    "detail": {
 15
      "payload": {},
 16
      "errors": [
 17
        {
 18
          "code": "payload_too_large",
 19
          "message": "The payload is larger than the supported limit. Use the API to retrieve your data."
 20
        }
 21
      ],
 22
      "metadata": {
 23
        "X-Shopify-Topic": "products/update",
 24
        "X-Shopify-API-Version": "2024-04",
 25
        "X-Shopify-Hmac-SHA256": "rncNozYG6CCjmFJjEgUWowYJ60X+oUtsqul1sTwJMpU=",
 26
        "X-Shopify-Shop-Domain": "{shop}.myshopify.com",
 27
        "X-Shopify-Product-Id": 1
 28
      }
 29
    }
 30 }
 Next steps
 Test your configuration by manually triggering a webhook delivery using the Shopify CLI webhook trigger command. Manually triggering webhooks doesn't test your webhook subscriptions.
 Learn how to manage webhooks for different API versions.
 Learn about the available topics for REST Admin API webhooks.
 Learn about the available topics for GraphQL Admin API webhooks.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 How EventBridge integration works
 Requirements
 Step 1: Set up an event source
 Step 2: Associate an event bus
 Step 3: Create a rule
 Step 4: Subscribe to a webhook
 EventBridge payload structure
 Next steps
 Updates & News
