Delivery and shipping
 Overview
 Enhance delivery methods
 Overview
 Build a date picker
 UX guidelines
 Reorder delivery options
 Pickup points
 Create local pickup charges
 Product offers
 Distribution
 Billing
 App Store
 Build a date picker for a specific shipping rate
 Collecting extra information in relation to specific shipping rates, like a preferred delivery date, is a common situation. In this tutorial, you'll use checkout UI extensions to collect a delivery date for a specific shipping rate.
 Shopify Plus
 Checkout UI extensions are available only to stores on a Shopify Plus plan.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Generate a checkout UI extension that appears in the checkout flow using Shopify CLI.
 Set up configurations for your checkout UI extension in the extension TOML file.
 Query the Storefront API from the extension code to get shipping rate data.
 Use the checkout UI component library to add new user interface to the checkout.
 Use the checkout UI extension API to read and write order information.
 Save the date to a metafield and display the value in the Shopify admin.
 Requirements
 You've created a Partner account.
 You've created a new development store with the following:
 Generated test data
 Checkout and Customer Accounts Extensibility developer preview enabled
 You've created an app that uses Shopify CLI 3.0 or higher.
 You've reviewed the UX guidelines for enhancing delivery methods.
 Sample code
 If you want to quickly get started, then you can copy and paste the following sample code into your src/Checkout.jsx and shopify.extension.toml files. This tutorial describes the sample code step by step.
 Sample code
 src/Checkout.jsx
 shopify.extension.toml
 1 import { useState, useCallback, useMemo } from "react";
 2 import {
 3
    Heading,
 4
    DatePicker,
 5
    useApplyMetafieldsChange,
 6
    useDeliveryGroups,
 7
    useApi,
 8
    reactExtension,
 9 } from "@shopify/ui-extensions-react/checkout";
 10
 11 reactExtension("purchase.checkout.shipping-option-list.render-after", () => (
 12
    <Extension />
 13 ));
 14
 15 export default function Extension() {
 16
    const [selectedDate, setSelectedDate] = useState("");
 17
    const [yesterday, setYesterday] = useState("");
 18
 19
    const { extension } = useApi();
 20
    const { target } = extension;
 21
 22
    let deliveryGroups = useDeliveryGroups();
 23
 24
    // Set a function to handle updating a metafield
 25
    const applyMetafieldsChange = useApplyMetafieldsChange();
 26
 27
    // Define the metafield namespace and key
 28
    const metafieldNamespace = "yourAppNamespace";
 29
    const metafieldKey = "deliverySchedule";
 30
 31
    // Sets the selected date to today, unless today is Sunday, then it sets it to tomorrow
 32
    useMemo(() => {
 33
      let today = new Date();
 34
 35
      const yesterday = new Date(today);
 36
      yesterday.setDate(today.getDate() - 1);
 37
 38
      const tomorrow = new Date(today);
 39
      tomorrow.setDate(today.getDate() + 1);
 40
 41
      const deliveryDate = today.getDay() === 0 ? tomorrow : today;
 42
 43
      setSelectedDate(formatDate(deliveryDate));
 44
      setYesterday(formatDate(yesterday));
 45
    }, []);
 46
 47
    // Set a function to handle the Date Picker component's onChange event
 48
    const handleChangeDate = useCallback((selectedDate) => {
 49
      setSelectedDate(selectedDate);
 50
      // Apply the change to the metafield
 51
      applyMetafieldsChange({
 52
        type: "updateMetafield",
 53
        namespace: metafieldNamespace,
 54
        key: metafieldKey,
 55
        valueType: "string",
 56
        value: selectedDate,
 57
      });
 58
    }, []);
 59
 60
    // Boolean to check if Express is selected
 61
    const isExpressSelected = () => {
 62
      if (
 63
        target !== "purchase.checkout.shipping-option-list.render-after" ||
 64
        !deliveryGroups
 65
      ) {
 66
        return false;
 67
      }
 68
 69
      const expressHandle = deliveryGroups[0].deliveryOptions.find(
 70
        (method) => method.title === "Express"
 71
      )?.handle;
 72
 73
      return expressHandle === deliveryGroups[0].selectedDeliveryOption?.handle
 74
        ? true
 75
        : false;
 76
    };
 77
 78
    // Render the extension components if Express is selected
 79
    return isExpressSelected() ? (
 80
      <>
 81
        <Heading>Select a date for delivery</Heading>
 82
        <DatePicker
 83
          selected={selectedDate}
 84
          onChange={handleChangeDate}
 85
          disabled={["Sunday", { end: yesterday }]}
 86
        />
 87
      </>
 88
    ) : null;
 89 }
 90
 91 const formatDate = (date) => {
 92
    const year = date.getFullYear();
 93
    const month = String(date.getMonth() + 1).padStart(2, "0");
 94
    const day = String(date.getDate()).padStart(2, "0");
 95
    return `${year}-${month}-${day}`;
 96 };
 Step 1: Create a checkout UI extension
 To create a checkout UI extension, you'll use Shopify CLI, which generates starter code for building your extension.
 Navigate to your app directory.
 Run one of the following commands to create a new extension:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app generate extension
 Select checkout UI as the extension type, and then provide a name for your extension.
 Select a language for your extension. The example code in this tutorial uses JavaScript React.
 You now have a new directory for your app under <app-name> > extensions. The extension directory includes the extension script at src > Checkout.jsx.
 Step 2: Import components
 In src/Checkout.jsx, import the components from the checkout UI extensions API that you need to build the extension:
 src/Checkout.jsx
 1 import { useState, useCallback, useMemo } from "react";
 2 import {
 3
    Heading,
 4
    DatePicker,
 5 } from "@shopify/ui-extensions-react/checkout";
 6
 7 export default function Extension() {
 8
    const [selectedDate, setSelectedDate] = useState("");
 9
    const [yesterday, setYesterday] = useState("");
 10
 11
    // Sets the selected date to today, unless today is Sunday, then it sets it to tomorrow
 12
    useMemo(() => {
 13
      let today = new Date();
 14
 15
      const yesterday = new Date(today);
 16
      yesterday.setDate(today.getDate() - 1);
 17
 18
      const tomorrow = new Date(today);
 19
      tomorrow.setDate(today.getDate() + 1);
 20
 21
      const deliveryDate = today.getDay() === 0 ? tomorrow : today;
 22
 23
      setSelectedDate(formatDate(deliveryDate));
 24
      setYesterday(formatDate(yesterday));
 25
    }, []);
 26
 27
    // Set a function to handle the Date Picker component's onChange event
 28
    const handleChangeDate = useCallback((selectedDate) => {
 29
      setSelectedDate(selectedDate);
 30
    }, []);
 31
 32
    return (
 33
      <>
 34
        <Heading>Select a date for delivery</Heading>
 35
        <DatePicker
 36
          selected={selectedDate}
 37
          onChange={handleChangeDate}
 38
          disabled={["Sunday", { end: yesterday }]}
 39
        />
 40
      </>
 41
    )
 42 }
 43
 44 const formatDate = (date) => {
 45
    const year = date.getFullYear();
 46
    const month = String(date.getMonth() + 1).padStart(2, "0");
 47
    const day = String(date.getDate()).padStart(2, "0");
 48
    return `${year}-${month}-${day}`;
 49 };
 Step 3: Set up the extension target
 Targets control where your extension renders in the checkout flow. The purchase.checkout.shipping-option-list.render-after extension target renders the extension after the shipping methods section on the shipping step of the checkout.
 When you generate an app extension, a TOML configuration file named shopify.extension.toml is automatically generated in your app's extension directory. The TOML file is located in the extensions/ directory of your app project. It contains basic information and settings.
 For information about the properties that you can configure in the TOML file, refer to Configuring app extensions.
 Tip
 You can define more than one static extension target so that merchants can add the extension to multiple locations in the checkout. You can do this by using multiple reactExtension() functions with different static extension targets.
 Use the extension target in your index file
 In src/Checkout.jsx, add a reactExtension() function to render your extension using the purchase.checkout.shipping-option-list.render-after extension target.
 src/Checkout.jsx
 1 import { reactExtension } from '@shopify/ui-extensions-react/checkout';
 2
 3 reactExtension('purchase.checkout.shipping-option-list.render-after', () => <Extension />);
 Reference the target in your configuration file
 In your checkout UI extension configuration file, create an [[extensions.targeting]] section with the following information:
 target - An identifier that specifies where you're injecting code into Shopify. This needs to match the target that you exported from your Checkout.jsx file.
 module - The path to the file that contains the extension code.
 export - The name of the exported function that contains the extension code.
 Note
 Whenever you edit your extension configuration file, you need to restart your server for the changes to take effect.
 shopify.extension.toml
 1 api_version = "2023-07"
 2
 3 [capabilities]
 4 api_access = true
 5 network_access = true
 6 block_progress = true
 7
 8 [[extensions]]
 9 type = "ui_extension"
 10 name = "checkout-ui"
 11 handle = "checkout-ui"
 12
 13 # [START order-status.config-extension]
 14 [[extensions.targeting]]
 15 target = "purchase.checkout.shipping-option-list.render-after"
 16 module = "./src/Checkout.jsx"
 17 export = "purchaseCheckoutShippingOptionListRenderAfter"
 18
 19 # [END order-status.config-extension]
 20
 21
 22 # [[extensions.metafields]]
 23 # namespace = "my-namespace"
 24 # key = "my-key"
 25
 26 # Read more on extension settings at https://shopify.dev/api/checkout-extensions/checkout/configuration
 27 # [settings]
 28 #   [[settings.fields]]
 29 #   key = "banner_title"
 30 #   type = "single_line_text_field"
 31 #   name = "Banner title"
 32 #   description = "Enter a title for the banner"
 Step 4: Set up a metafield
 Now that you've set up the extension target, you'll save custom field values in a metafield. Regular metafields are available to any app or extension.
 Define the metafield namespace and key
 In this step, you'll set a namespace and key for the metafield where you want to store the custom field value. Later, you'll expose values stored in this metafield to merchants in the Shopify admin.
 A metafield is a custom field that you can use to store additional information about a Shopify resource. You can use metafields to store information specific to your app without setting up your own storage.
 src/Checkout.jsx
 1 // Define the metafield namespace and key
 2 const metafieldNamespace = 'yourAppNamespace';
 3 const metafieldKey = 'deliverySchedule';
 Store the user input in the metafield
 You can use the useApplyMetafieldsChange hook to store the value that the customer enters in the metafields property of the checkout. This metafield value is later associated with the order.
 useApplyMetafieldsChange is a React hook that lets you write metafield values. To learn more about the hooks available for checkout UI extensions, refer to the checkout UI extension reference.
 src/Checkout.jsx
 1 // Set a function to handle updating a metafield
 2 const applyMetafieldsChange = useApplyMetafieldsChange();
 3
 4 // Set a function to handle the Date Picker component's onChange event
 5 const handleChangeDate = useCallback((selectedDate) => {
 6
    setSelectedDate(selectedDate);
 7
    // Apply the change to the metafield
 8
    applyMetafieldsChange({
 9
      type: 'updateMetafield',
 10
      namespace: metafieldNamespace,
 11
      key: metafieldKey,
 12
      valueType: 'string',
 13
      value: selectedDate,
 14
    });
 15 }, []);
 Step 5: Render the date picker and set the constraints
 In this step, you'll render a calendar where customers can select a delivery date, which is then saved to a metafield. The DatePicker component will display the available dates.
 src/Checkout.jsx
 1 import {useState, useMemo} from 'react';
 2 import {
 3
    Heading,
 4
    DatePicker,
 5
    reactExtension,
 6 } from '@shopify/ui-extensions-react/checkout';
 7
 8 reactExtension('purchase.checkout.shipping-option-list.render-after', () => <Extension />);
 9
 10 export default function Extension() {
 11
    const [selectedDate, setSelectedDate] = useState("");
 12
    const [yesterday, setYesterday] = useState("");
 13
 14
    // Sets the selected date to today, unless today is Sunday, then it sets it to tomorrow
 15
    useMemo(() => {
 16
      let today = new Date();
 17
 18
      const yesterday = new Date(today);
 19
      yesterday.setDate(today.getDate() - 1);
 20
 21
      const tomorrow = new Date(today);
 22
      tomorrow.setDate(today.getDate() + 1);
 23
 24
      const deliveryDate = today.getDay() === 0 ? tomorrow : today;
 25
 26
      setSelectedDate(formatDate(deliveryDate));
 27
      setYesterday(formatDate(yesterday));
 28
    }, []);
 29
 30
    return (
 31
      <>
 32
        <Heading>Select a date for delivery</Heading>
 33
        <DatePicker
 34
          selected={selectedDate}
 35
          onChange={handleChangeDate}
 36
          disabled={["Sunday", { end: yesterday }]}
 37
        />
 38
      </>
 39
    );
 40 }
 41
 42 const formatDate = (date) => {
 43
    const year = date.getFullYear();
 44
    const month = String(date.getMonth() + 1).padStart(2, "0");
 45
    const day = String(date.getDate()).padStart(2, "0");
 46
    return `${year}-${month}-${day}`;
 47 };
 Set date constraints for the DatePicker component
 If there are only certain dates that delivery can happen, then you can customize how the DatePicker component can be used by buyers by passing through disabled dates in the disabled property.
 src/Checkout.jsx
 1 <DatePicker>
 2
    <disabled={["Sunday", {end: yesterday}]}>
 3 </DatePicker>
 Step 6: Show the selected date in the Shopify admin
 After you've saved the date picker metafield to the order, display it on the order details page in the Shopify admin so that merchants can view it.
 In the Shopify admin, add a metafield definition for orders. Use the same namespace and key as defined in your /src/Checkout.jsx file.
 Tip
 If you already placed an order with delivery instructions, then you might need to select the metafield from the Metafields without a definition list.
 Step 7: Preview the extension
 Preview your extension to make sure that it works as expected.
 In a terminal, navigate to your app directory.
 Either start or restart your server to build and preview your app:
 Press p to open the developer console.
 In the developer console page, click on the preview link for the custom field extension.
 The date picker should render in the Shipping step of the checkout when Express Shipping is selected.
 Step 8: Test the extension
 Test your extension to make sure that it works as expected by placing an order with delivery instructions in checkout.
 With your server running, open the storefront of your development store.
 Add a product to the cart and then check out.
 Fill out the contact and shipping address information, and then move to the Shipping step of the checkout.
 Select Express Shipping. A date picker appears.
 Select a date and then complete the checkout.
 In the Shopify admin for the development store, open the order details page for the order that you just placed.
 The delivery date that you entered is displayed in the Metafields section, with the delivery date field that you created.
 Step 9: Deploy the UI extension
 To release your changes to users, create and release an app version. An app version is a snapshot of your app configuration and all extensions. You can have up to 50 checkout UI extensions in an app version.
 1. Navigate to your app directory.
 2. Run one of the following commands. Optionally, you can provide a name or message for the version using the --version and --message flags.
 Terminal
 npm
 Yarn
 pnpm
 $ npm run deploy
 The CLI builds your app, bundles your app components, and deploys to Shopify. To learn more about the processes that are executed when you run deploy, refer to the Shopify CLI command reference.
 Tip
 If you want to create a version, but want to avoid releasing it to users, then run the deploy command with a --no-release flag. You can release the unreleased app version using the CLI release command, or through the Partner Dashboard.
 An app version created using Shopify CLI contains the following:
 The app configuration from the local configuration file. If the include_config_on_deploy flag is omitted or false, the configuration from the active app version will be used instead.
 The local version of the app's CLI-managed extensions. If you have an extension in your deployed app, but the extension code doesn't exist locally, then the extension isn't included in your app version.
 The latest drafts of dashboard-managed extensions.
 Releasing an app version replaces the current active version that's served to stores with your app installed. It might take several minutes for app users to be upgraded to the new version.
 Next steps
 Learn about the components that are available in checkout UI extensions.
 Consult the API reference for checkout UI targets and their respective types.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Sample code
 Step 1: Create a checkout UI extension
 Step 2: Import components
 Step 3: Set up the extension target
 Step 4: Set up a metafield
 Step 5: Render the date picker and set the constraints
 Step 6: Show the selected date in the Shopify admin
 Step 7: Preview the extension
 Step 8: Test the extension
 Step 9: Deploy the UI extension
 Next steps
 Updates & News
 Developer changelog
