Delivery and shipping
 Overview
 Enhance delivery methods
 Reorder delivery options
 Pickup points
 Overview
 Generate options
 App requirements and UX guidelines
 Create local pickup charges
 Product offers
 Distribution
 Billing
 App Store
 Generate pickup point options
 Early access:
 The Pickup Points Delivery Option Generator API is a new feature that's available by request to merchants on the Shopify Plus plan. To request access, contact pickup-point-generator-early-access@shopify.com. You can test the Pickup Points Delivery Option Generator API on Partner development stores without requesting access.
 Customers can choose to have their order sent to a pickup point instead of to their address.
 In this guide, you'll learn how to generate custom pickup point options using Shopify Functions. You'll create a starter function with some logic to support pickup points for a specific location. You'll also learn how to retrieve the pickup point that the customer selected, using the GraphQL Admin API.
 Learn from an end-to-end example, and explore the API documentation and example to suit your customization needs.
 What you'll learn
 In this tutorial, youâ€™ll learn how to do the following tasks:
 Generate starter code for Shopify Functions
 Use GraphQL to define the input of your function
 Test the delivery option generator and review function logs
 Retrieve the selected pickup point for an order, using the GraphQL Admin API
 Deploy your function to the Shopify platform.
 Requirements
 Shopify Plus
 Only custom apps that are built for stores on the Shopify Plus plan have access to the Pickup Point Delivery Option Generator API. Public apps in the Shopify App Store and custom apps built for stores on non-Plus plans don't have access.
 You've created a Partner account.
 You've created a development store.
 You've created an app that uses Shopify CLI 3.49.5 or higher. If you previously installed Shopify CLI, then make sure that you're using the latest version.
 You've installed Node.js 16 or higher.
 You've installed your app on the development store.
 Rust-specific requirements
 The following requirements are specific to Rust-based development with Shopify Functions.
 You've installed Rust.
 On Windows, Rust requires the Microsoft C++ Build Tools. Make sure to select the Desktop development with C++ workload when installing the tools.
 You've installed cargo-wasi:
 Terminal
 $ cargo install cargo-wasi
 Note
 If you've previously installed cargo-wasi and updated Rust to version 1.67 or higher, then you also need to update to the latest cargo-wasi by running cargo install cargo-wasi.
 Step 1: Create the pickup point delivery option generator function
 Use Shopify CLI to generate a pickup point delivery option generator starter function. The CLI generates the function, specifies the function's inputs using an input query, and implements the function logic. Learn more about the function that's generated.
 Navigate to your app directory:
 Terminal
 $ cd <directory>
 Create a new pickup point delivery option generator extension with one of the following commands:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app generate extension -- --template pickup_point_delivery_option_generator --name pickup-points-generator
 Choose the language to use. For this tutorial, you should select either JavaScript or Rust.
 For handling large data payloads, consider using Rust, as it may help avoid exceeding Shopify's instruction limit, potentially preventing an InstructionCountLimitExceededError.
 Tip
 Shopify Functions support any language that compiles to WebAssembly (Wasm), such as Rust, AssemblyScript, or TinyGo. You specify the Wasm template option when you're using a language other than Rust and can conform to the Wasm API. Learn more about the Wasm API.
 Navigate to extensions/pickup-points-generator:
 Terminal
 $ cd extensions/pickup-points-generator
 Step 2: Preview the function on a development store
 To test your function, you need to make it available to your development store.
 If you're developing a function in a language other than JavaScript or TypeScript, ensure you have configured build.watch in your function extension configuration.
 Navigate back to your app root:
 Terminal
 $ cd ../..
 Use the Shopify CLI dev command to start app preview:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run dev
 You can keep the preview running as you work on your function. When you make changes to a watched file, Shopify CLI rebuilds your function and updates the function extension's drafts, so you can immediately test your changes.
 Follow the CLI prompts to preview your app, and install it on your development store.
 Note
 If your app is already running, then you need to stop and restart it.
 Step 3: Set up shipping to pickup points
 For pickup points to be available at checkout, your store needs to have at least one location with pickup points enabled.
 In the Shopify admin, go to Settings > Shipping and delivery.
 Under Shipping to pickup points, select a location.
 Enable the option to ship to pickup points from the location.
 Click Edit rate.
 Under Apply rate to pickup points provided by, select your extension.
 Click Done.
 Click Save.
 Step 4: Test the pickup point delivery option generator
 You can test your pickup point delivery option generator to ensure that it's working as expected.
 In your development store, add a product to your cart and proceed to checkout.
 The product must be available from the configured location.
 In checkout, select Ship to pickup point.
 Type an address in Canada, and click Search. If you're in Canada, then you can use your location.
 To view available pickup points, select either Map or List.
 Select a location.
 Click Continue to payment.
 The Payment page displays the address that you selected.
 Step 5 (Optional): Debug the function
 To debug your function, or view its output, you can review its logs.
 Log in to your Partner Dashboard.
 Navigate to Apps and select your app.
 Click Extensions > pickup-points-generator.
 Click on any function run to view its input, output, and any logs written to STDERR.
 Step 6: Retrieve the pickup point from an order
 You can retrieve a pickup point from an order with the GraphQL Admin API.
 To query the pickup point, you need to request access to protect customer data in the Partner Dashboard. Your app also needs to meet specific requirements to ensure customer privacy and security.
 Set access scopes
 Add the read_orders and read_merchant_managed_fulfillment_orders access scopes to your app.
 Stop your app if it's running.
 In shopify.app.toml, update scopes to include the required access scopes. The following is an example:
 shopify.app.toml
 1 scopes = "read_products,read_merchant_managed_fulfillment_orders,read_orders"
 Deploy your changes with one of the following commands:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run deploy
 When prompted, release the new version.
 Restart your server for the changes to take effect:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run dev
 Retrieve the pickup point
 Request the pickup point from the GraphQL Admin API's DeliveryMethod object. You'll request data from the deliveryOptionGeneratorPickupPoint field.
 Complete the order that you started.
 In Shopify CLI, where your server is running, press g to open GraphiQL in your browser.
 In GraphiQL, run the following query, with the ID of the order that you created.
 This example returns the IDs of the pickup point and the function that generated the pickup point option.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 query {
 2
    order(id: "gid://shopify/Order/{ORDER_ID}") {
 3
      id
 4
      fulfillmentOrders(first: 10, displayable: true) {
 5
        edges {
 6
          node {
 7
            deliveryMethod {
 8
              methodType
 9
              deliveryOptionGeneratorPickupPoint {
 10
                externalId
 11
                functionId
 12
              }
 13
            }
 14
          }
 15
        }
 16
      }
 17
    }
 18 }
 JSON response
 1 {
 2
    "data": {
 3
      "order": {
 4
        "id": "gid://shopify/Order/1",
 5
        "fulfillmentOrders": {
 6
          "edges": [
 7
            {
 8
              "node": {
 9
                "deliveryMethod": {
 10
                  "methodType": "PICKUP_POINT",
 11
                  "deliveryOptionGeneratorPickupPoint": {
 12
                    "externalId": "1",
 13
                    "functionId": "f0c17828-da1a-4748-810d-3c3cab2bc977"
 14
                  }
 15
                }
 16
              }
 17
            }
 18
          ]
 19
        }
 20
      }
 21
    }
 22 }
 Next steps
 Review the UX guidelines for pickup points, to seamlessly integrate your app into the checkout experience.
 Learn more about how Shopify Functions work and the benefits of using Shopify Functions.
 Learn how to use variables in your input query.
 Review the developer tools and resources to build for pickup points, including the Pickup Point Delivery Option Generator API reference.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Create the pickup point delivery option generator function
 Step 2: Preview the function on a development store
 Step 3: Set up shipping to pickup points
 Step 4: Test the pickup point delivery option generator
 Step 5 (Optional): Debug the function
 Step 6: Retrieve the pickup point from an order
