Overview
 Getting started
 Create a subscription
 UX guidelines
 Payments
 Billing
 App Store
 Getting started with post-purchase checkout extensions
 Beta
 Post-purchase checkout extensions are in beta and can be used without restrictions in a development store. To use post-purchase extensions on a live store, you need to request access.
 This guide shows you how to create an upsell offer on the post-purchase page in checkout. An upsell offer enables buyers to add products to their order after they've completed their payment.
 What you'll learn
 In this tutorial, youâ€™ll learn how to do the following tasks:
 Generate a post-purchase extension with Shopify CLI.
 Run the extension locally and test it on a development store.
 Build the extension UI with the component library.
 Authenticate requests from the extension to your app server.
 Deploy your extension code to Shopify.
 Create a version of your extension and publish it.
 Request access to run the post-purchase checkout extension on a live store.
 Requirements
 You're familiar with post-purchase checkout extensions.
 You've created a Partner account and a development store.
 You can place test orders on your development store.
 You've created an app that uses the Remix template.
 Step 1: Create the extension
 To create a post-purchase checkout extension, you can use Shopify CLI, which generates starter code for building your extension and automates common development tasks.
 In your app directory, run one of the following commands to create a new post-purchase checkout extension:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app generate extension -- --template post_purchase_ui --name my-post-purchase-ui-extension
 You should now have a new extension directory that includes the extension script at src/index.{file-extension}.
 Install dependencies
 Run the following command to install the dependencies required for the app server inside the extension directory that you created:
 Terminal
 npm
 Yarn
 pnpm
 $ npm install jsonwebtoken uuid
 Step 2: Test the extension
 Post-purchase checkout extensions in production are hosted and served by Shopify. During development and testing, you need to use a Shopify browser extension to render your local extensions in checkout.
 As you're testing, the browser extension automatically updates the checkout URLs.
 Navigate to your app directory.
 Either start or restart your server to build and preview your app:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run dev
 
 When you run the dev command, the CLI builds and serves your app. It also instructs you through multiple configuration steps. If you've already run dev for this app, then some of these steps are skipped.
 To learn about the processes that are executed when you run dev, refer to the Shopify CLI command reference.
 Press p to open the developer console. In the developer console page, click View checkout_post_purchase preview instructions next to your post-purchase extension.
 Install the Shopify Post-purchase Developer Tools for Chrome browser extension.
 Copy the post-purchase extension URL from the developer console.
 In the browser extension settings, enter the extension URL from the developer console:
 Place a test order in your development store and go through the checkout steps. The post-purchase UI is shown after the payment step, but before the Order status page:
 Step 3: Build the extension UI
 The UI components for post-purchase checkout extensions are managed by Shopify to ensure that the checkout is fast, optimized for mobile, and integrated with Shop Pay.
 Post-purchase extensions have access to the Checkout::PostPurchase::ShouldRender and Checkout::PostPurchase::Render extension points.
 The extension points API provides helper functions to allow you to calculate potential order totals, update the order, modify metafields, and more.
 Update the extension/my-post-purchase-ui-extension/src/index file with the following code. Replace the APP_URL constant, at the top of the file, with your local tunnel URL:
 src/index
 React
 Vanilla
 src/index.jsx
 1 import { useEffect, useState } from "react";
 2 import {
 3
    extend,
 4
    render,
 5
    useExtensionInput,
 6
    BlockStack,
 7
    Button,
 8
    CalloutBanner,
 9
    Heading,
 10
    Image,
 11
    Text,
 12
    TextContainer,
 13
    Separator,
 14
    Tiles,
 15
    TextBlock,
 16
    Layout,
 17 } from "@shopify/post-purchase-ui-extensions-react";
 18
 19 // For local development, replace APP_URL with your local tunnel URL.
 20 const APP_URL = "https://abcd-1234.trycloudflare.com";
 21
 22 // Preload data from your app server to ensure that the extension loads quickly.
 23 extend(
 24
    "Checkout::PostPurchase::ShouldRender",
 25
    async ({ inputData, storage }) => {
 26
      const postPurchaseOffer = await fetch(`${APP_URL}/api/offer`, {
 27
        method: "POST",
 28
        headers: {
 29
          Authorization: `Bearer ${inputData.token}`,
 30
          "Content-Type": "application/json",
 31
        },
 32
        body: JSON.stringify({
 33
          referenceId: inputData.initialPurchase.referenceId,
 34
        }),
 35
      }).then((response) => response.json());
 36
 37
      await storage.update(postPurchaseOffer);
 38
 39
      // For local development, always show the post-purchase page
 40
      return { render: true };
 41
    }
 42 );
 43
 44 render("Checkout::PostPurchase::Render", () => <App />);
 45
 46 export function App() {
 47
    const { storage, inputData, calculateChangeset, applyChangeset, done } =
 48
      useExtensionInput();
 49
    const [loading, setLoading] = useState(true);
 50
    const [calculatedPurchase, setCalculatedPurchase] = useState();
 51
 52
    const { offers } = storage.initialData;
 53
 54
    const purchaseOption = offers[0];
 55
 56
    // Define the changes that you want to make to the purchase, including the discount to the product.
 57
    useEffect(() => {
 58
      async function calculatePurchase() {
 59
        // Call Shopify to calculate the new price of the purchase, if the above changes are applied.
 60
        const result = await calculateChangeset({
 61
          changes: purchaseOption.changes,
 62
        });
 63
 64
        setCalculatedPurchase(result.calculatedPurchase);
 65
        setLoading(false);
 66
      }
 67
 68
      calculatePurchase();
 69
    }, [calculateChangeset, purchaseOption.changes]);
 70
 71
    // Extract values from the calculated purchase.
 72
    const shipping =
 73
      calculatedPurchase?.addedShippingLines[0]?.priceSet?.presentmentMoney
 74
        ?.amount;
 75
    const taxes =
 76
      calculatedPurchase?.addedTaxLines[0]?.priceSet?.presentmentMoney?.amount;
 77
    const total = calculatedPurchase?.totalOutstandingSet.presentmentMoney.amount;
 78
    const discountedPrice =
 79
      calculatedPurchase?.updatedLineItems[0].totalPriceSet.presentmentMoney
 80
        .amount;
 81
    const originalPrice =
 82
      calculatedPurchase?.updatedLineItems[0].priceSet.presentmentMoney.amount;
 83
 84
    async function acceptOffer() {
 85
      setLoading(true);
 86
 87
      // Make a request to your app server to sign the changeset with your app's API secret key.
 88
      const token = await fetch(`${APP_URL}/api/sign-changeset`, {
 89
        method: "POST",
 90
        headers: {
 91
          Authorization: `Bearer ${inputData.token}`,
 92
          "Content-Type": "application/json",
 93
        },
 94
        body: JSON.stringify({
 95
          referenceId: inputData.initialPurchase.referenceId,
 96
          changes: purchaseOption.id,
 97
        }),
 98
      })
 99
        .then((response) => response.json())
 100
        .then((response) => response.token)
 101
        .catch((e) => console.log(e));
 102
 103
      // Make a request to Shopify servers to apply the changeset.
 104
      await applyChangeset(token);
 105
 106
      // Redirect to the thank-you page.
 107
      done();
 108
    }
 109
 110
    function declineOffer() {
 111
      setLoading(true);
 112
      // Redirect to the thank-you page
 113
      done();
 114
    }
 115
 116
    return (
 117
      <BlockStack spacing="loose">
 118
        <CalloutBanner>
 119
          <BlockStack spacing="tight">
 120
            <TextContainer>
 121
              <Text size="medium" emphasized>
 122
                It&#39;s not too late to add this to your order
 123
              </Text>
 124
            </TextContainer>
 125
            <TextContainer>
 126
              <Text size="medium">
 127
                Add the {purchaseOption.productTitle} to your order and{" "}
 128
              </Text>
 129
              <Text size="medium" emphasized>
 130
                {purchaseOption.changes[0].discount.title}
 131
              </Text>
 132
            </TextContainer>
 133
          </BlockStack>
 134
        </CalloutBanner>
 135
        <Layout
 136
          media={[
 137
            { viewportSize: "small", sizes: [1, 0, 1], maxInlineSize: 0.9 },
 138
            { viewportSize: "medium", sizes: [532, 0, 1], maxInlineSize: 420 },
 139
            { viewportSize: "large", sizes: [560, 38, 340] },
 140
          ]}
 141
        >
 142
          <Image
 143
            description="product photo"
 144
            source={purchaseOption.productImageURL}
 145
          />
 146
          <BlockStack />
 147
          <BlockStack>
 148
            <Heading>{purchaseOption.productTitle}</Heading>
 149
            <PriceHeader
 150
              discountedPrice={discountedPrice}
 151
              originalPrice={originalPrice}
 152
              loading={!calculatedPurchase}
 153
            />
 154
            <ProductDescription textLines={purchaseOption.productDescription} />
 155
            <BlockStack spacing="tight">
 156
              <Separator />
 157
              <MoneyLine
 158
                label="Subtotal"
 159
                amount={discountedPrice}
 160
                loading={!calculatedPurchase}
 161
              />
 162
              <MoneyLine
 163
                label="Shipping"
 164
                amount={shipping}
 165
                loading={!calculatedPurchase}
 166
              />
 167
              <MoneyLine
 168
                label="Taxes"
 169
                amount={taxes}
 170
                loading={!calculatedPurchase}
 171
              />
 172
              <Separator />
 173
              <MoneySummary label="Total" amount={total} />
 174
            </BlockStack>
 175
            <BlockStack>
 176
              <Button onPress={acceptOffer} submit loading={loading}>
 177
                Pay now Â· {formatCurrency(total)}
 178
              </Button>
 179
              <Button onPress={declineOffer} subdued loading={loading}>
 180
                Decline this offer
 181
              </Button>
 182
            </BlockStack>
 183
          </BlockStack>
 184
        </Layout>
 185
      </BlockStack>
 186
    );
 187 }
 188
 189 function PriceHeader({ discountedPrice, originalPrice, loading }) {
 190
    return (
 191
      <TextContainer alignment="leading" spacing="loose">
 192
        <Text role="deletion" size="large">
 193
          {!loading && formatCurrency(originalPrice)}
 194
        </Text>
 195
        <Text emphasized size="large" appearance="critical">
 196
          {" "}
 197
          {!loading && formatCurrency(discountedPrice)}
 198
        </Text>
 199
      </TextContainer>
 200
    );
 201 }
 202
 203 function ProductDescription({ textLines }) {
 204
    return (
 205
      <BlockStack spacing="xtight">
 206
        {textLines.map((text, index) => (
 207
          <TextBlock key={index} subdued>
 208
            {text}
 209
          </TextBlock>
 210
        ))}
 211
      </BlockStack>
 212
    );
 213 }
 214
 215 function MoneyLine({ label, amount, loading = false }) {
 216
    return (
 217
      <Tiles>
 218
        <TextBlock size="small">{label}</TextBlock>
 219
        <TextContainer alignment="trailing">
 220
          <TextBlock emphasized size="small">
 221
            {loading ? "-" : formatCurrency(amount)}
 222
          </TextBlock>
 223
        </TextContainer>
 224
      </Tiles>
 225
    );
 226 }
 227
 228 function MoneySummary({ label, amount }) {
 229
    return (
 230
      <Tiles>
 231
        <TextBlock size="medium" emphasized>
 232
          {label}
 233
        </TextBlock>
 234
        <TextContainer alignment="trailing">
 235
          <TextBlock emphasized size="medium">
 236
            {formatCurrency(amount)}
 237
          </TextBlock>
 238
        </TextContainer>
 239
      </Tiles>
 240
    );
 241 }
 242
 243 function formatCurrency(amount) {
 244
    if (!amount || parseInt(amount, 10) === 0) {
 245
      return "Free";
 246
    }
 247
    return `$${amount}`;
 248 }
 How the extension code works
 The following sections explain how different parts of the example extension code work.
 Fetch product data in Checkout::PostPurchase::ShouldRender
 The Checkout::PostPurchase::ShouldRender handler pre-fetches product data from the server that's running locally. You pass the token in the Authorization header so that you can authenticate it with authenticate.public in the Remix app, and POST the reference ID to the server. By doing this, you can verify that the request came from Shopify, and that the request is signed with the same secret key as the app.
 The data returned from the server is then stored in the extension's storage.
 src/index
 React
 Vanilla
 src/index.jsx
 1 extend(
 2
    "Checkout::PostPurchase::ShouldRender",
 3
    async ({ inputData, storage }) => {
 4
      const postPurchaseOffer = await fetch(`${APP_URL}/api/offer`, {
 5
        method: "POST",
 6
        headers: {
 7
          Authorization: `Bearer ${inputData.token}`,
 8
          "Content-Type": "application/json",
 9
        },
 10
        body: JSON.stringify({
 11
          referenceId: inputData.initialPurchase.referenceId,
 12
        }),
 13
      }).then((response) => response.json());
 14
 15
      await storage.update(postPurchaseOffer);
 16
 17
      // For local development, always show the post-purchase page
 18
      return { render: true };
 19
    }
 20 );
 Note
 The fetch API is provided by App Bridge Checkout.
 Compute shipping and taxes using calculateChangeset
 Shipping costs and taxes are calculated based on the shipping address. The order changes are passed to the calculateChangeset function provided by the API. The returned data is used to update the UI.
 src/index
 React
 Vanilla
 src/index.jsx
 1 // Define the changes that you want to make to the purchase, including the discount to the product.
 2
    useEffect(() => {
 3
      async function calculatePurchase() {
 4
        // Call Shopify to calculate the new price of the purchase, if the above changes are applied.
 5
        const result = await calculateChangeset({
 6
          changes: purchaseOption.changes,
 7
        });
 8
 9
        setCalculatedPurchase(result.calculatedPurchase);
 10
        setLoading(false);
 11
      }
 12
 13
      calculatePurchase();
 14
    }, [calculateChangeset, purchaseOption.changes]);
 Update the order using applyChangeset
 The acceptOffer handler posts a request to the server to sign the changes as a JWT token. The request includes inputData.token, which the server uses to verify Shopify's request. The following code calls applyChangeset with the JWT token returned from the server.
 src/index
 React
 Vanilla
 src/index.jsx
 1 async function acceptOffer() {
 2
    setLoading(true);
 3
 4
    // Make a request to your app server to sign the changeset with your app's API secret key.
 5
    const token = await fetch(`${APP_URL}/api/sign-changeset`, {
 6
      method: "POST",
 7
      headers: {
 8
        Authorization: `Bearer ${inputData.token}`,
 9
        "Content-Type": "application/json",
 10
      },
 11
      body: JSON.stringify({
 12
        referenceId: inputData.initialPurchase.referenceId,
 13
        changes: purchaseOption.id,
 14
      }),
 15
    })
 16
      .then((response) => response.json())
 17
      .then((response) => response.token)
 18
      .catch((e) => console.log(e));
 19
 20
    // Make a request to Shopify servers to apply the changeset.
 21
    await applyChangeset(token);
 22
 23
    // Redirect to the thank-you page.
 24
    done();
 25 }
 26
 27 function declineOffer() {
 28
    setLoading(true);
 29
    // Redirect to the thank-you page
 30
    done();
 31 }
 Step 3: Update the app server
 Your app requires two endpoints to support the extension. The first endpoint is used to fetch the product data for the upsell. The second endpoint is used to sign the changeset, so Shopify can verify the request to edit the order that came from your app.
 Define upsell product data
 Create a new file called app/offer.server.js, which defines a function that's used to fetch the product data for the upsell. For simplicity in this tutorial, you'll hardcode the product data. The following logic can be replaced with an API call to Shopify or your own database:
 app/offer.server.js
 1 const OFFERS = [
 2
    {
 3
      id: 1,
 4
      title: "One time offer",
 5
      productTitle: "The S-Series Snowboard",
 6
      productImageURL:
 7
        "https://cdn.shopify.com/s/files/1/0", // Replace this with the product image's URL.
 8
      productDescription: ["This PREMIUM snowboard is so SUPER DUPER awesome!"],
 9
      originalPrice: "699.95",
 10
      discountedPrice: "699.95",
 11
      changes: [
 12
        {
 13
          type: "add_variant",
 14
          variantID: 123456789, // Replace with the variant ID.
 15
          quantity: 1,
 16
          discount: {
 17
            value: 15,
 18
            valueType: "percentage",
 19
            title: "15% off",
 20
          },
 21
        },
 22
      ],
 23
    },
 24 ];
 25
 26 /*
 27
   * For testing purposes, product information is hardcoded.
 28
   * In a production application, replace this function with logic to determine
 29
   * what product to offer to the customer.
 30
   */
 31 export function getOffers() {
 32
    return OFFERS;
 33 }
 34
 35 /*
 36
   * Retrieve discount information for the specific order on the backend instead of relying
 37
   * on the discount information that is sent from the frontend.
 38
   * This is to ensure that the discount information is not tampered with.
 39
   */
 40 export function getSelectedOffer(offerId) {
 41
    return OFFERS.find((offer) => offer.id === offerId);
 42 }
 You can use the following GraphQL query to fetch the first product in your Shopify store. Update the getOffer function with the data returned from the query, or the information from the product page in your Shopify admin.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 {
 2
    products(first: 1) {
 3
      edges {
          legacyResourceId
 7
          title
 8
          featuredImage {
 9
            url
 10
          }
 11
          description
 12
          variants(first: 1) {
 13
            edges {
 14
              node {
 15
                price
 16
                compareAtPrice
 17
                id
 18
                legacyResourceId
 19
              }
 20
            }
 21
          }
 22
        }
 23
      }
 24
    }
 25 }
 JSON response
 1 {
 2
    "data": {
 3
      "products": {
 4
 7
              "id": "gid://shopify/Product/123456789",
 8
              "legacyResourceId": "123456789",
 9
              "title": "The S-Series Snowboard",
 10
              "featuredImage": {
 11
                "url": "https://cdn.shopify.com/s/files/1/123"
 12
              },
 13
              "description": "This PREMIUM snowboard is so SUPERDUPER awesome!",
 14
              "variants": {
 15
                "edges": [
 16
                  {
 17
                    "node": {
 18
                      "price": "699.95",
 19
                      "compareAtPrice": null,
 20
                      "id": "gid://shopify/ProductVariant/987654321",
 21
                      "legacyResourceId": "987654321"
 22
                    }
 23
                  }
 24
                ]
 25
              }
 26
            }
 27
          }
 28
        ]
 29
      }
 30
    }
 31 }
 Note
 Install the Shopify GraphiQL app to make GraphQL queries to your store.
 Define the offer and sign changeset endpoints
 In the app/routes folder, define two new routes. The first route is used to fetch the product data that you previously defined for the upsell. The second route is used to sign the changeset, so Shopify can verify that the request came from your app.
 Both routes will verify that the request came from Shopify by checking that the JWT token is signed by the app's secret key using authenticate.public.
 Add the following files to your project:
 File
 Get offers
 Sign changeset
 app/routes/api.offer.jsx
 1 import { json } from "@remix-run/node";
 2
 3 import { authenticate } from "../shopify.server";
 4 import { getOffers } from "../offer.server";
 5
 6 // The loader responds to preflight requests from Shopify
 7 export const loader = async ({ request }) => {
 8
    await authenticate.public(request);
 9 };
 10
 11 // The action responds to the POST request from the extension. Make sure to use the cors helper for the request to work.
 12 export const action = async ({ request }) => {
 13
    const { cors } = await authenticate.public(request);
 14
 15
    const offers = getOffers();
 16
    return cors(json({ offers }));
 17 };
 You are now ready to test your upsell functionality extension. Refer to Step 2 for testing in these instructions.
 Step 4: Deploy the extension
 When you're ready to release your changes to users, you can create and release an app version. An app version is a snapshot of your app configuration and all extensions.
 Navigate to your app directory.
 Run one of the following commands.
 Optionally, you can provide a name or message for the version using the --version and --message flags.
 Terminal
 npm
 Yarn
 pnpm
 $ npm run deploy
 Releasing an app version replaces the current active version that's served to stores that have your app installed. It might take several minutes for app users to be upgraded to the new version.
 Tip
 If you want to create a version, but avoid releasing it to users, then run the deploy command with a --no-release flag.
 You can release the unreleased app version using the CLI release command, or through the Partner Dashboard.
 Step 5: Request access
 If you want to run the post-purchase checkout extension on a live store, then you need to request access. Before you request access, you need an unpublished app in a development store.
 After your access request has been approved, any apps that you distribute through the Shopify App Store also need to be submitted for review in the Partner Dashboard. The review process is slightly different for existing apps and new apps.
 Note
 All merchants can install apps from the Shopify App Store that use post-purchase checkout extensions. Only Plus merchants can install custom apps which use post-purchase checkout extensions.
 For existing apps:
 You need to test your app using an unpublished app in a development store.
 To add the post-purchase checkout extension to a published app, you must submit the unpublished testing app for review in the Partner Dashboard.
 If the new app meets the stated requirements, then it will be approved and the post-purchase extension can be added to your existing published app.
 For new apps:
 You need to test your app using an unpublished app in a development store.
 To add the post-purchase checkout extension to a published app, you must submit the unpublished testing app for review in the Partner Dashboard.
 If the new app meets the stated requirements, then it will be approved and listed in the Shopify App Store.
 Request access from the Partner Dashboard
 From your Partner Dashboard, click Apps.
 Click the name of the app that you want to change.
 Click API access.
 On the Access post-purchase extensions card, click Request access.
 In the Post-purchase page that opens, describe why you're applying for access.
 You'll see a banner that your request is under review. The review process can take up to seven days.
 After your request is approved, you're notified in the Partner Dashboard that your app has full access to the post-purchase extensions.
 Next steps
 Learn how to create a post-purchase subscription upsell.
 Review the post-purchase targets API reference.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Create the extension
 Step 2: Test the extension
 Step 3: Build the extension UI
 Step 3: Update the app server
 Step 4: Deploy the extension
 Step 5: Request access
