Overview
 Manage returns
 Preview and refund duties
 Manage reverse fulfillment orders
 Manage reverse deliveries
 Billing
 App Store
 Manage reverse deliveries
 A reverse delivery is a set of items to be packaged together and sent back to the merchant or third-party fulfillment service. This guide shows you how to manage reverse deliveries with the GraphQL Admin API.
 Requirements
 Your app can make authenticated requests to the GraphQL Admin API.
 Your app has the read_returns and write_returns access scopes. Learn how to configure your access scopes using Shopify CLI.
 Your store has existing orders that have been fulfilled. You can return only items that have been fulfilled. If you need to make changes to an unfulfilled item, then you can edit an order.
 You're using API version 2023-01 or higher.
 You've met Shopify's protected customer data requirements.
 You're familiar with creating and managing returns.
 Step 1: Create a reverse delivery with shipping information
 Creating a return or approving a return creates a reverse fulfillment order, and enables you to create a reverse delivery for it.
 You can use the reverseDeliveryCreateWithShipping mutation to create a new reverse delivery with associated external shipping information.
 This mutation supports temporary URLs generated by the stagedUploadsCreate mutation. The file asset is uploaded when you call the reverseDeliveryCreateWithShipping mutation with the staged upload target URL. For examples of how to use the stageddUploadsCreate mutation, refer to Upload media to Shopify.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation reverseDeliveryCreateWithShippingMutation {
 2
    reverseDeliveryCreateWithShipping(
 3
      # The ID of the reverse fulfillment order that's associated to the reverse delivery.
 4
      reverseFulfillmentOrderId: "gid://shopify/ReverseFulfillmentOrder/1",
 5
      # The reverse delivery line items to be created. If an empty array is provided, then this mutation will create a reverse delivery line item for each reverse fulfillment order line item. The quantity of the reverse delivery line items equals the quantity of the reverse fulfillment order line item total.
 6
      reverseDeliveryLineItems: [
 7
        {
 8
          # The ID of the reverse fulfillment order line item.
 9
          reverseFulfillmentOrderLineItemId: "gid://shopify/ReverseFulfillmentOrderLineItem/1",
 10
          # The quantity of items associated with the reverse fulfillment order line item.
 11
          quantity: 1
 12
        }
 13
      ],
 14
      # For return label files, the `labelInput` can be used to pass in label file related attributes.
 15
      trackingInput: {
 16
        # The tracking number for the label.
 17
        number: "123456789",
 18
        # The tracking URL for the carrier. If a carrier that's not supported by Shopify is used, then you must provide the tracking URL of the delivery.
 19
        url: "https://example-carrier.com/123456789"
 20
      },
 21
      # Send an email notification to the customer with the reverse delivery instructions.
 22
      # The reverse delivery is associated to the `ReverseFulfillmentOrder` object, specified by the `reverseFulfillmentOrderId`.
 23
      # If `notifyCustomer` is set to `true`, then `ReverseFulfillmentOrder.order.email` is required.
 24
      notifyCustomer: true
 25
    ) {
 26
      reverseDelivery {
 27
        id
 28
        reverseDeliveryLineItems(first: 10) {
 29
          edges {
 30
            node {
 31
              id
 32
              quantity
 33
            }
 34
          }
 35
        }
 36
        deliverable {
 37
          ... on ReverseDeliveryShippingDeliverable {
 38
            tracking {
 39
              number
 40
              url
 41
            }
 42
          }
 43
        }
 44
      }
 45
      userErrors {
 46
        field
 47
        message
 48
      }
 49
    }
 50 }
      "reverseDeliveryCreateWithShipping": {
 4
        "reverseDelivery": {
 5
          "id": "gid://shopify/ReverseDelivery/1",
 6
          "reverseDeliveryLineItems": {
 7
            "edges": [
 8
              {
 9
                "node": {
 10
                  "id": "gid://shopify/ReverseDeliveryLineItem/1",
 11
                  "quantity": 1
 12
                }
 13
              }
 14
            ]
 15
          },
 16
          "deliverable": {
 17
            "tracking": {
 18
              "number": "123456789",
 19
              "url": "https://example-carrier.com/123456789"
 20
            }
 21
          },
 22
          "userErrors": []
 23
        }
 24
      }
 25
    }
 26 }
 Step 2: Query a reverse delivery
 A reverse delivery contains the context of the items sent back, and how they're being sent back. For example, items might be sent back with a shipping label and tracking information.
 A reverse delivery doesn't include package tracking information. For example, an app can't query if an item is in transit, if a shipping label has been scanned, or if the item has been delivered to a third-party fulfillment service or merchant.
 You can have more than one reverse delivery for a single return. For example, if a couch is being returned but it needs to be put into several boxes for shipping, then it's one return with multiple return deliveries.
 To retrieve a reverse delivery, pass the ID of the reverse delivery to the reverseDelivery query:
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 query reverseDeliveryQuery {
 2
    # The ID of the reverse delivery.
 3
    reverseDelivery(id: "gid://shopify/ReverseDelivery/1") {
 4
      id
 5
      status
 6
      # The deliverable associated with the reverse delivery.
 7
      deliverable {
 8
        ... on ReverseDeliveryShippingDeliverable {
 9
          label {
 10
            publicFileUrl
 11
          }
 12
          tracking {
 13
            carrierName
 14
            number
      }
 18
      # The reverse delivery line items attached to the reverse delivery.
 19
      reverseDeliveryLineItems(first: 10) {
 20
        nodes {
 21
          id
 22
          quantity
 23
          reverseFulfillmentOrderLineItem {
 24
            # Use this ID to dispose reverse delivery line items in Step 3.
 25
            id
 26
            quantity
 27
          }
 28
        }
 29
      }
 30
    }
 31 }
 JSON response
 1 {
 2
    "data": {
 3
      "reverseDelivery": {
 4
        "id": "gid://shopify/ReverseDelivery/1",
 5
        "status": "INSPECTED",
 6
        "deliverable": {
 7
          "label": {
 8
            "publicFileUrl": "https://example.com/label/1"
 9
          },
 10
          "tracking": {
 11
            "carrierName": "USPS",
 12
            "number": "111111111"
 13
          }
 14
        },
 15
        "reverseDeliveryLineItems": {
 16
          "nodes": [
 17
            {
 18
              "id": "gid://shopify/ReverseDeliveryLineItem/1",
 19
              "quantity": 2,
 20
              "reverseFulfillmentOrderLineItem": {
 21
                "id": "gid://shopify/ReverseFulfillmentOrderLineItem/1",
 22
                "quantity": 3
 23
              }
 24
            }
 25
          ]
 26
        }
 27
      }
 28
    }
 29 }
 Step 3: Dispose reverse delivery line items
 Deprecated
 reverseDeliveryDispose will be deprecated as of the 2025-01 Admin GraphQL API version. Please use the reverseFulfillmentOrderDispose mutation instead.
 When a merchant or third-party fulfillment service receives a returned item, they can inspect the product to determine whether it's in sellable condition. For example, the product might be stained or missing components.
 For health and safety reasons, some products can only be restocked if they are in unopened or brand new condition. If the products are returned in an opened or used condition, then the products are disposed of during inspection.
 You can use the reverseFulfillmentOrderDispose mutation to dispose reverse delivery line items. This mutation enhances the existing restocking capability for refunds.
 Note
 To dispose a reverse delivery line item using reverseFulfillmentOrderDispose, you need the reverse fulfillment order line item ID. Consult a sample query to learn how.
 You can only dispose reverse deliveries once on every unit of each item. For example, if there's a hat with a quantity of four, then you can do four dispositions at most, not one disposition for all four items.
 After a disposition is made, your app can't update the disposition. To learn about the available disposition types, refer to the reverseFulfillmentOrderDispositionType enum.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation reverseFulfillmentOrderDispose {
 2
    reverseFulfillmentOrderDispose (
 3
      # The input parameters required to dispose reverse fulfillment order line items.
 4
      dispositionInputs: [
 5
        {
 6
          # The ID of the reverse fulfillment order line item.
 7
          # Use the field `ReverseDeliveryLineItem.reverseFulfillmentOrderLineItem` to find
 8
          # the reverse fulfillment order line item ID of a reverse delivery line item.
 9
          reverseFulfillmentOrderLineItemId: "gid://shopify/ReverseFulfillmentOrderLineItem/1",
 10
          # The quantity of the reverse fulfillment order line item to dispose.
 11
          quantity: 2,
 12
          # The final arrangement for the reverse fulfillment order line item. A `dispositionType` of `RESTOCKED` means that the item was restocked. The quantity of available inventory is incremented, and the item can't be returned again.
 13
          dispositionType: RESTOCKED,
 14
          # The ID of the location where the reverse fulfillment order line item is to be disposed. This is required when the disposition type is `RESTOCKED`.
 15
          locationId: "gid://shopify/Location/1",
 16
        },
 17
        }
 18
          # The ID of the reverse fulfillment order line item.
 19
          # Use the field `ReverseDeliveryLineItem.reverseFulfillmentOrderLineItem` to find
 20
          # the reverse fulfillment order line item ID of a reverse delivery line item.
 21
          reverseFulfillmentOrderLineItemId: "gid://shopify/ReverseFulfillmentOrderLineItem/2",
 22
          # The quantity of the reverse fulfillment order line item to dispose.
 23
          quantity: 1,
 24
          # A `dispositionType` of `PROCESSING_REQUIRED` means that the merchant received an item that requires further processing before being restocked or discarded.
 25
          dispositionType: PROCESSING_REQUIRED,
 26
        }
 27
      ]
 28
    ) {
 29
      # The disposed reverse fulfillment order line items.
 30
      reverseFulfillmentOrderLineItems {
 31
        id
 32
        dispositions {
 33
          location {
 34
            id
 35
            name
 36
          }
 37
          quantity
 38
          type
 39
        }
 40
        totalQuantity
 41
      }
 42
      userErrors {
 43
        field
 44
        message
 45
      }
 46
    }
 47 }
 JSON response
 1 {
 2
    "data": {
 3
      "reverseFulfillmentOrderDispose": {
 4
        "reverseFulfillmentOrderLineItems": [
 5
          {
 6
            "id": "gid://shopify/ReverseFulfillmentOrderLineItem/1",
 7
            "dispositions": [
 8
              {
 9
                "location": {
 10
                  "id": "gid://shopify/Location/1",
 11
                  "name": "Store warehouse"
 12
                },
 13
                "quantity": 2,
 14
                "type": "RESTOCKED"
 15
              }
 16
            ],
 17
            "totalQuantity": 2
 18
          },
 19
          {
 20
            "id": "gid://shopify/ReverseFulfillmentOrderLineItem/2",
 21
            "dispositions": [
 22
              {
 23
                "location": null,
 24
                "quantity": 1,
 25
                "type": "PROCESSING_REQUIRED"
 26
              }
 27
            ],
 28
            "totalQuantity": 1
 29
          }
 30
        ],
 31
        "userErrors": []
 32
      }
 33
    }
 34 }
 Webhooks
 As of GraphQL Admin API version 2023-01 and higher, your app can subscribe to the reverse_deliveries/attach_deliverable to get notified when a deliverable is attached to a reverse delivery. A deliverable can be attached when a reverse delivery is created or updated with delivery metadata. Metadata includes the delivery method, label, and tracking information that's associated with a reverse delivery.
 The following example shows the JSON response for the reverse_deliveries/attach_deliverable webhook. To learn how to set up and consume webhooks, refer to Webhooks configuration overview.
 Note
 Return webhooks are available only in the GraphQL Admin API. They aren't available in the REST Admin API.
 reverse_deliveries/attach_deliverable webhook response
 1 {
 2
    "id": 2,
 3
    "admin_graphql_api_id": "gid://shopify/ReverseDelivery/2",
 4
    "return": {
 5
      "id": 3,
 6
      "admin_graphql_api_id": "gid://shopify/Return/3"
 7
    },
 8
    // To consume the webhook data and display return labels to buyers, you need the following information for return labels:
 9
    // - Supported file type(s)
 10
    // - Supported file size
 11
    // - URL prefix (for URL allow lists)
 12
    "shipping_deliverable": {
 13
      "label": {
 14
        "public_file_url": "https://www.example-host.com/label/1",
 15
        "created_at": "2022-05-18T10:28:33-04:0"
 16
      },
 17
      "tracking": {
 18
        "carrierName": "EX",
 19
        "tracking_number": "ABC11111111",
 20
        "tracking_url": "https://www.example-carrier.com/track/ABC11111111"
 21
      }
 22
    }
 23 }
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Step 1: Create a reverse delivery with shipping information
 Step 2: Query a reverse delivery
 Step 3: Dispose reverse delivery line items
 Webhooks
 Updates & News
