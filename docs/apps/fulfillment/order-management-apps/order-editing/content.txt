Billing
 App Store
 Edit existing orders
 Apps can edit orders that a Shopify channel creates, such as Shopify Point of Sale (POS), Online Store, draft orders, or orders that the app creates through the GraphQL Admin API. For example, an app might add new items to a customer’s order or alter the quantity of line items.
 This guide shows how to use the GraphQL Admin API to edit an existing order.
 Requirements
 Your app can make authenticated requests to the GraphQL Admin API.
 Your app has the write_order_edits access scope.
 Tip
 By default, your app has access to orders placed in the last 60 days. To use the GraphQL Admin API to query orders that were placed more than 60 days ago, your app needs to request the read_all_orders scope. Learn how to configure your access scopes using Shopify CLI.
 You've met Shopify's protected customer data requirements.
 You're editing an order that was placed in your store currency.
 Your store currency is the currency that's used in your Shopify admin to price products and display reports. Editing orders placed in international currencies requires you to upgrade to Checkout Extensibility.
 You're editing an order that was placed after January 1, 2019. You can't edit archived orders or orders placed before January 1st, 2019.
 Step 1: Begin order editing
 The orderEditBegin mutation is the first step in editing an order. The orderEditBegin mutation creates a CalculatedOrder object, which tracks the edits that you want to make to the order.
 The following example shows how to pass the order's ID to the orderEditBegin mutation and request the ID of the CalculatedOrder object as a return field:
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation beginEdit{
 2
   orderEditBegin(id: "gid://shopify/Order/1234"){
 3
      calculatedOrder{
 4
        id
 5
      }
 6
    }
 7 }
 JSON response
 1 {
 2
    "data": {
 3
      "orderEditBegin": {
 4
        "calculatedOrder": {
 5
          "id": "gid://shopify/CalculatedOrder/5678"
 6
        }
 7
      }
 8
    }
 9 }
 Step 2: Edit the order
 After you have the CalculatedOrder object ID, you can make the following types of edits to the order:
 Add a new variant
 Add a discount to the variant
 Remove a discount from a variant
 Update a discount from a variant
 Add a custom line item
 Edit line item quantity
 Add a new shipping line
 Update a newly added shipping line
 Remove a shipping line
 Add a new variant
 Add a new product variant to an order with the orderEditAddVariant mutation.
 The following example adds a new product variant with a quantity of three to the order:
 In the mutation's input, include the CalculatedOrder object ID, the variant ID and the variant quantity. Request the ID of the added line items using the addedLineItems field to verify that our variant was added correctly.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation addVariantToOrder{
 2
    orderEditAddVariant(id: "gid://shopify/CalculatedOrder/5678", variantId: "gid://shopify/ProductVariant/19523055845398", quantity: 1){
 3
      calculatedOrder {
 4
        id
 5
        addedLineItems(first:5) {
 6
          edges {
 7
            node {
 8
              id
 9
              quantity
 10
            }
 11
          }
 12
        }
 13
      }
 14
      userErrors {
 15
        field
 16
        message
 17
      }
 18
    }
 19 }
 JSON response
 1 {
 2
    "data": {
 3
      "calculatedOrder": {
 4
        "id": "gid://shopify/CalculatedOrder/5678",
 5
        "addedLineItems": {
 6
          "edges": [
 7
            {
 8
              "node": {
 9
                "id": "gid://shopify/CalculatedLineItems/121314",
 10
                "quantity": 3
 11
              }
 12
            }
 13
          ]
 14
        }
 15
      },
 16
      "userErrors": []
 17
    }
 18 }
 Add a discount to the variant
 Add a fixed amount or percentage discount to a line item with the orderEditAddLineItemDiscount mutation.
 In the mutation's input, include the CalculatedOrder object ID, the line item ID, and the OrderEditAppliedDiscountInput inputs.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation addDiscount {
 2
    orderEditAddLineItemDiscount(id: "gid://shopify/CalculatedOrder/5678", lineItemId: "gid://shopify/CalculatedLineItem/121314", discount: {percentValue: 20, description: "Product offer at checkout"}) {
 3
      calculatedOrder {
 4
        id
 5
        addedLineItems(first:5) {
 6
          edges {
 7
            node {
 8
              id
 9
              quantity
 10
            }
      }
 14
      userErrors {
 15
        message
      "calculatedOrder": {
 4
        "id": "gid://shopify/CalculatedOrder/5678",
 5
        "addedLineItems": {
 6
          "edges": [
 7
            {
 8
              "node": {
 9
                "id": "gid://shopify/CalculatedLineItem/151617",
 10
                "quantity": 2
 11
              }
 12
            }
 13
          ]
 14
        }
 15
      },
 16
      "userErrors": []
 17
    }
 18 }
 Remove a discount from a variant
 Remove a fixed amount or percentage discount from a line item with the orderEditRemoveDiscount mutation.
 In the mutation's input, include the CalculatedOrder object ID and the discountApplicationId.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation removeDiscount {
 2
    orderEditRemoveDiscount(id: "gid://shopify/CalculatedOrder/5678", discountApplicationId: "gid://shopify/CalculatedDiscountApplication/134243") {
 3
      userErrors {
 4
        field
 5
        message
 6
      }
 7
    }
 8 }
 JSON response
 1 {
 2
    "data": {
 3
      "orderEditRemoveDiscount": {
 4
        "userErrors": []
 5
      }
 6
    }
 7 }
 Update a discount from a variant
 Update a fixed amount or percentage discount from a line item with the orderEditUpdateDiscount mutation.
 In the mutation's input, include the CalculatedOrder object ID, discountApplicationId and the OrderEditAppliedDiscountInput inputs.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation updateDiscount {
 2
    orderEditUpdateDiscount(id: "gid://shopify/CalculatedOrder/5678", discountApplicationId: "gid://shopify/CalculatedDiscountApplication/134243", discount: {percentValue: 20, description: "Product offer at checkout"}) {
 3
      userErrors {
 4
        field
 5
        message
 6
      }
 7
    }
 8 }
 JSON response
 1 {
 2
    "data": {
 3
      "orderEditUpdateDiscount": {
 4
        "userErrors": []
 5
      }
 6
    }
 7 }
 Add a custom line item
 Add a custom line item to an order with the orderEditAddCustomItem mutation.
 The following example adds a custom line item to the order for gift wrapping.
 In the mutation's input, include the CalculatedOrder ID, line item title, quantity, and price in the orderEditAddCustomItem field. In the response, request the added line item’s ID, title, and quantity to verify that the custom line item was added correctly.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation addCustomItemToOrder {
 2
    orderEditAddCustomItem(id: "gid://shopify/CalculatedOrder/5678", title: "Custom Line Item", quantity: 1, price: {amount: 40.00, currencyCode: CAD}) {
 3
      calculatedOrder {
 4
        id
 5
        addedLineItems(first: 5) {
 6
          edges {
 7
            node {
 8
              id
 9
            }
 10
          }
 11
        }
 12
      }
 13
      userErrors {
 14
        field
 15
        message
 16
      }
 17
    }
 18 }
 JSON response
 1 {
 2
    "data": {
 3
      "calculatedOrder": {
 4
        "id": "gid://shopify/CalculatedOrder/5678",
 5
        "addedLineItems": {
 6
 9
                "id": "gid://shopify/CalculatedLineItem/121314",
 10
                "title": "Shopify socks",
 11
                "quantity": 4
 12
              }
 13
            },
 14
            {
 15
              "node": {
 16
                "id": "gid://shopify/CalculatedLineItem/151617",
 17
                "title": "Gift wrapping service",
 18
                "quantity": 1
 19
              }
 20
            }
 21
          ]
 22
        }
 23
      },
 24
      "userErrors": []
 25
    }
 26 }
 Edit line item quantity
 You can use the orderEditSetQuantity mutation to adjust the line item quantity to add an additional gift wrapping service to the order.
 In the mutation's input, include the order id, lineItemId, and the new quantity value that you want to set. In the response, request the ID and quantity of the line items to verify that the line item quantity was updated correctly.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation increaseLineItemQuantity {
 2
    orderEditSetQuantity(id: "gid://shopify/CalculatedOrder/5678", lineItemId: "gid://shopify/CalculatedLineItem/2941798776854", quantity: 2) {
 3
      calculatedOrder {
 4
        id
 5
        addedLineItems(first: 5) {
 6
          edges {
 7
            node {
 8
              id
 9
              quantity
 10
            }
 11
          }
 12
        }
 13
      }
 14
      userErrors {
 15
        field
 16
        message
 17
      }
 18
    }
 19 }
 JSON response
 1 {
 2
    "data": {
 3
      "calculatedOrder": {
 4
        "id": "gid://shopify/CalculatedOrder/5678",
 5
        "addedLineItems": {
 6
          "edges": [
 7
            {
 8
              "node": {
 9
                "id": "gid://shopify/CalculatedLineItem/151617",
 10
                "title": "Gift wrapping service",
 11
                "quantity": 2
 12
              }
 13
            }
 14
          ]
 15
        }
 16
      },
 17
      "userErrors": []
 18
    }
 19 }
 Add a new shipping line
 You can add a custom shipping line using the orderEditAddShippingLine mutation.
 In the mutation's input, include the CalculatedOrder object ID, a shipping line title, and a price in the orderEditAddShippingLineInput input.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation addShippingLine {
 2
    orderEditAddShippingLine(id: "gid://shopify/CalculatedOrder/5678", shippingLine: { title: "Standard Shipping", price: { amount: 10.00, currencyCode: CAD }}) {
 3
      calculatedOrder {
 4
        id
 5
        shippingLines {
 6
          id
 7
          stagedStatus
 8
          title
 9
          price {
 10
            shopMoney {
 11
              currencyCode
 12
              amount
 13
            }
 14
          }
 15
        }
 16
      }
 17
      userErrors {
 18
        field
 19
        message
 20
        code
 21
      }
 22
    }
 23 }
 JSON response
 1 {
 2
    "data": {
 3
      "calculatedOrder": {
 4
        "id": "gid://shopify/CalculatedOrder/5678",
 5
        "shippingLines": [
 6
          {
 7
            "id": "gid://shopify/CalculatedShippingLine/151617",
 8
            "stagedStatus": "ADDED",
 9
            "title": "Standard Shipping",
 10
            "price": {
 11
              "shopMoney": {
 12
                "currencyCode": "CAD",
 13
                "amount": 10.0,
 14
              }
        ]
 18
      },
 19
      "userErrors": [],
 20
    }
 21 }
 Note
 This mutation is available as of API version 2024-04.
 Update a newly added shipping line
 You can update a newly added shipping line using the orderEditUpdateShippingLine mutation.
 In the mutation's input, include the CalculatedOrder object ID, the shippingLineId, and an updated shipping line title or an updated price in the orderEditUpdateShippingLineInput input.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation updateShippingLine {
 2
    orderEditUpdateShippingLine(id: "gid://shopify/CalculatedOrder/5678", shippingLineId: "gid://shopify/CalculatedShippingLine/151617", shippingLine: { price: { amount: 12.00, currencyCode: CAD }}) {
 3
      calculatedOrder {
 4
        id
 5
        shippingLines {
 6
          id
 7
          stagedStatus
 8
          title
 9
          price {
 10
            shopMoney {
 11
              currencyCode
 12
              amount
 13
            }
      }
 17
      userErrors {
 18
        field
 19
        message
 20
        code
 21
      }
 22
    }
 23 }
 JSON response
 1 {
 2
    "data": {
 3
      "calculatedOrder": {
 4
        "id": "gid://shopify/CalculatedOrder/5678",
 5
        "shippingLines": [
 6
          {
 7
            "id": "gid://shopify/CalculatedShippingLine/151617",
 8
            "stagedStatus": "ADDED",
 9
            "title": "Standard Shipping",
 10
            "price": {
 11
              "shopMoney": {
 12
                "currencyCode": "CAD",
 13
                "amount": 12.0,
 14
              }
 15
            }
 16
          }
 17
        ]
 18
      },
 19
      "userErrors": [],
 20
    }
 21 }
 Note
 This mutation is available as of API version 2024-04.
 Remove a shipping line
 You can remove any shipping line using the orderEditRemoveShippingLine mutation.
 In the mutation's input, include the CalculatedOrder object ID, and the shippingLineId for the shipping line that you want to remove in the orderEditRemoveShippingLine input.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation removeShippingLine {
 2
    orderEditRemoveShippingLine(id: "gid://shopify/CalculatedOrder/5678", shippingLineId: "gid://shopify/CalculatedShippingLine/134243") {
 3
      calculatedOrder {
 4
        id
 5
        shippingLines {
 6
          id
 7
          stagedStatus
 13
        code
 14
      }
 15
    }
 16 }
 JSON response
 1 {
 2
    "data": {
 3
      "calculatedOrder": {
 4
        "id": "gid://shopify/CalculatedOrder/5678",
 5
        "shippingLines": [
 6
          {
 7
            "id": "gid://shopify/CalculatedShippingLine/151617",
 8
            "stagedStatus": "REMOVED"
 9
          }
 10
        ]
 11
      },
 12
      "userErrors": []
 13
    }
 14 }
 Note
 This mutation is available as of API version 2024-04.
 Step 3: Commit the order edits
 When you're satisfied with your changes, you can commit them to the order with the orderEditCommit mutation. The orderEditCommit mutation commits the changes tracked by the CalculatedOrder object to the order.
 In the mutation's input, include the CalculatedOrder object ID, the staffNote field, and the notifyCustomer field set to false. If notifyCustomer is set to true, then an email invoice with the updated order information is sent to the customer.
 Note
 You can edit only unfulfilled line items. If an edit changes the total order value, then a balance might need to be collected from or refunded to the customer. You can use the orderEditCommit mutation to send an invoice to the customer that they can use to pay the outstanding balance and complete the order, similarly to how you'd complete draft orders.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation commitEdit {
 2
    orderEditCommit(id: "gid://shopify/CalculatedOrder/5678", notifyCustomer: false, staffNote: "I edited the order! It was me!") {
 3
      order {
 4
        id
 2
    "data": {
 3
      "order": {
 4
        "id": "gid://shopify/Order/1234"
 5
      }
 6
    },
 7
    "userErrors": []
 8 }
 Step 4: Subscribe to a webhook
 To be notified when an order is edited, subscribe your app the orders/edited webhook. The webhook is triggered whenever an order edit is completed.
 To learn how to set up and consume webhooks, refer to Webhooks configuration overview.
 Next steps
 Consult the merchant documentation to learn about editing orders in the Shopify admin.
 Learn how to create test orders and transactions to validate your app's behavior.
 Explore examples for querying orders, including retrieving sales data from an order, using the GraphQL Admin API.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Requirements
 Step 1: Begin order editing
 Step 2: Edit the order
 Step 3: Commit the order edits
 Step 4: Subscribe to a webhook
 Next steps
 Updates & News
