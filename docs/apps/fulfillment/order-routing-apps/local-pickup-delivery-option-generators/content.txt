Build fulfillment constraints
 Build local pickup delivery option generators
 Fulfillment service apps
 Returns apps
 Migrate to fulfillment orders
 App Store
 Getting started with building local pickup delivery option generators
 You can use a local pickup delivery option generator to generate custom local pickup options that are available to customers during checkout.
 Local pickup is an option that allows customers to pick up their orders from your physical location. You can activate it in the Shipping and delivery settings in the Shopify admin. Customers can then choose the local pickup option at checkout. To learn more, visit the Shopify Help Center.
 In this tutorial series, you'll use Shopify Functions to create a function that adds a price to local pickup options when the cart contains bulky items. You can use this tutorial as a guide to creating other functions that generate local pickup charges.
 Beta
 The local pickup delivery option generator API is a new feature that is available by request. To request access, contact local-pickup-generator-early-access@shopify.com.
 What you'll learn
 In this tutorial, youâ€™ll learn how to do the following tasks:
 Generate starter code for Shopify Functions.
 Use GraphQL to define the input of your function.
 Deploy a local pickup delivery option generator function to the Shopify platform.
 Review logs for your function.
 Requirements
 Shopify Plus
 Only stores on the Shopify Plus plan can use local pickup delivery option generators.
 You've created a Partner account.
 You've created a development store.
 You've created an app that uses Shopify CLI 3.49.5 or higher. If you previously installed Shopify CLI, then make sure that you're using the latest version.
 If you plan to create a UI for your extension, then start with the Remix app template.
 You've installed Node.js 16 or higher.
 You've installed your app on the development store.
 Rust-specific requirements
 The following requirements are specific to Rust-based development with Shopify Functions.
 You've installed Rust.
 On Windows, Rust requires the Microsoft C++ Build Tools. Make sure to select the Desktop development with C++ workload when installing the tools.
 You've installed cargo-wasi:
 Terminal
 $ cargo install cargo-wasi
 Note
 If you've previously installed cargo-wasi and updated Rust to version 1.67 or higher, then you also need to update to the latest cargo-wasi by running cargo install cargo-wasi.
 Step 1: Create the local pickup delivery option generator function
 To create your local pickup delivery option generator function, you can use Shopify CLI to generate a starter function, specify the inputs for your function using an input query, and implement your function logic.
 Navigate to your app directory:
 Terminal
 $ cd <directory>
 Run one of the following commands to create a new local pickup delivery option generator extension:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app generate extension -- --template local_pickup_delivery_option_generator --name local-pickup-generator
 Choose the language that you want to use. For this tutorial, you should select either JavaScript or Rust.
 Terminal
 $ ?  What would you like to work in?
 $ > (1) JavaScript
 $
    (2) TypeScript
 $
    (3) Rust
 $
    (4) Wasm
 Tip
 Shopify Functions support any language that compiles to WebAssembly (Wasm), such as Rust, AssemblyScript, or TinyGo. You specify the Wasm template option when you're using a language other than Rust and can conform to the Wasm API. Learn more about the Wasm API.
 Navigate to extensions/local-pickup-generator:
 Terminal
 $ cd extensions/local-pickup-generator
 Replace the contents of the input.graphql file with the following code:
 input.graphql defines the input for the function.
 input.graphql
 1 query Input {
 2
    cart {
 3
      lines {
 4
        id
 5
        merchandise {
 6
          __typename
 7
          ...on ProductVariant
 8
          {
 9
            id
 10
            product {
 11
              productType
 12
              hasAnyTag(tags: ["bulky"])
 13
            }
      }
 17
    }
 18
    locations {
 19
      id
 20
      handle
 21
      name
 22
    }
 23 }
 If you're using JavaScript, then run the following command to regenerate types based on your input query:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app function typegen
 Replace the src/index.js or src/main.rs file with the following code.
 The function logic determines if any items in the cart have a "bulky" tag and adds a price to delivery options:
 File
 JavaScript
 Rust
 src/index.js
 1 // @ts-check
 2
 3 // Use JSDoc annotations for type safety.
 4 /**
 5 * @typedef {import("../generated/api").InputQuery} InputQuery
 6 * @typedef {import("../generated/api").FunctionResult} FunctionResult
 7 * @typedef {import("../generated/api").Operation} Operation
 8 */
 9
 10 // The @shopify/shopify_function package will use the default export as your function entrypoint.
 11 export default /**
 12 * @param {InputQuery} input
 13 * @returns {FunctionResult}
 14 */
 15
    (input) => {
 16
        const hasBulkyVariant = input.cart.lines.some((line) => {
 17
          switch (line.merchandise.__typename) {
 18
            case 'ProductVariant':
 19
              return line.merchandise.product.hasAnyTag;
 20
              case 'CustomProduct':
 21
              return false;
 22
            default:
 23
              return false;
 24
          }
 25
        });
 26
 27
        let cost;
 28
        let pickupInstruction;
 29
        if (hasBulkyVariant) {
 30
          cost = 2.99;
 31
          pickupInstruction = "Ready for pickup next business day.";
 32
        } else {
 33
          cost = 0.00;
 34
          pickupInstruction = "Ready for pickup now!";
 35
        }
 36
 37
        const operations = input.locations
 38
          .map((location) => ({
 39
            add: {
 40
              title: location.name,
 41
              cost: cost,
 42
              pickupLocation: {
 43
                locationHandle: location.handle,
 44
                pickupInstruction: pickupInstruction,
 45
              },
 46
            },
 47
          }));
 48
 49
        // Return the operations
 50
        return { operations: operations };
 51
    };
 If you're using Rust, then build the function's Wasm module:
 Terminal
 $ cargo wasi build --release
 If you encounter any errors, then ensure that you've installed Rust and cargo-wasi.
 Step 2: Preview the function on a development store
 To test your function, you need to make it available to your development store.
 If you're developing a function in a language other than JavaScript or TypeScript, ensure you have configured build.watch in your function extension configuration.
 Navigate back to your app root:
 Terminal
 $ cd ../..
 Use the Shopify CLI dev command to start app preview:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run dev
 You can keep the preview running as you work on your function. When you make changes to a watched file, Shopify CLI rebuilds your function and updates the function extension's drafts, so you can immediately test your changes.
 Follow the CLI prompts to preview your app, and install it on your development store.
 Step 3: Test the local pickup delivery option generator
 You can test your local pickup delivery option generator to ensure it's working as expected, and review logs for your function.
 From the Shopify admin, go to Settings > Shipping and delivery.
 Make sure you have at least one location in your store with local pickup enabled.
 Open your development store, build a cart, proceed through checkout, and select Pick up.
 To debug your function, or view its output, you can review its logs in your Partner Dashboard.
 Log in to your Partner Dashboard and navigate to Apps > {your app} > Extensions > local-pickup-delivery-option-generator.
 Click on any function run to view its input, output, and any logs written to STDERR.
 Next steps
 Learn more about how Shopify Functions work and the benefits of using Shopify Functions.
 Consult the API references for Shopify Functions.
 Learn how to use variables in your input query.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Create the local pickup delivery option generator function
 Step 2: Preview the function on a development store
 Step 3: Test the local pickup delivery option generator
 Next steps
