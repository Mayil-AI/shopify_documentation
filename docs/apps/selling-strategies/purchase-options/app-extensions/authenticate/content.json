Authenticate requests between an extension and an app's backend server
 App Bridge Admin apps use session tokens to authenticate requests between the extension and your app's backend server. Session tokens are secure packets of data about a merchant session in the Shopify Admin, similar to cookies. A session token provides the information required to validate that a request is coming from Shopify, and also provides the IDs of the user and shop. Learn more about session tokens.
 This tutorial describes how to authenticate requests between your extension and your app's backend server using session tokens.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Make a request to your app's server using a session token
 Receive a request and decode the session token
 Validate a session token
 Requirements
 Complete the Getting started tutorial.
 Familiarize yourself with data and UI component rendering and extension points.
 Step 1: Make requests to your app’s server using a session token
 When an extension built with App Bridge Admin loads in the Shopify Admin, you can fetch the session token using the session token API. Include the token with every request that you make to your app's backend server. The token is signed using a shared secret so that your app's backend can verify if the request is valid.
 Configure your app's backend server
 Extensions built using App Bridge Admin are hosted on Shopify's servers. To receive requests from your extension, you need to enable cross-domain requests on your app's backend server.
 If you're using Rails, then add the following code in the config/application.rb file to enable cross-domain requests:
 config/application.rb
 1 Rails.application.config.middleware.insert_before(0, Rack::Cors) do
 2
    allow do
 3
      origins '*' # Allow access to this api from any domain
 4
      resource '*', # Allow all origins access to all resources
 5
        headers: ['authorization', 'content-type', 'context'], # Restrict headers to relevant keys
 6
        methods: [:post] # Restrict the methods to only the ones expected to be used by the extension
 7
    end
 8 end
 Fetch a session token from the Shopify Admin
 In your extension, use the session token API to fetch a new session token. Session tokens expire every minute, so always fetch a new token before making a request to your app's backend server.
 src/index.js
 JavaScript
 React
 1 import {extend, TextField} from '@shopify/admin-ui-extensions';
 2
 3 function MyExtension(root, api) {
 4
    const sessionToken = api.sessionToken;
 5
 6
    const text = root.createComponent(TextField, {
 7
      disabled: true,
 8
      value: '',
 9
      label: 'Session Token',
 10
    });
 11
 12
    sessionToken.getSessionToken().then((newToken) => {
 13
      text.updateProps({
 14
        value: newToken,
 15
      });
 16
    });
 17
 18
    root.appendChild(text);
 19
    root.mount();
 20 }
 21
 22 extend('MyExtensionPoint', MyExtension);
 Make a request to your app's backend server
 After your extension has received a session token, you can include it in requests to your server. How you include the session token in the request is up to you, but we suggest including it in the request header as follows:
 src/index.js
 JavaScript
 React
 1 import {extend, Button} from '@shopify/admin-ui-extensions';
 2
 3 extend('MyExtension', (api, root) => {
 4
    const sessionToken = api.sessionToken;
 5
 6
     const sendRequest = async () => {
 7
      const token = await sessionToken.getSessionToken();
 8
      const response = await fetch('https://server-url-here', {
 9
        headers: {
 10
         'any-header-key': token || 'unknown token',
 11
        },
 12
      });
 13
      console.log('Response', response.text());
 14
    };
 15
 16
    const button = root.createComponent(Button, {
 17
      title: 'Send request',
 18
      onClick: sendRequest,
 19
    });
 20
    root.append(button);
 21 });
 For information on how to set up your requests for each extension mode, refer to Create and manage a product subscription app extension.
 Step 2: Receive a request and decode the session token
 When your server receives a request from your extension that includes a session token, you need to decode it. Session tokens use the JSON Web Token (JWT) format. Libraries to encode and decode JWT are available for all common server frameworks.
 Pass the following parameters to the JWT decode method:
 The session token received in your extension's request
 The client secret for your app
 The HS256 algorithm
 1 JWT.decode(token_sent_from_the_extension, client_secret, true, "HS256")
 The session token contains the details of the current shop and user, including the following information:
 Your shop's domain
 Your app’s client ID
 The user ID
 You can use this information to establish per-user sessions, similar to an authentication cookie.
 For information on the session token structure, refer to Anatomy of a session token.
 Step 3: Validate a session token
 Validate session tokens using one of the following methods:
 Manually validate session tokens
 Use the shopify app gem
 Configure a Rails app to perform the validation.
 Manually validate a session token
 To verify that a session token is coming from Shopify, you can encode a new session token using your app’s shared secret and compare it to the encoded token received from your extension.
 An encoded JWT is a string with the following structure:
 1 {header}.{payload}.{signature}
 Note
 {header}, {payload}, and {signature} are all Base64-encoded.
 {signature} verifies that the header and payload were encoded using the shared secret and confirms that the token was generated by Shopify.
 For more information about the structure, refer to Anatomy of a session token and JWT.io.
 Using the SHA-256 algorithm, hash the decoded {header} and {payload} values from the extension session token.
 Sign the string using JWT.
 Specify the HS256 algorithm and use the app’s secret as the signing key.
 Base64url-encode the result.
 Compare the new session token with the session token received from your extension.
 If the session tokens are identical, then the request came from Shopify.
 Use the Shopify App gem to validate a session token
 If your server uses the Shopify App gem to validate session authentication for GraphQL requests, then requests containing a valid JWT token in the request header will automatically be authorized. An error is raised if an invalid token is received.
 Configure a Rails app to validate a session token
 You can skip the following steps if any of the following criteria are met:
 The app uses Shopify App gem version 13.1.0 or newer.
 The server doesn’t use Rails.
 The server is already configured to process GraphQL requests using the Shopify App gem.
 In config/routes.rb, add the following route:
 config/routes.rb
 1 post "/graphql_extension", to: "graphql#execute_extension"
 In the app/controllers/graphql_controller.rb file, replace the content with the following code:
 app/controllers/graphql_controller.rb
 1 # frozen_string_literal: true
 2
 3 # ... existing imports ...
 4 class GraphqlController < AuthenticatedController
 5
    class UnauthorizedRequest < RuntimeError; end
 6
 7
    # If accessing from outside this domain, nullify the session
 8
    # This allows for outside API access while preventing CSRF attacks,
 9
    # but you'll have to authenticate your user separately
 10
    # protect_from_forgery with: :null_session
 11
    protect_from_forgery with: :null_session, prepend: true
 12
    before_action :validate_request, only: [:execute_extension], prepend: true
 13
 14
    ENCODING_ALGORITHM = "HS256"
 15
 16
    # ... existing public methods
 17
 18
    def execute_extension
 19
      puts "---DEBUG---: JWT VALIDATION SUCCESS!"
 20
      # ... execute on server schema or proxy to Shopify
 21
    end
 22
 23
    private
 24
 25
    def validate_request
 26
      # JWT.decode(token, secret, verify, algorithm)
 27
      #   -> takes the secret, runs it over the encoding algo, compares it with the token from the client
 28
      JWT.decode(jwt_token_from_request, 'custom-fields-dev-secret', true, algorithm: ENCODING_ALGORITHM)
 29
    rescue JWT::DecodeError
 30
      raise UnauthorizedRequest
 31
    end
 32
 33
    def jwt_token_from_request
 34
      token = (/Bearer (?<token>.+)/.match(request.headers.fetch("authorization", "")) || {})[:token]
 35
      raise UnauthorizedRequest unless token.present?
 36
      token
 37
    end
 38
 39
    # ... existing private methods
 40 end
 Step 4: Making requests to Shopify’s Admin API
 To communicate with the Shopify Admin API, your extension needs to make requests through your app's backend server. You need to build an API that your extension can make requests to, which in turn makes requests to the Shopify Admin API.
 Next steps
 Create and manage a product subscription app extension
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Make requests to your app’s server using a session token
 Step 2: Receive a request and decode the session token
 Step 3: Validate a session token
 Step 4: Making requests to Shopify’s Admin API
 Next steps
 Updates & News
 Developer changelog
