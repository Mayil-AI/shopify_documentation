Shipping and delivery
 Building your app
 Getting started
 Add app components
 Build a user interface
 Billing
 App Store
 Add deferred purchase option app components
 Previously, you set up the foundation of your app. You're now ready to add app components that can help merchants create and view their deferred purchase options.
 On the app page, you want to add functionality that enables mechant to do the following tasks:
 Set the deferred purchase option name
 Configure the delivery, inventory, and billing policies for the deferred purchase option
 Select products that will have the deferred purchase option
 On the app's homepage, you want to view a list of created deferred purchase options.
 You'll use Polaris and App Bridge React to build the user interface. You'll use GraphQL Admin API mutations and queries to create and retrieve deferred purchase options.
 At the end of this tutorial, you'll have a functioning app. This app will be simple, but youâ€™ll learn where to find resources to build more complex features on your own.
 Note
 The sample app in this tutorial is assigned with a PRE_ORDER category. When you create your own app, you can assign a category based on the app's purpose. For more information, refer to Purchase options category.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Add new routes to your app's server that call the Shopify Admin API
 Add UI to view the deferred purchase option
 Add UI to create a deferred purchase option
 Test your app on a development store
 Requirements
 Complete the Getting started tutorial to set up the foundation of your app.
 Familiarize yourself with purchase options and deferred purchase options.
 Step 1: Define constants
 Create a file that defines constants. The constants are used across your app components.
 In your project directory, in the web/frontend folder, create constants.js.
 web/frontend/constants.js
 1 // Defines deposit values
 2 export const depositValue = {
 3
    NoDeposit: 0.0,
 4
    Deposit25: 25.0,
 5
    Deposit50: 50.0,
 6
    Deposit75: 75.0,
 7
    FullDeposit: 100.0,
 8 };
 9
 10 // Defines when to fulfill the order
 11 export const sellingPlanFulfillmentTrigger = {
 12
    Asap: "ASAP",
 13
    Unknown: "UNKNOWN",
 14 };
 15
 16 // Defines when to update the inventory
 17 export const sellingPlanReserve = {
 18
    OnSale: "ON_SALE",
 19
    OnFulfillment: "ON_FULFILLMENT",
 20 };
 21
 22 // Defines when to charge the remaining balance
 23 export const sellingPlanRemainingBalanceChargeTrigger = {
 24
    NoRemainingBalance: "NO_REMAINING_BALANCE",
 25
    ExactTime: "EXACT_TIME",
 26 };
 Step 2: Create app components
 Create the following app components:
 name
 deposit selection
 remaining balance charge
 fulfillment selection and inventory reserve
 product selection
 Tip
 We recommend keeping your app component files in the web/frontend/components/purchaseOptions folder.
 Create the name component
 Create a component that enables merchants to set the deferred purchase option name. The name component includes the following Polaris components:
 Card
 TextField
 In the web/frontend/components/purchaseOptions folder, create PurchaseOptionName.jsx.
 web/frontend/components/purchaseOptions/PurchaseOptionName.jsx
 1 import { useCallback } from "react";
 2 import { Card, TextField } from "@shopify/polaris";
 3
 4 const PurchaseOptionName = ({ purchaseOptionName, onChange }) => {
 5
    const handleChange = useCallback((newValue) => {
 6
      onChange(newValue);
 7
    }, []);
 8
 9
    return (
 10
      <Card title="Deferred purchase option" sectioned>
 11
        <TextField
 12
          label="Set the deferred purchase option name"
 13
          placeholder="Name"
 14
          value={purchaseOptionName}
 15
          onChange={handleChange}
 16
          autoComplete="off"
 17
        />
 18
      </Card>
 19
    );
 20 };
 21
 22 export default PurchaseOptionName;
 Create the deposit selection component
 Create a component that enables merchants to set the deposit amount charged at checkout. The deposit selection component uses the constants defined in web/frontend/constants.js and includes the following Polaris components:
 Card
 Select
 In the web/frontend/components/purchaseOptions folder, create DepositSelection.jsx.
 web/frontend/components/purchaseOptions/DepositSelection.jsx
 1 import {useCallback} from 'react';
 2 import {Card, Select} from '@shopify/polaris';
 3 import {depositValue} from '../../constants.js';
 4
 5 const DepositSelection = ({depositAmount, onChange}) => {
 6
    const handleSelectionChange = useCallback((newValue) => {
 7
      onChange(newValue);
 8
    }, []);
 9
 10
    const options = [
 11
      {label: 'No deposit', value: depositValue.NoDeposit},
 12
      {label: '25% deposit', value: depositValue.Deposit25},
 13
      {label: '50% deposit', value: depositValue.Deposit50},
 14
      {label: '75% deposit', value: depositValue.Deposit75},
 15
      {label: 'Full deposit', value: depositValue.FullDeposit},
 16
    ];
 17
 18
    return (
 19
      <Card title="Deposit" sectioned>
 20
        <Select
 21
          label="Select the deposit amount"
 22
          options={options}
 23
          onChange={handleSelectionChange}
 24
          value={parseInt(depositAmount)}
 25
        />
 26
      </Card>
 27
    );
 28 };
 29
 30 export default DepositSelection;
 Create the remaining balance charge component
 Create a component that enables merchants to select the remaining balance charge date. The remaining balance charge component uses the constants defined in web/frontend/constants.js and includes the following Polaris components:
 Card
 DatePicker
 In the web/frontend/components/purchaseOptions folder, create RemainingBalanceCharge.jsx.
 web/frontend/components/purchaseOptions/RemainingBalanceCharge.jsx
 1 import {useState, useCallback} from 'react';
 2 import {Card, DatePicker} from '@shopify/polaris';
 3
 4 const RemainingBalanceCharge = ({remainBalanceChargeDate, onChange}) => {
 5
    const currentRemainingBalanceChargeDate = remainBalanceChargeDate.start;
 6
 7
    const [{month, year}, setDate] = useState({
 8
      month: currentRemainingBalanceChargeDate.getMonth(),
 9
      year: currentRemainingBalanceChargeDate.getFullYear(),
 10
    });
 11
 12
    const handleChange = useCallback((newValue) => {
 13
      onChange(newValue);
 14
    }, []);
 15
 16
    const handleMonthChange = useCallback(
 17
      (month, year) => setDate({month, year}),
 18
      [],
 19
    );
 20
 21
    return (
 22
      <Card title="Remaining balance charge date" sectioned>
 23
        <DatePicker
 24
          month={month}
 25
          year={year}
 26
          onChange={handleChange}
 27
          onMonthChange={handleMonthChange}
 28
          selected={remainBalanceChargeDate}
 29
        />
 30
      </Card>
 31
    );
 32 };
 33
 34 export default RemainingBalanceCharge;
 Create the fulfillment selection and inventory reserve components
 Create components that enable merchants to select when to fulfill the order and when to update the inventory. The fulfillment selection and inventory reserve components use the constants defined in web/frontend/constants.js and include the following Polaris components:
 Card
 Stack
 RadioButton
 In the web/frontend/components/purchaseOptions folder, create FulfillmentSelection.jsx.
 web/frontend/components/purchaseOptions/FulfillmentSelection.jsx
 1 import { useCallback } from "react";
 2 import { Card, Stack, RadioButton } from "@shopify/polaris";
 3 import { sellingPlanFulfillmentTrigger } from "../../constants.js";
 4
 5 const FulfillmentSelection = ({ fulfillmentTrigger, onTypeChange }) => {
 6
    const handleSelectionChange = useCallback((_checked, newValue) => {
 7
      onTypeChange(newValue);
 8
    }, []);
 9
 10
    const hasAsapFulfillment =
 11
      fulfillmentTrigger === sellingPlanFulfillmentTrigger.Asap;
 12
    const hasUnknownFulfillment =
 13
      fulfillmentTrigger === sellingPlanFulfillmentTrigger.Unknown;
 14
 15
    return (
 16
      <Card title="Fulfillment" sectioned>
 17
        <Stack vertical spacing="tight">
 18
          <RadioButton
 19
            label="As soon as possible"
 20
            helpText="The order is fulfilled when the order is created."
 21
            id={sellingPlanFulfillmentTrigger.Asap}
 22
            checked={hasAsapFulfillment}
 23
            onChange={handleSelectionChange}
 24
          />
 25
          <RadioButton
 26
            label="Unknown"
 27
            helpText="The fulfillment date is unknown."
 28
            id={sellingPlanFulfillmentTrigger.Unknown}
 29
            checked={hasUnknownFulfillment}
 30
            onChange={handleSelectionChange}
 31
          />
 32
        </Stack>
 33
      </Card>
 34
    );
 35 };
 36
 37 export default FulfillmentSelection;
 In the web/frontend/components/purchaseOptions folder, create InventoryReserve.jsx.
 web/frontend/components/purchaseOptions/InventoryReserve.jsx
 1 import { useCallback } from "react";
 2 import { Card, Stack, RadioButton } from "@shopify/polaris";
 3 import { sellingPlanReserve } from "../../constants.js";
 4
 5 const InventoryReserve = ({ inventoryReservation, onChange }) => {
 6
    const handleChange = useCallback(
 7
      (_checked, newValue) => onChange(newValue),
 8
      []
 9
    );
 10
 11
    return (
 12
      <Card title="Inventory" sectioned>
 13
        <Stack vertical>
 14
          <RadioButton
 15
            label="On Sale"
 16
            helpText="The inventory is updated when the order is created."
 17
            id={sellingPlanReserve.OnSale}
 18
            onChange={handleChange}
 19
            checked={inventoryReservation === sellingPlanReserve.OnSale}
 20
          />
 21
          <RadioButton
 22
            label="On Fulfillment"
 23
            helpText="The inventory is updated when the order is fulfilled."
 24
            id={sellingPlanReserve.OnFulfillment}
 25
            onChange={handleChange}
 26
            checked={inventoryReservation === sellingPlanReserve.OnFulfillment}
 27
          />
 28
        </Stack>
 29
      </Card>
 30
    );
 31 };
 32
 33 export default InventoryReserve;
 Create the product selection component
 Create a component that enables merchants to select products that will have the deferred purchase option. The product selection component includes the ResourcePicker React component.
 In the web/frontend/components/purchaseOptions folder, create ProductsSelection.jsx.
 web/frontend/components/purchaseOptions/ProductsSelection.jsx
 1 import { useState, useCallback } from "react";
 2 import { ResourcePicker } from "@shopify/app-bridge-react";
 3 import {
 4
    Card,
 5
    Button,
 6
    ResourceList,
 7
    ResourceItem,
 8
    TextStyle,
 9
    Thumbnail,
 10
    Stack,
 11 } from "@shopify/polaris";
 12 import { ImageMajor } from "@shopify/polaris-icons";
 13
 14 const ProductsSelection = ({ productsList, onChange }) => {
 15
    const [pickerOpen, setPickerOpen] = useState(false);
 16
    const handleProductsSelection = useCallback((resources) => {
 17
      setPickerOpen(false);
 18
      onChange(resources);
 19
    });
 20
 21
    return (
 22
      <>
 23
        <Card
 24
          title="Select products that will have the deferred purchase option"
 25
          sectioned
 26
        >
 27
          <Stack spacing="loose" vertical>
 28
            {productsList.selection && (
 29
              <ResourceList
 30
                resourceName={{ singular: "product", plural: "products" }}
 31
                items={productsList.selection}
 32
                renderItem={(item) => {
 33
                  const { id, title, images } = item;
 34
                  const media = (
 35
                    <Thumbnail
 36
                      size="small"
 37
                      source={images[0]?.originalSrc ?? ImageMajor}
 38
                      alt={images[0]?.altText ?? title}
 39
                    />
 40
                  );
 41
 42
                  return (
 43
                    <ResourceItem id={id} media={media}>
 44
                      <h3>
 45
                        <TextStyle variation="strong">{title}</TextStyle>
 46
                      </h3>
 47
                    </ResourceItem>
 48
                  );
 49
                }}
 50
              />
 51
            )}
 52
            <Stack distribution="trailing">
 53
              <Button onClick={() => setPickerOpen(true)}>Select products</Button>
 54
            </Stack>
 55
          </Stack>
 56
        </Card>
 57
        <ResourcePicker
 58
          resourceType="Product"
 59
          showVariants={false}
 60
          open={pickerOpen}
 61
          onSelection={(resources) => handleProductsSelection(resources)}
 62
          onCancel={() => setPickerOpen(false)}
 63
        />
 64
      </>
 65
    );
 66 };
 67
 68 export default ProductsSelection;
 When you click Select products, the product list is displayed.
 Step 3: Add UI for creating purchase options
 You have created the required components. Now you are ready to put them together to create UI so merchants can create deferred purchase options.
 Learn more about GraphQL Admin API mutations for deferred purchase options.
 Install @shopify/react-form. Run the following command in the web/frontend folder:
 Terminal
 npm
 Yarn
 pnpm
 $ npm install @shopify/react-form
 Update the web/frontend/pages/purchaseOptions/new.jsx file with the following code:
 web/frontend/pages/purchaseOptions/new.jsx
 1 import { Page, Layout, Stack, PageActions } from "@shopify/polaris";import { useAppBridge, useNavigate } from "@shopify/app-bridge-react";
 2
      import { useForm, useField } from "@shopify/react-form";
 3
      import { useAuthenticatedFetch } from "../../hooks";
 4
      import PurchaseOptionName from "../../components/purchaseOptions/PurchaseOptionName";
 5
      import DepositSelection from "../../components/purchaseOptions/DepositSelection";
 6
      import RemainingBalanceCharge from "../../components/purchaseOptions/RemainingBalanceCharge";
 7
      import FulfillmentSelection from "../../components/purchaseOptions/FulfillmentSelection";
 8
      import InventoryReserve from "../../components/purchaseOptions/InventoryReserve";
 9
      import ProductsSelection from "../../components/purchaseOptions/ProductsSelection";
 10
      import {
 11
      depositValue,
 12
      sellingPlanFulfillmentTrigger,
 13
      sellingPlanReserve,
 14
      sellingPlanRemainingBalanceChargeTrigger,
 15
      } from "../../constants.js";
 16
 17
      export default function PurchaseOptionNew() {
 18
      const app = useAppBridge();
 19
      const navigate = useNavigate();
 20
      const authenticatedFetch = useAuthenticatedFetch();
 21
      let currentDate = new Date();
 22
      currentDate.setHours(0, 0, 0, 0);
 23
 24
      let data = null;
 25
 26
      const {
 27
        fields: {
 28
          name,
 29
          deposit,
 30
          remainingBalanceChargeExactTime,
 31
          fulfillmentTrigger,
 32
          inventoryReserve,
 33
          productIds,
 34
        },
 35
        submit,
 36
        submitting,
 37
        dirty,
 38
      } = useForm({
 39
        fields: {
 40
          name: useField(""),
 41
          deposit: useField(depositValue.NoDeposit),
 42
          remainingBalanceChargeExactTime: useField({
 43
            start: currentDate,
 44
            end: currentDate,
 45
          }),
 46
          fulfillmentTrigger: useField(sellingPlanFulfillmentTrigger.Asap),
 47
          inventoryReserve: useField(sellingPlanReserve.OnSale),
 48
          productIds: useField([]),
 49
        },
 50
        onSubmit: async (form) => {
 51
          const floatDeposit = parseFloat(deposit.value);
 52
          const remainingBalanceChargeTrigger =
 53
            floatDeposit === 100
 54
              ? sellingPlanRemainingBalanceChargeTrigger.NoRemainingBalance
 55
              : sellingPlanRemainingBalanceChargeTrigger.ExactTime;
 56
          const remainingBalanceChargeTime =
 57
            remainingBalanceChargeTrigger ===
 58
            sellingPlanRemainingBalanceChargeTrigger.ExactTime
 59
              ? form.remainingBalanceChargeExactTime.start
 60
              : null;
 61
          const purchaseOptionsInput = {
 62
            input: {
 63
              name: form.name,
 64
              merchantCode: "purchase-options",
 65
              options: ["Purchase-Options"],
 66
              position: 1,
 67
              sellingPlansToCreate: [
 68
                {
 69
                  name: form.name,
 70
                  options: "Purchase Options with deposit",
 71
                  category: "PRE_ORDER",
 72
                  billingPolicy: {
 73
                    fixed: {
 74
                      checkoutCharge: {
 75
                        type: "PERCENTAGE",
 76
                        value: {
 77
                          percentage: parseFloat(form.deposit),
 78
                        },
 79
                      },
 80
                      remainingBalanceChargeTrigger: remainingBalanceChargeTrigger,
 81
                      remainingBalanceChargeExactTime: remainingBalanceChargeTime,
 82
                    },
 83
                  },
 84
                  deliveryPolicy: {
 85
                    fixed: {
 86
                      fulfillmentTrigger: form.fulfillmentTrigger,
 87
                    },
 88
                  },
 89
                  inventoryPolicy: {
 90
                    reserve: form.inventoryReserve,
 91
                  },
 92
                },
 93
              ],
 94
            },
 95
            resources: {
 96
              productIds: form.productIds,
 97
            },
 98
          };
 99
          let response = await authenticatedFetch("/api/deferred-purchase/create", {
 100
            method: "POST",
 101
            headers: { "Content-Type": "application/json" },
 102
            body: JSON.stringify(purchaseOptionsInput),
 103
          });
 104
 105
          data = (await response.json()).data;
 106
          const remoteErrors = data.sellingPlanGroupCreate.userErrors;
 107
          if (remoteErrors.length > 0) {
 108
            console.log("Errors", remoteErrors);
 109
            return { status: "fail", errors: remoteErrors };
 110
          }
 111
          navigate("/");
 112
          return { status: "success" };
 113
        },
 114
      });
 115
 116
      return (
 117
        <Page
 118
          title="Create Deferred Purchase Option"
 119
          primaryAction={{
 120
            content: "Save",
 121
            onAction: submit,
 122
            disabled: !dirty,
 123
            loading: submitting,
 124
          }}
 125
        >
 126
          <Layout>
 127
            <Layout.Section>
 128
              <form onSubmit={submit}>
 129
                <PurchaseOptionName
 130
                  purchaseOptionName={name.value}
 131
                  onChange={name.onChange}
 132
                />
 133
                <DepositSelection
 134
                  depositAmount={deposit.value}
 135
                  onChange={deposit.onChange}
 136
                />
 137
                {deposit.value != 100 && (
 138
                  <RemainingBalanceCharge
 139
                    remainBalanceChargeDate={remainingBalanceChargeExactTime.value}
 140
                    onChange={remainingBalanceChargeExactTime.onChange}
 141
                  />
 142
                )}
 143
                <FulfillmentSelection
 144
                  fulfillmentTrigger={fulfillmentTrigger.value}
 145
                  onTypeChange={fulfillmentTrigger.onChange}
 146
                />
 147
                <InventoryReserve
 148
                  inventoryReservation={inventoryReserve.value}
 149
                  onChange={inventoryReserve.onChange}
 150
                />
 151
                <ProductsSelection
 152
                  productsList={productIds.value}
 153
                  onChange={productIds.onChange}
 154
                />
 155
                <Stack distribution="trailing"></Stack>
 156
              </form>
 157
            </Layout.Section>
 158
            <Layout.Section>
 159
              <PageActions
 160
                primaryAction={{
 161
                  content: "Save deferred purchase option",
 162
                  onAction: submit,
 163
                  disabled: !dirty,
 164
                  loading: submitting,
 165
                }}
 166
                secondaryActions={[
 167
                  {
 168
                    content: "Discard",
 169
                    onAction: () => {
 170
                      navigate("/");
 171
                    },
 172
                  },
 173
                ]}
 174
              />
 175
            </Layout.Section>
 176
          </Layout>
 177
        </Page>
 178
      );
 179
    }
 Step 4: Add API endpoint to create purchase options
 Next we will define a new API endpoint that will be called in the previous step to create deferred purchase options. The API endpoint in our app will call the Shopify GraphQL Admin API. Open the app server file found in web/index.js;
 Add the GraphQL mutation for creating a deferred purchase option to the file after const app = express();. This mutation will take the data from the form and call the Shopify GraphQL Admin API to create a deferred purchase option.
 web/index.js
 1 const CREATE_DEFERRED_PURCHASE_MUTATION = `
 2 mutation sellingPlanGroupCreate($input: SellingPlanGroupInput!) {
 3
    sellingPlanGroupCreate(input: $input) {
 4
      sellingPlanGroup {
 5
        id
 6
      }
 7
      userErrors {
 8
        field
 9
        message
 10
      }
 11
    }
 12 }`;
 Add a new route to the app server to handle the API request. This route will call the GraphQL mutation to create the deferred purchase option. Add this code after the app.use(express.json()); line.
 web/index.jsx
 1 app.post("/api/deferred-purchase/create", async (req, res) => {
 2
    const client = new shopify.api.clients.Graphql({
 3
      session: res.locals.shopify.session,
 4
    });
 5
 6
    const data = await client.query({
 7
      data: {
 8
        query: CREATE_DEFERRED_PURCHASE_MUTATION,
 9
        variables: req.body,
 10
      },
 11
    });
 12
 13
    res.send(data.body);
 14 });
 Step 5: Add UI for listing purchase options
 Next you will update the app home page UI to display the created deferred purchase options.
 In the web/frontend/pages folder, update index.jsx with the following code:
 web/frontend/pages/index.jsx
 1 import { useState } from "react";
 2 import { useNavigate, TitleBar, Loading } from "@shopify/app-bridge-react";
 3 import {
 4
    Card,
 5
    EmptyState,
 6
    Layout,
 7
    Page,
 8
    SkeletonBodyText,
 9
    DataTable,
 10 } from "@shopify/polaris";
 11 import { useAppQuery } from "../hooks";
 12
 13 export default function HomePage() {
 14
    /*
 15
      Add an App Bridge useNavigate hook to set up the navigate function.
 16
      This function modifies the top-level browser URL so that you can
 17
      navigate within the embedded app and keep the browser in sync on reload.
 18
    */
 19
    const [isLoading, setIsLoading] = useState(true);
 20
 21
    const navigate = useNavigate();
 22
    const { data } = useAppQuery({
 23
      url: "/api/deferred-purchase",
 24
      reactQueryOptions: {
 25
        onSuccess: () => {
 26
          setIsLoading(false);
 27
        },
 28
      },
 29
    });
 30
 31
    const purchaseOptions = data
 32
      ? data.data.sellingPlanGroups.edges.map((group) => {
 33
          return [
 34
            group.node.name,
 35
            group.node.summary,
 36
            group.node.productCount,
 37
            group.node.createdAt,
 38
          ];
 39
        })
 40
      : [];
 41
 42
    console.log(data, "data");
 43
 44
    /* loadingMarkup uses the loading component from AppBridge and components from Polaris  */
 45
    const loadingMarkup = isLoading ? (
 46
      <Card sectioned>
 47
        <Loading />
 48
        <SkeletonBodyText />
 49
      </Card>
 50
    ) : null;
 51
 52
    /* Use Polaris Card and EmptyState components to define the contents of the empty state */
 53
    const emptyStateMarkup =
 54
      !isLoading && !purchaseOptions?.length ? (
 55
        <Card sectioned>
 56
          <EmptyState
 57
            heading="Create deferred purchase options"
 58
            /* This button will take the user to a create a purchase option page */
 59
            action={{
 60
              content: "Create Purchase Option",
 61
              onAction: () => navigate("/purchaseOptions/new"),
 62
            }}
 63
            image="https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png"
 64
          >
 65
            <p>
 66
              {" "}
 67
              Deferred purchase options enable customers to purchase products with
 68
              deferred payments or deliveries
 69
            </p>
 70
          </EmptyState>
 71
        </Card>
 72
      ) : (
 73
         /* Use Polaris DataTable component to display the purchase options */
 74
        <Card>
 75
          <DataTable
 76
            columnContentTypes={["text", "text", "numeric", "text"]}
 77
            headings={["Name", "Summary", "Product Count", "Created At"]}
 78
            rows={purchaseOptions}
 79
          ></DataTable>
 80
        </Card>
 81
      );
 82
 83
    /*
 84
      Use Polaris Page and TitleBar components to create the page layout,
 85
      and include the empty state contents set above.
 86
    */
 87
    return (
 88
      <Page>
 89
        <TitleBar
 90
          title="Deferred Purchase"
 91
          primaryAction={{
 92
            content: "Create Purchase Option",
 93
            onAction: () => navigate("/purchaseOptions/new"),
 94
          }}
 95
        />
 96
        <Layout>
 97
          <Layout.Section>
 98
            {loadingMarkup}
 99
            {emptyStateMarkup}
 100
          </Layout.Section>
 101
        </Layout>
 102
      </Page>
 103
    );
 104 }
 Step 6: Add API endpoint for listing purchase options
 Now you will add an API endpoint to the app server to retrieve the deferred purchase options. This endpoint will call the Shopify GraphQL Admin API to retrieve previously created deferred purchase options.
 Navigate to the web/index.js. Add the following GraphQL query to list the deferred purchase options, after the previous GraphQL mutation.
 web/index.js
 1 const GET_DEFERRED_PURCHASES_QUERY = `
 2 query SellingPlanGroupsList {
 3
    sellingPlanGroups(first: 10) {
 4
      edges {
 5
        cursor
 6
        node {
 7
          id
 8
          name
 9
          createdAt
 10
          productCount
 11
          summary
 12
        }
 16 `;
 Add a new route for listing the purchase options, after the previously added route.
 web/index.js
 1 app.get("/api/deferred-purchase", async (req, res) => {
 2
    const client = new shopify.api.clients.Graphql({
 3
      session: res.locals.shopify.session,
 4 });
 5
 6 const data = await client.query({
 7
    data: {
 8
      query: GET_DEFERRED_PURCHASES_QUERY,
 9
    }
 10 });
 11 res.send(data.body);
 12 });
 Step 7: Test your app
 Create a deferred purchase option in your app to test if the app works as expected.
 On the homepage, click Create purchase options.
 In the Deferred purchase option section, set the name for the deferred purchase option.
 In the Deposit section, from the dropdown list, select the deposit amount.
 In the Remaining balance charge date section, select the date.
 In the Fulfillment section, select when to fulfill the order.
 In the Inventory section, select when to update the inventory.
 Click Select products, and add products that will have the deferred purchase option.
 Click Create.
 The app redirects you to the homepage. The homepage displays the deferred purchase option that you created.
 Next steps
 Learn more about creating and managing deferred purchase options.
 Learn more about delivery profiles to define shipping rates and delivery destinations for orders with purchase options.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Define constants
 Step 2: Create app components
 Step 3: Add UI for creating purchase options
 Step 4: Add API endpoint to create purchase options
 Step 5: Add UI for listing purchase options
 Step 6: Add API endpoint for listing purchase options
 Step 7: Test your app
 Next steps
 Updates & News
 Developer changelog
 Partner blog
