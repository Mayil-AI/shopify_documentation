Billing
 App Store
 Save a connected wallet to session storage
 This is the second part of a tutorial series for building a tokengated storefront. Read the overview and Getting started tutorial before starting this tutorial.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Add server-side wallet storage functionality.
 Add an action function to your index route for processing dispatched events.
 Update your Layout component to submit a payload to the index route's action when a wallet connects.
 Step 1: Create wallet cookie session storage
 In this step, you'll add code to create a cookie-based session that stores connected wallet information in the cookie. This information will be used by your storefront's actions and loaders.
 For more information on the technology used in this step, reference the links below.
 createCookieSessionStorage.
 cookies
 cookie attributes
 In your project's /app/lib folder, create a new file called wallet.server.js, or wallet.server.ts if you're using TypeScript.
 Add the following code:
 File
 JavaScript
 TypeScript
 /app/lib/wallet.server.js
 1 import {createCookieSessionStorage} from '@shopify/remix-oxygen';
 2
 3 const sessionSecret = process.env.SESSION_SECRET ?? 'DEFAULT_SECRET';
 4
 5 const walletStorage = createCookieSessionStorage({
 6
    cookie: {
 7
      name: 'wallet_cookie',
 8
      secure: true,
 9
      secrets: [sessionSecret],
 10
      sameSite: 'lax',
 11
      path: '/',
 12
      httpOnly: true,
 13
    },
 14 });
 15
 16 /**
 17
   * Validate that all required fields for running verifyMessage are present.
 18 * This means the inclusion of: address, message, and signature.
 19 *
 20 * [`verifyMessage` documentation](https://viem.sh/docs/utilities/verifyMessage.html)
 21 */
 22 export function isWallet(value) {
 23
    return (
 24
      typeof value === 'object' &&
 25
      value !== null &&
 26
      'address' in value &&
 27
      'message' in value &&
 28
      'signature' in value
 29
    );
 30 }
 31
 32 export async function walletSession(request) {
 33
    const session = await walletStorage.getSession(request.headers.get('Cookie'));
 34
 35
    return {
 36
      clear: () => session.unset('wallet'),
 37
      commit: () => walletStorage.commitSession(session),
 38
      getWallet: () => {
 39
        const walletCookie = session.get('wallet');
 40
        return isWallet(walletCookie) ? walletCookie : undefined;
 41
      },
 42
      setWallet: (wallet) => session.set('wallet', wallet),
 43
    };
 44 }
 Step 2: Handle wallet connection events
 Next, you will make changes to your ($locale)._index JSX or TSX file to add an action function which will run when the onConnect and onDisconnect callbacks from @shopify/connect-wallet.
 Open your ($locale)._index JSX or TSX file.
 Copy the following import statements into your file:
 File
 JavaScript
 TypeScript
 /app/routes/($locale)._index.jsx
 1 import {verifyMessage} from 'viem';
 Add the following action function:
 File
 JavaScript
 TypeScript
 /app/routes/($locale)._index.jsx
 1 export async function action({context, request}) {
 2
    const {clear, commit, setWallet} = await walletSession(request);
 3
    const stringifiedWallet = (await request.formData()).get('wallet');
 4
 5
    async function clearFunction() {
 6
      clear();
 7
 8
      return json(
 9
        {revalidate: true},
 10
        {
 11
          headers: {
 12
            'Set-Cookie': await commit(),
 13
          },
 14
        },
 15
      );
 16
    }
 17
 18
    if (!stringifiedWallet) {
 19
      return await clearFunction();
 20
    }
 21
 22
    const wallet = JSON.parse(stringifiedWallet);
 23
 24
    // Ensure that the wallet provided is a valid wallet type
 25
    if (!isWallet(wallet)) {
 26
      return await clearFunction();
 27
    }
 28
 29
    /**
 30
     * While the `@shopify/connect-wallet` package does verify the signature before
 31
      * adding it to the state and providing it back to the application, it's still
 32
      * good to ensure that wallets submitted to this action route are sanitized.
 33
      *
 34
      * [`verifyMessage` documentation](https://viem.sh/docs/utilities/verifyMessage.html)
 35
      */
 36
    const valid = await verifyMessage({
 37
      address: wallet.address,
 38
      message: wallet.message!,
 39
      signature: wallet.signature!,
 40
    });
 41
 42
    if (!valid) {
 43
      throw json(
 44
        {message: 'Invalid authentication data provided.'},
 45
        {status: 401},
 46
      );
 47
    }
 48
 49
    setWallet(wallet);
 50
 51
    return json(
 52
      {},
 53
      {
 54
        headers: {
 55
          'Set-Cookie': await commit(),
 56
        },
 57
      },
 58
    );
 59 }
 Step 3: Use the index action in connect-wallet callbacks
 In this step, you'll modify your Layout component to send the connected wallet data to the action function that you created in the previous step.
 One advantage to storing the wallet in a cookie is that your storefront can load and assess whether a gate is unlocked, or should be, before the client hydration. This means that your customer knows immediately if they meet the criteria for a product if their wallet is already connected.
 In your /app/components/Layout JSX or TSX file, add the following import statements:
 1 import {useParams, Form, Await, useMatches, useFetcher} from '@remix-run/react';
 2 import {useConnectWallet} from '@shopify/connect-wallet';
 Add fetcher and connect-wallet callbacks.
 In this step, you'll use the useFetcher Remix hook to create a method of submitting data to your index route, and useConnectWallet to create the callbacks that run when a wallet is either connected or disconnected.
 Copy the following code. Add it into your /app/components/Layout JSX or TSX file at the top of the Layout function:
 1 const fetcher = useFetcher();
 2
 3 useConnectWallet({
 4
    onConnect: (wallet) => {
 5
      fetcher.submit({wallet: JSON.stringify(wallet)}, {method: 'post'});
 6
    },
 7
    onDisconnect: () => {
 8
      fetcher.submit({wallet: ''}, {method: 'post'});
 9
    },
 10 });
 /app/components/Layout.jsx
 Before
 1 export function Layout({children, layout}) {
 2
    return (
 3
      <>
 4
        <div className="flex flex-col min-h-screen">
 5
          <div className="">
 6
            <a href="#mainContent" className="sr-only">
 7
              Skip to content
 8
            </a>
 9
          </div>
 10
          <Header
 11
            title={layout?.shop.name ?? 'Hydrogen'}
 12
            menu={layout?.headerMenu}
 13
          />
 14
          <main role="main" id="mainContent" className="flex-grow">
 15
            {children}
 16
          </main>
 17
        </div>
 18
        <Footer menu={layout?.footerMenu} />
 19
      </>
 20
    );
 21 }
 After
 1 export function Layout({children, layout}) {
 2
    const fetcher = useFetcher();
 3
 4
    useConnectWallet({
 5
      onConnect: (wallet) => {
 6
        fetcher.submit({wallet: JSON.stringify(wallet)}, {method: 'post'});
 7
      },
 8
      onDisconnect: () => {
 9
        fetcher.submit({wallet: ''}, {method: 'post'});
 10
      },
 11
    });
 12
 13
    return (
 14
      <>
 15
        <div className="flex flex-col min-h-screen">
 16
          <div className="">
 17
            <a href="#mainContent" className="sr-only">
 18
              Skip to content
 19
            </a>
 20
          </div>
 21
          <Header
 22
            title={layout?.shop.name ?? 'Hydrogen'}
 23
            menu={layout?.headerMenu}
 24
          />
 25
          <main role="main" id="mainContent" className="flex-grow">
 26
            {children}
 27
          </main>
 28
        </div>
 29
        <Footer menu={layout?.footerMenu} />
 30
      </>
 31
    );
 32 }
 Step 4: Read the context value in a loader
 Next, you'll add additional functionality to your loader function in the $productHandle route to retrieve the stored wallet value.
 Open your /app/routes/($locale).products.$productHandle JSX or TSX file
 Copy the following import statements into your file:
 1 import {ConnectButton} from '@shopify/connect-wallet';
 2
 3 import {walletSession} from '~/lib/wallet.server';
 Locate the ProductForm function and add the <ConnectButton /> component anywhere in the return statement.
 Copy the following code into the loader function:
 1 const {getWallet} = await walletSession(request);
 2 const wallet = getWallet();
 3
 4 const message = wallet
 5
    ? `Wallet connected with address: ${wallet.address}`
 6
    : 'No wallet present in the session.';
 7
 8 console.log(message);
 /app/routes/($locale).products.$productHandle.jsx
 Before
 1 export async function loader({params, request, context}) {
 2
    const {productHandle} = params;
 3
    invariant(productHandle, 'Missing productHandle param, check route filename');
 4
 5
    const searchParams = new URL(request.url).searchParams;
 6
 7
    const selectedOptions = [];
 8
    searchParams.forEach((value, name) => {
 9
      selectedOptions.push({name, value});
 10
    });
 11
 12
    const {shop, product} = await context.storefront.query(PRODUCT_QUERY, {
 13
      variables: {
 14
        handle: productHandle,
 15
        selectedOptions,
 16
        country: context.storefront.i18n.country,
 17
        language: context.storefront.i18n.language,
 18
      },
 19
    });
 20
 21
    if (!product?.id) {
 22
      throw new Response('product', {status: 404});
 23
    }
 24
 25
    const recommended = getRecommendedProducts(context.storefront, product.id);
 26
    const firstVariant = product.variants.nodes[0];
 27
    const selectedVariant = product.selectedVariant ?? firstVariant;
 28
 29
    const productAnalytics = {
 30
      productGid: product.id,
 31
      variantGid: selectedVariant.id,
 32
      name: product.title,
 33
      variantName: selectedVariant.title,
 34
      brand: product.vendor,
 35
      price: selectedVariant.price.amount,
 36
    };
 37
 38
    const seo = seoPayload.product({
 39
      product,
 40
      selectedVariant,
 41
      url: request.url,
 42
    });
 43
 44
    return defer({
 45
      product,
 46
      shop,
 47
      storeDomain: shop.primaryDomain.url,
 48
      recommended,
 49
      analytics: {
 50
        pageType: AnalyticsPageType.product,
 51
        resourceId: product.id,
 52
        products: [productAnalytics],
 53
        totalValue: parseFloat(selectedVariant.price.amount),
 54
      },
 55
      seo,
 56
    });
 57 }
 After
 1 export async function loader({params, request, context}) {
 2
    const {getWallet} = await walletSession(request);
 3
    const wallet = getWallet();
 4
 5
    const message = wallet
 6
      ? `Wallet connected with address: ${wallet.address}`
 7
      : 'No wallet present in the session.';
 8
 9
    console.log(message);
 10
 11
    const {productHandle} = params;
 12
    invariant(productHandle, 'Missing productHandle param, check route filename');
 13
 14
    const searchParams = new URL(request.url).searchParams;
 15
 16
    const selectedOptions = [];
 17
    searchParams.forEach((value, name) => {
 18
      selectedOptions.push({name, value});
 19
    });
 20
 21
    const {shop, product} = await context.storefront.query(PRODUCT_QUERY, {
 22
      variables: {
 23
        handle: productHandle,
 24
        selectedOptions,
 25
        country: context.storefront.i18n.country,
 26
        language: context.storefront.i18n.language,
 27
      },
 28
    });
 29
 30
    if (!product?.id) {
 31
      throw new Response('product', {status: 404});
 32
    }
 33
 34
    const recommended = getRecommendedProducts(context.storefront, product.id);
 35
    const firstVariant = product.variants.nodes[0];
 36
    const selectedVariant = product.selectedVariant ?? firstVariant;
 37
 38
    const productAnalytics = {
 39
      productGid: product.id,
 40
      variantGid: selectedVariant.id,
 41
      name: product.title,
 42
      variantName: selectedVariant.title,
 43
      brand: product.vendor,
 44
      price: selectedVariant.price.amount,
 45
    };
 46
 47
    const seo = seoPayload.product({
 48
      product,
 49
      selectedVariant,
 50
      url: request.url,
 51
    });
 52
 53
    return defer({
 54
      product,
 55
      shop,
 56
      storeDomain: shop.primaryDomain.url,
 57
      recommended,
 58
      analytics: {
 59
        pageType: AnalyticsPageType.product,
 60
        resourceId: product.id,
 61
        products: [productAnalytics],
 62
        totalValue: parseFloat(selectedVariant.price.amount),
 63
      },
 64
      seo,
 65
    });
 66 }
 Connect and disconnect your wallet to test out the session storage implementation.
 When you connect and disconnect your wallet, you should see the following messages logged to your console.
 Terminal
 Connected
 Disconnected
 $ POST  200  action  / [($locale)._index]
 $ Wallet connected with address: 0x123
 Next steps
 Read and evaluate gates
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Step 1: Create wallet cookie session storage
 Step 2: Handle wallet connection events
 Step 3: Use the index action in connect-wallet callbacks
 Step 4: Read the context value in a loader
 Next steps
 Updates & News
 Developer changelog
