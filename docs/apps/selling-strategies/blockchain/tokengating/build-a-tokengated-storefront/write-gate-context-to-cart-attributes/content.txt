Billing
 App Store
 Write gate context to cart attributes
 This is the fourth and final part of a tutorial series for building a tokengated storefront. Read the overview page before starting this tutorial.
 In this tutorial, you'll create a function that generates a hash-based message authentication code (HMAC). The HMAC you create will be an encrypted version of the gateConfiguration.id that your customer has unlocking tokens for. With this, you can leverage Shopify Functions at checkout to apply automatic discounts
 What you'll learn
 In this tutorial, you'll learn how to do the following:
 Generate an HMAC using SubtleCrypto from the Web Crypto API.
 Write the generated HMAC to cart attributes in a stringified array to allow your customers to unlock many gates.
 Requirements
 A Shopify Function that applies automatic discounts to the cart. Refer to the creating a Shopify Function to apply the gated discount tutorial.
 You have followed the previous tutorials in this series:
 Getting started
 Save a connected wallet to session storage
 Read and evaluate gates
 Note
 While you can still complete this tutorial without a Shopify Function, you won't have the full end-to-end functionality that applies discounts at checkout based on cart attributes.
 Step 1: Generate an HMAC
 In the last tutorial, you created an evaluateGate.server JS or TS file to perform gate evaluation.
 In that same file, you'll add additional functionality to the evaluateGate function to create an HMAC when unlockingTokens are present for a given gateConfiguration.
 Add a new environment variable named SHOPIFY_FUNCTION_SECRET to your ENV file. The value should match the secret defined in the Shopify Function you built for applying automatic discounts.
 At this point, your .env file should look similar to the one shown below:
 .env
 1 ALCHEMY_API_KEY="YOUR_ALCHEMY_API_KEY"
 2 SESSION_SECRET="YOUR_SESSION_SECRET"
 3 SHOPIFY_FUNCTION_SECRET="YOUR_FUNCTION_SECRET"
 4 PUBLIC_STOREFRONT_API_TOKEN="YOUR_API_TOKEN"
 5 PUBLIC_STOREFRONT_API_VERSION="unstable"
 6 PUBLIC_STORE_DOMAIN="YOUR_STOREFRONT_DOMAIN"
 Open your evaluateGate.server JS or TS file.
 Add the following code to the bottom of the file:
 File
 JavaScript
 TypeScript
 /app/lib/evaluateGate.server.js
 1 async function generateHMAC(payload, secret) {
 2
    const encoder = new TextEncoder();
 3
    const key = await crypto.subtle.importKey(
 4
      'raw',
 5
      encoder.encode(secret),
 6
      {
 7
        name: 'HMAC',
 8
        hash: {
 9
          name: 'SHA-256',
 10
        },
 11
      },
 12
      false,
 13
      ['sign', 'verify'],
 14
    );
 15
 16
    const signature = await crypto.subtle.sign(
 17
      'HMAC',
 18
      key,
 19
      encoder.encode(payload),
 20
    );
 21
 22
    const hashArray = new Uint8Array(signature);
 23
 24
    const digestArray = [...hashArray];
 25
    const digest = digestArray
 26
      .map((byte) => byte.toString(16).padStart(2, '0'))
 27
      .join('');
 28
 29
    return digest;
 30 }
 Update the evaluateGate function by pasting the following code just below the unlockingTokens variable:
 /app/lib/evaluateGate.server.js
 1 const hmac = await generateHMAC(
 2
    gateConfiguration.id,
 3
    context.env.SHOPIFY_FUNCTION_SECRET,
 4 );
 Add a gateContext object to the evaluateGate function's return statement.
 /app/lib/evaluateGate.server.js
 1 return {
 2
    gateContext: {
 3
      id: gateConfiguration.id,
 4
      hmac,
 5
    },
 6
    unlockingTokens,
 7 };
 Add the GateContext type (TypeScript only).
 Copy the following type definition into your /app/lib/type.ts file:
 /app/lib/evaluateGate.server.ts
 1 type GateContext = {
 2
    id: string;
 3
    hmac: string;
 4 };
 Update the EvaluateGateResponse type to include the GateContext type (TypeScript only).
 In your evaluateGate.server JS or TS file, update your EvaluateGateResponse to include the GateContext type you just created by replacing your EvaluateGateResponse with the following code:
 /app/lib/evaluateGate.server.ts
 1 type EvaluateGateResponse = {
 2
    gateContext?: GateContext;
 3
    unlockingTokens: UnlockingToken[];
 4 };
 To see a representation of what your code might look like after following these steps, view the sample repository.
 Step 2: Write the generated HMAC to cart attributes
 Now that you've written the functionality to generate the HMAC, you need to write this HMAC to the cart attributes.
 To do this, you'll add logic to the loader function defined in the $productHandle route.
 This function checks if a cart is present before writing the attributes. If a cart is present, then it mutates the attributes for the cart. If a cart isn't present, the function creates a new cart and updates the cart cookie.
 Add cart attributes functions
 The code in this file contains the business logic associated with creating and updating cart attributes.
 In your project's /app/lib folder, create a new file called attributes.server.js, or attributes.server.ts if you're using TypeScript.
 Add the following code:
 File
 JavaScript
 TypeScript
 /app/lib/attributes.server.js
 1 import invariant from 'tiny-invariant';
 2
 3 import {getCart} from '~/root';
 4 import {cartCreate} from '~/routes/($locale).cart';
 5
 6 import {getCartId} from './utils';
 7
 8 /**
 9
   * This function is responsible for clearing the attributes inside
 10 * of the cart that are used by the Shopify Function to allow the
 11 * checkout to proceed.
 12 *
 13 * Without this function, your cart attributes will remain in the
 14 * cart, meaning that gates which are no longer unlocked will be
 15 * seen as unlocked by your Shopify Function.
 16 */
 17 export async function clearContextAttributes({context, request}) {
 18
    const cartId = getCartId(request);
 19
 20
    if (!cartId) {
 21
      return;
 22
    }
 23
 24
    const cart = await getCart(context, cartId);
 25
 26
    // Filter out any attributes which have the same key as the context-storing attribute.
 27
    const filteredAttributes =
 28
      cart?.attributes.filter(
 29
        (attribute) => attribute.key !== '_shopify_gate_context',
 30
      ) || [];
 31
 32
    const attributes = [
 33
      ...filteredAttributes,
 34
      {key: '_shopify_gate_context', value: JSON.stringify([])},
 35
    ];
 36
 37
    await updateCartAttributes({
 38
      attributes,
 39
      cartId,
 40
      storefront: context.storefront,
 41
    });
 42 }
 43
 44 export async function writeContextToAttributes({
 45
    context,
 46
    gateContext,
 47
    request,
 48 }) {
 49
    const cartId = getCartId(request);
 50
 51
    const createEmptyCartWithAttributes = async () => {
 52
      const {cart, errors} = await cartCreate({
 53
        input: {
 54
          attributes: [
 55
            {
 56
              key: '_shopify_gate_context',
 57
              /**
 58
               * We'll store a stringified array of GateContext objects as the
 59
              * value so we can allow multiple gates to be passed at once.
 60
              *
 61
              * If you don't want that behavior, you can change the
 62
              * implementation below by setting value to the hmac.
 63
              */
 64
              value: JSON.stringify([gateContext]),
 65
            },
 66
          ],
 67
        },
 68
        storefront: context.storefront,
 69
      });
 70
 71
      if (errors?.length || !cart) {
 72
        throw new Error(
 73
          'Failed to create cart while attempting to write gateContext to cart attributes.',
 74
        );
 75
      }
 76
 77
      // Return the Cart's GID.
 78
      // This is used for the cart cookie.
 79
      return cart.id;
 80
    };
 81
 82
    if (!cartId) {
 83
      return await createEmptyCartWithAttributes();
 84
    }
 85
 86
    /**
 87
     * When a cartId is present, fetch the cart and check for existing gate context
 88
    * values that need to be deduped and/or merged, and then update the cart.
 89
    */
 90
    const cart = await getCart(context, cartId);
 91
 92
    if (!cart) {
 93
      // Despite having a cartId, a cart was not returned from the getCart query.
 94
      return await createEmptyCartWithAttributes();
 95
    }
 96
 97
    /**
 98
     * Create a new Map to store the gateConfiguration.id and HMAC value in.
 99
    *
 100
    * Map is a Javascript object that stores unique key-value pairs, meaning that
 101
    * any addition of an HMAC to an ID already present will not result in multiple
 102
    * instances of the context value being present.
 103
    */
 104
    const hmacMap = new Map();
 105
    const contextValue = [];
 106
 107
    // Add the current gateContext value to the hmacMap as it might not have been added yet.
 108
    hmacMap.set(gateContext.id, gateContext.hmac);
 109
 110
    cart.attributes
 111
      .filter(({key}) => key === '_shopify_gate_context')
 112
      .forEach(({value}) => {
 113
        // Since the gate value for this attribute is a stringified array of HMACs
 114
        // we will parse the value if present or create an empty array.
 115
        const existingValue = value ? JSON.parse(value) : [];
 116
 117
        existingValue.forEach(({id, hmac}) => hmacMap.set(id, hmac));
 118
      });
 119
 120
    // Loop over the hmacMap and insert the context value into the contextValue.
 121
    hmacMap.forEach((value, key) =>
 122
      contextValue.push({
 123
        id: key,
 124
        hmac: value,
 125
      }),
 126
    );
 127
 128
    const attributes = [
 129
      {
 130
        key: '_shopify_gate_context',
 131
        // Array.from is used here since Set is an iterable object.
 132
        value: JSON.stringify(contextValue),
 133
      },
 134
    ];
 135
 136
    const {cart: updatedCart, errors} = await updateCartAttributes({
 137
      attributes,
 138
      cartId,
 139
      storefront: context.storefront,
 140
    });
 141
 142
    if (errors?.length || !updatedCart) {
 143
      throw new Error(
 144
        'Failed to update cart while attempting to write gateContext to cart attributes.',
 145
      );
 146
    }
 147
 148
    return cartId;
 149 }
 150
 151 const USER_ERROR_FRAGMENT = `#graphql
 152
    fragment ErrorFragment on CartUserError {
 153
      message
 154
      field
 155
      code
 156
    }
 157 `;
 158
 159 const ATTRIBUTES_CART_FRAGMENT = `#graphql
 160
    fragment CartAttributesFragment on Cart {
 161
      id
 162
      attributes {
 163
        key
 164
        value
 165
      }
 166
    }
 167 `;
 168
 169 const ATTRIBUTES_UPDATE_MUTATION = `#graphql
 170
    mutation ($cartId: ID!, $attributes: [AttributeInput!]!, $language: LanguageCode, $country: CountryCode)
 171
    @inContext(country: $country, language: $language) {
 172
      cartAttributesUpdate(cartId: $cartId, attributes: $attributes) {
 173
        cart {
 174
          ...CartAttributesFragment
 175
        }
 176
        errors: userErrors {
 177
          ...ErrorFragment
 178
        }
 179
      }
 180
    }
 181
    ${ATTRIBUTES_CART_FRAGMENT}
 182
    ${USER_ERROR_FRAGMENT}
 183 `;
 184
 185 /**
 186 * Update cart attribute mutation
 187 * @param cartId the current cart id
 188 * @param attributes [Attribute!]! an array of cart attributes to update
 189 */
 190 export async function updateCartAttributes({attributes, cartId, storefront}) {
 191
    const {cartAttributesUpdate} = await storefront.mutate(
 192
      ATTRIBUTES_UPDATE_MUTATION,
 193
      {
 194
        variables: {attributes, cartId},
 195
      },
 196
    );
 197
 198
    invariant(
 199
      cartAttributesUpdate,
 200
      'No data returned from update attributes mutation',
 201
    );
 202
 203
    return cartAttributesUpdate;
 204 }
 Run cart attribute mutations
 With the added functions from your attributes.server JS or TS file, you'll update your loader to write gateContext values returned from evaluateGate to the cart attributes.
 Open your /app/routes/($locale).products.$productHandle JSX or TSX file.
 Add the following code to the top of the loader function:
 1 const headers = new Headers();
 This will be the headers for the returned response from the loader. Using these headers, you'll set the cart ID in the response to ensure that there is only one cart for the session.
 In the same file, add the following code below the unlockingTokens assignment:
 /app/routes/($locale).products.$productHandle.jsx
 1 if (gateEvaluation.gateContext?.hmac) {
 2
    try {
 3
      const id = await writeContextToAttributes({
 4
        context,
 5
        gateContext: gateEvaluation.gateContext,
 6
        request,
 7
      });
 8
 9
      // Set the cart cookie to the id returned from writeContextToAttributes
 10
      responseHeaders.append(
 11
        'Set-Cookie',
 12
        `cart=${id.split('/').pop()};path=/`,
 13
      );
 14
    } catch (error) {
 15
      // eslint-disable-next-line no-console
 16
      console.error(error);
 17
 18
      throw new Response(
 19
        'Error caught while attempting to write context to cart attributes.',
 20
        {
 21
          status: 410,
 22
        },
 23
      );
 24
    }
 25 }
 /app/routes/($locale).products.$productHandle.jsx
 Before
 1 export async function loader({params, request, context}) {
 2
    const {getWallet} = await walletSession(request);
 3
    const wallet = getWallet();
 4
 5
    const message = wallet
 6
      ? `Wallet connected with address: ${wallet.address}`
 7
      : 'No wallet present in the session.';
 8
 9
    console.log(message);
 10
 11
    const {productHandle} = params;
 12
    invariant(productHandle, 'Missing productHandle param, check route filename');
 13
 14
    const searchParams = new URL(request.url).searchParams;
 15
 16
    const selectedOptions = [];
 17
    searchParams.forEach((value, name) => {
 18
      selectedOptions.push({name, value});
 19
    });
 20
 21
    const {shop, product} = await context.storefront.query(PRODUCT_QUERY, {
 22
      variables: {
 23
        handle: productHandle,
 24
        selectedOptions,
 25
        country: context.storefront.i18n.country,
 26
        language: context.storefront.i18n.language,
 27
      },
 28
    });
 29
 30
    if (!product?.id) {
 31
      throw new Response('product', {status: 404});
 32
    }
 33
 34
    const gates = product.gates.filter(({active}) => active);
 35
 36
    const gateConfiguration = gates.length ? gates[0].configuration : undefined;
 37
 38
    let unlockingTokens = [];
 39
 40
    if (gateConfiguration) {
 41
      const gateEvaluation = await evaluateGate({
 42
        context,
 43
        gateConfiguration,
 44
        wallet,
 45
      });
 46
 47
      unlockingTokens = gateEvaluation.unlockingTokens;
 48
    }
 49
 50
    const recommended = getRecommendedProducts(context.storefront, product.id);
 51
    const firstVariant = product.variants.nodes[0];
 52
    const selectedVariant = product.selectedVariant ?? firstVariant;
 53
 54
    const productAnalytics = {
 55
      productGid: product.id,
 56
      variantGid: selectedVariant.id,
 57
      name: product.title,
 58
      variantName: selectedVariant.title,
 59
      brand: product.vendor,
 60
      price: selectedVariant.price.amount,
 61
    };
 62
 63
    const seo = seoPayload.product({
 64
      product,
 65
      selectedVariant,
 66
      url: request.url,
 67
    });
 68
 69
    return defer({
 70
      product,
 71
      gateConfiguration,
 72
      unlockingTokens,
 73
      wallet,
 74
      shop,
 75
      storeDomain: shop.primaryDomain.url,
 76
      recommended,
 77
      analytics: {
 78
        pageType: AnalyticsPageType.product,
 79
        resourceId: product.id,
 80
        products: [productAnalytics],
 81
        totalValue: parseFloat(selectedVariant.price.amount),
 82
      },
 83
      seo,
 84
    });
 85 }
 After
 1 export async function loader({params, request, context}) {
 2
    const headers = new Headers();
 3
 4
    const {getWallet} = await walletSession(request);
 5
    const wallet = getWallet();
 6
 7
    const {productHandle} = params;
 8
    invariant(productHandle, 'Missing productHandle param, check route filename');
 9
 10
    const searchParams = new URL(request.url).searchParams;
 11
 12
    const selectedOptions = [];
 13
    searchParams.forEach((value, name) => {
 14
      selectedOptions.push({name, value});
 15
    });
 16
 17
    const {shop, product} = await context.storefront.query(PRODUCT_QUERY, {
 18
      variables: {
 19
        handle: productHandle,
 20
        selectedOptions,
 21
        country: context.storefront.i18n.country,
 22
        language: context.storefront.i18n.language,
 23
      },
 24
    });
 25
 26
    if (!product?.id) {
 27
      throw new Response('product', {status: 404});
 28
    }
 29
 30
    const gates = product.gates.filter(({active}) => active);
 31
 32
    const gateConfiguration = gates.length ? gates[0].configuration : undefined;
 33
 34
    let unlockingTokens = [];
 35
 36
    if (gateConfiguration) {
 37
      const gateEvaluation = await evaluateGate({
 38
        context,
 39
        gateConfiguration,
 40
        wallet,
 41
      });
 42
 43
      unlockingTokens = gateEvaluation.unlockingTokens;
 44
 45
      if (gateEvaluation.gateContext?.hmac) {
 46
        try {
 47
          const id = await writeContextToAttributes({
 48
            context,
 49
            gateContext: gateEvaluation.gateContext,
 50
            request,
 51
          });
 52
 53
          // Set the cart cookie to the id returned from writeContextToAttributes
 54
          responseHeaders.append(
 55
            'Set-Cookie',
 56
            `cart=${id.split('/').pop()};path=/`,
 57
          );
 58
        } catch (error) {
 59
          // eslint-disable-next-line no-console
 60
          console.error(error);
 61
 62
          throw new Response(
 63
            'Error caught while attempting to write context to cart attributes.',
 64
            {
 65
              status: 410,
 66
            },
 67
          );
 68
        }
 69
      }
 70
    }
 71
 72
    const recommended = getRecommendedProducts(context.storefront, product.id);
 73
    const firstVariant = product.variants.nodes[0];
 74
    const selectedVariant = product.selectedVariant ?? firstVariant;
 75
 76
    const productAnalytics = {
 77
      productGid: product.id,
 78
      variantGid: selectedVariant.id,
 79
      name: product.title,
 80
      variantName: selectedVariant.title,
 81
      brand: product.vendor,
 82
      price: selectedVariant.price.amount,
 83
    };
 84
 85
    const seo = seoPayload.product({
 86
      product,
 87
      selectedVariant,
 88
      url: request.url,
 89
    });
 90
 91
    return defer(
 92
      {
 93
        product,
 94
        gateConfiguration,
 95
        unlockingTokens,
 96
        wallet,
 97
        shop,
 98
        storeDomain: shop.primaryDomain.url,
 99
        recommended,
 100
        analytics: {
 101
          pageType: AnalyticsPageType.product,
 102
          resourceId: product.id,
 103
          products: [productAnalytics],
 104
          totalValue: parseFloat(selectedVariant.price.amount),
 105
        },
 106
        seo,
 107
      },
 108
      {
 109
        headers,
 110
      },
 111
    );
 112 }
 Step 3: Handle disconnection events
 When a customer disconnects their wallet, clear the gateContext cart attributes. Doing this ensures that any gates which were previously unlocked are no longer unlocked.
 Open your /app/routes/($locale)._index.tsx file.
 Add the following import statement:
 1 import {clearContextAttributes} from '~/lib/attributes.server';
 Locate the clearFunction and add the following code just below the clear() invocation:
 1 await clearContextAttributes({context, request});
 /app/routes/($locale).products.$productHandle.jsx
 Before
 1 async function clearFunction() {
 2
    clear();
 3
 4
    return json(
 5
      {revalidate: true},
 6
      {
 7
        headers: {
 8
          'Set-Cookie': await commit(),
 9
        },
 10
      },
 11
    );
 12 }
 After
 1 async function clearFunction() {
 2
    clear();
 3
 4
    /**
 5
     * Clear any attributes on the cart to ensure that the cart no longer
 6
    * has any gate context that would unlock gates which should no longer
 7
    * be unlocked.
 8
    */
 9
    await clearContextAttributes({context, request});
 10
 11
    return json(
 12
      {revalidate: true},
 13
      {
 14
        headers: {
 15
          'Set-Cookie': await commit(),
 16
        },
 17
      },
 18
    );
 19 }
 Step 4: Test your storefront
 Your custom storefront now reads gates bound to products, parses the gate configurations for reactions and requirements, stores your buyer's wallet in cookies, evaluates their gate eligibility, and writes gate context to their cart.
 Test that your storefront is enforcing gates and applying automatic discounts using your Shopify Function by following these steps:
 Start your development server using the dev command:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run dev
 Open a product that has gates.
 You should see the Tokengate component with a list of requirements needed to unlock the discount.
 Connect a wallet that meets the unlocking criteria.
 Your Tokengate component should now show that the discount is unlocked.
 Add the product to your cart.
 Your cart should reflect the price of the item with the discount applied.
 Navigate to your checkout.
 Your discount should be applied to the product in your cart.
 Go back to your storefront and disconnect your wallet.
 The price for the item should update to reflect the non-discounted price.
 Resources
 Gated Hydrogen example
 Explore the example repository used to create this tutorial.
 Create a Shopify Function to apply the gated discount
 Apply exclusive discounts with Shopify Functions.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Generate an HMAC
 Step 2: Write the generated HMAC to cart attributes
 Step 3: Handle disconnection events
 Step 4: Test your storefront
 Resources
 Updates & News
 Developer changelog
 Partner blog
