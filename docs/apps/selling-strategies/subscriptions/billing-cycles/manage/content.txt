Billing cycles
 Overview
 Manage billing cycle contracts
 Combine billing cycle contracts
 Orders
 App Store
 Manage billing cycle contracts
 Billing cycle contracts inherit the contract lines, pricing policy, and delivery policy from the billing cycle's source subscription contract. However, you might want to edit the contract information on a billing cycle when you need to make a temporary change to a customer's subscription contract. For example, you might remove a product that's out of stock and replace it with a similar product for a single billing cycle.
 This tutorial shows you how to edit the contract information on a billing cycle.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Retrieve a draft of the most up-to-date contract information for a subscription billing cycle
 Remove a line item from the contract draft
 Add a line item to the contract draft
 Commit the edited contract information
 Fetch the edited contract information on a subscription billing cycle
 Create an order for a subscription billing cycle
 Requirements
 Note
 Most Subscriptions, Pre-order and Try before you buy (TBYB) apps need to request API access through the Partner Dashboard. We give API access to apps that are designed according to our principles for Subscriptions, Pre-order and TBYB apps.
 Public apps that use Subscriptions, Pre-order or TBYB need to meet specific requirements to be published on the Shopify App Store.
 Custom apps created in the Shopify admin can't use Subscriptions, Pre-order or TBYB because these apps can't use extensions or request access to protected scopes. If you're building a solution for a single store, then build your custom app in the Partner Dashboard.
 Your app can make authenticated requests to the GraphQL Admin API.
 Your app has the read_own_subscription_contracts and write_own_subscription_contracts access scopes. Learn how to configure your access scopes using Shopify CLI.
 You've created products and product variants in your development store.
 You've created an active subscription contract with a recurring billing and delivery policy.
 You've familiarized yourself with the concept of billing cycles.
 Step 1: Create a subscription draft
 You can use the subscriptionBillingCycleContractEdit mutation to create a subscription draft with the most up-to-date contract information on a specified billing cycle. Pass the contract ID and either the index or a date belonging to the billing cycle to specify the billing cycle.
 Make note of the subscription contract draft ID and line ID in the response. You'll use it to update the draft data in the next step.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    subscriptionBillingCycleContractEdit(
 3
      billingCycleInput: {
 4
        contractId: "gid://shopify/SubscriptionContract/123",
 5
        selector: { date: "2023-01-10T00:00:00Z" }
 6
      }
 7
    ) {
 8
      draft {
 9
        # Subscription draft fields
 10
        id
 11
        lines(first:10) {
 12
          edges {
 13
            node {
 14
              id
 15
            }
 16
          }
 17
        }
 18
        billingCycle {
 19
          cycleIndex
 20
        }
 21
      }
 22
      userErrors {
 23
        field
 24
        message
 25
      }
 26
    }
 27 }
 JSON response
 1 {
 2
    "data": {
 3
      "draft": {
 4
        "id": "gid://shopify/SubscriptionDraft/321",
 5
        "lines": {
 6
 9
                "id": "gid://shopify/SubscriptionLine/1"
 10
              }
 11
            }
 12
          ]
 13
        },
 14
        "billingCycle": {
 15
          "cycleIndex": 5
 16
        }
 17
      },
 18
      "userErrors": []
 19
    }
 20 }
 Step 2: Update the subscription draft
 Tip
 This step shows you how to remove or add a line item to the contract. However, you can make other updates to the subscription draft in this step as needed, such as adding a discount or changing the line quantity.
 After retrieving the draft ID, you can begin making edits to the contract draft. Edits to the contract draft can be made incrementally. Changes to the contract draft aren't made live until the draft is committed.
 Remove a line item
 You can pass the draft ID and line ID to the subscriptionDraftLineRemove mutation to remove a line item from the subscription draft:
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    subscriptionDraftLineRemove(
 3
      draftId: "gid://shopify/SubscriptionDraft/321"
 4
      lineId: "gid://shopify/SubscriptionLine/1"
 5
    ) {
 6
      draft {
 7
        # Subscription draft fields
 8
        id
 9
      }
 10
      lineRemoved {
 11
        # Subscription line fields
 12
        id
 13
      }
 14
      userErrors {
 15
        field
 16
        message
 17
      }
 18
    "data": {
 3
      "draft": {
 4
        "id": "gid://shopify/SubscriptionDraft/321"
 5
      },
 6
      "lineRemoved": {
 7
        "id": "gid://shopify/SubscriptionLine/1"
 8
      },
 9
      "userErrors": []
 10
    }
 11 }
 Add a line item
 You can pass the draft ID and line information to the subscriptionDraftLineAdd mutation to add a line item to the subscription draft:
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    subscriptionDraftLineAdd(
 3
      draftId: "gid://shopify/SubscriptionDraft/321"
 4
      input: {
 5
        currentPrice: 12.50
 6
        productVariantId: "gid://shopify/ProductVariant/11111"
 7
        quantity: 1
 8
      }
 9
    ) {
 10
      draft {
 11
        # Subscription draft fields
 12
        id
 13
      }
 14
      lineAdded {
 15
        # Subscription line fields
 16
        id
 17
      }
 18
      userErrors {
 19
        field
 20
        message
 21
      }
 22
    }
 23 }
 JSON response
 1 {
 2
    "data": {
 3
      "draft": {
 4
        "id": "gid://shopify/SubscriptionDraft/321"
 5
      },
 6
      "lineAdded": {
 7
        "id": "gid://shopify/SubscriptionLine/2"
 8
      },
 9
      "userErrors": []
 10
    }
 11 }
 Step 3: Commit the subscription draft
 When you commit the subscription draft, the changes that you've made become active on the billing cycle for which the draft was created. You can call the subscriptionDraft query to review the information on the subscription draft before committing it.
 After you're satisfied with your updates, you can call the subscriptionBillingCycleContractDraftCommit mutation to commit your changes to the billing cycle:
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    subscriptionBillingCycleContractDraftCommit(
 3
      draftId: "gid://shopify/SubscriptionDraft/321"
 4
    ) {
 5
      contract {
 6
        # Subscription billing cycle edited contract fields
 7
        billingCycles (first:10) {
 8
          edges { node { cycleIndex } }
 9
        }
 10
      }
 11
      userErrors {
 12
        field
 13
        message
 14
      }
 15
    }
 16 }
 JSON response
 1 {
 2
    "data": {
 3
      "contract": {
 4
        "edges": [
              "cycleIndex": 5
 8
            }
 9
          }
 10
        ]
 11
      },
 12
      "userErrors": []
 13
    }
 14 }
 Step 4: Fetch the edited contract
 After committing the subscription draft, you might want to fetch the information on your edited contract. You can do so using subscriptionBillingCycle query.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL query
 1 subscriptionBillingCycle(
 2
    billingCycleInput: {
 3
      contractId: "gid://shopify/SubscriptionContract/123",
 4
      selector: { index: 5 }
 5
    }
 6 ) {
 7
    subscriptionBillingCycle {
 8
      cycleIndex
 9
      editedContract {
 10
        # Subscription billing cycle edited contract fields
 11
        lines(first: 10) {
 12
          id
 13
          quantity
 14
          variantId
 15
        }
 16
      }
 17
    }
 18
    userErrors {
 19
      field
 20
      message
 21
    }
 22 }
 JSON response
 1 {
 2
    "data": {
 3
      "subscriptionBillingCycle": {
 4
        "editedContract": {
 5
           "cycleIndex": 5,
 6
           "lines": {
 7
             "edges": [
 8
              {
 9
                "node": {
 10
                  "id": "gid://shopify/SubscriptionLine/2",
 11
                  "variantId": "gid://shopify/ProductVariant/11111",
 12
                  "quantity": 1,
 13
                }
 14
              }
 15
            ]
 16
          }
 17
        }
 18
      },
 19
      "userErrors": []
 20
    }
 21 }
 Step 5: Create an order
 When the billing date comes, you can use subscriptionBillingAttemptCreate mutation to create an order.
 If no billingCycleSelector was specified, Shopify will create an order based on the current billing cycle's contract information by default.
 If you want to create an order for a certain billing cycle, you must specify billingCycleSelector.
 Tip
 If you specify both originTime and billingCycleSelector arguments, then originTime needs to be within the selected billing cycle's start and end at date.
 Note: Learn more about creating orders through a billing attempt.
 POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json
 GraphQL mutation
 1 mutation {
 2
    subscriptionBillingAttemptCreate(
 3
      subscriptionContractId: "gid://shopify/SubscriptionContract/123",
 4
      subscriptionBillingAttemptInput: {
 5
        idempotencyKey: "123",
 6
        billingCycleSelector: { date: "2023-01-10T00:00:00Z" }
 7
      }
 8
    ) {
 9
      subscriptionBillingAttempt {
 10
        id
 11
        errorMessage
 12
        order {
 13
          id
 14
        }
 15
        ready
 16
      }
 2
    "data": {
 3
      "subscriptionBillingAttemptCreate": {
 4
        "subscriptionBillingAttempt": {
 5
          "id": "gid://shopify/SubscriptionBillingAttempt/1",
 6
          "errorMessage": null,
 7
          "order": {
 8
            "id": "gid://shopify/Order/1"
 9
          },
 10
          "ready": true
 11
        }
 12
      },
 13
      "userErrors": []
 14
    }
 15 }
 Next steps
 Learn how to combine contracts together in a subscription billing cycle for a customer that has multiple subscriptions to save on shipping and administrative costs.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Create a subscription draft
 Step 2: Update the subscription draft
 Step 3: Commit the subscription draft
 Step 4: Fetch the edited contract
 Step 5: Create an order
 Next steps
