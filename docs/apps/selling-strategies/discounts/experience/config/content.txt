Deployment
 Distribution
 Billing
 App Store
 Add configuration to your discounts experience
 You can use metafields for the configuration of your product discount function. Metafields provide greater flexibility to use functions, and are a prerequisite to creating a user interface for configuring functions.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Define what configuration settings will be surfaced to merchants.
 Read and use the merchant-defined values in your function.
 Caution
 In this tutorial, you'll use a metafield namespace that's accessible to any app so that the metafield namespace can be populated using the GraphiQL app. To make your function ready for production, you should update the metafield namespace to use a reserved prefix so that other apps can't use your metafield. You'll make this update in the next tutorial.
 Requirements
 You've completed the Getting started with building a discounts experience tutorial.
 Step 1: Configure the function
 To make your function reusable, you can replace hardcoded values in your function with metafield values. You can update your input query to request a metafield value on the created product discount, which is the function owner for this function API. You can then use that value in your function logic.
 Navigate to your function in extensions/product-discount.
 Terminal
 $ cd extensions/product-discount
 Replace the code in the run.graphql file with the following code.
 This update to the input query adds a metafield from the discountNode object, which is the function owner. The query differs slightly in JavaScript and Rust due to code generation requirements.
 This change is automatically reflected as long as you're running dev.
 run.graphql
 JavaScript input query
 Rust input query
 src/run.graphql
 1 query RunInput {
 2
    cart {
 3
      lines {
 4
        quantity
 5
        merchandise {
 6
          __typename
 7
          ...on ProductVariant {
 8
              id
 9
          }
 10
        }
 11
      }
 12
    }
 13
    discountNode {
 14
      metafield(namespace: "volume-discount", key: "function-configuration"){
 15
        value
 $ npm run shopify app function typegen
 Replace the src/run.js or src/run.rs file with the following code.
 This update includes parsing the JSON metafield value, and using values from that JSON in the function logic instead of hardcoded values.
 File
 JavaScript
 Rust
 src/run.js
 1 // @ts-check
 2 import { DiscountApplicationStrategy } from "../generated/api";
 3
 4 /**
 5 * @typedef {import("../generated/api").RunInput} RunInput
 6 * @typedef {import("../generated/api").FunctionRunResult} FunctionRunResult
 7 * @typedef {import("../generated/api").Target} Target
 8 * @typedef {import("../generated/api").ProductVariant} ProductVariant
 9 */
 10
 11 /**
 12 * @type {FunctionRunResult}
 13 */
 14 const EMPTY_DISCOUNT = {
 15
    discountApplicationStrategy: DiscountApplicationStrategy.First,
 16
    discounts: [],
 17 };
 18
 19 /**
 20 * @param {RunInput} input
 21 * @returns {FunctionRunResult}
 22 */
 23 export function run(input) {
 24
    // Define a type for your configuration, and parse it from the metafield
 25
    /**
 26
    * @type {{
 27
    *   quantity: number
 28
    *   percentage: number
 29
    * }}
 30
    */
 31
    const configuration = JSON.parse(
 32
      input?.discountNode?.metafield?.value ?? "{}"
 33
    );
 34
    if (!configuration.quantity || !configuration.percentage) {
 35
      return EMPTY_DISCOUNT;
 36
    }
 37
 38
    const targets = input.cart.lines
 39
      // Use the configured quantity instead of a hardcoded value
 40
      .filter(line => line.quantity >= configuration.quantity &&
 41
        line.merchandise.__typename == "ProductVariant")
 42
      .map(line => {
 43
        const variant = /** @type {ProductVariant} */ (line.merchandise);
 44
        return /** @type {Target} */ ({
 45
          productVariant: {
 46
            id: variant.id
 47
          }
 48
        });
 49
      });
 50
 51
    if (!targets.length) {
 52
      console.error("No cart lines qualify for volume discount.");
 53
      return EMPTY_DISCOUNT;
 54
    }
 55
 56
    return {
 57
      discounts: [
 58
        {
 59
          targets,
 60
          value: {
 61
            percentage: {
 62
              // Use the configured percentage instead of a hardcoded value
 63
              value: configuration.percentage.toString()
 64
            }
 65
          }
 66
        }
 67
      ],
 68
      discountApplicationStrategy: DiscountApplicationStrategy.First
 69
    };
 70 };
 Step 2: Populate the product discount configuration metafield
 To populate the configuration metafield, you'll first use the discountNodes query to confirm the product discount ID, and then use the discountAutomaticAppUpdate mutation to populate the same metafield that you specified in the input query.
 If you were updating a code-based discount, then you would use discountCodeAppUpdate instead of discountAutomaticAppUpdate.
 Open the Shopify GraphiQL app on your development store.
 In the GraphiQL app, in the API Version field, select the 2023-07 version.
 Execute the following query, and make note of the id value of the product discount that you created in the previous tutorial. For more information about global IDs, refer to Global IDs in Shopify APIs.
 product-discount-query.graphql
 1 query {
 2
    discountNodes(first: 100) {
 3
      edges {
 4
        node {
 5
          id
 6
          discount {
 7
            ... on DiscountAutomaticApp {
 8
              title
 9
            }
 10
          }
 11
        }
 Execute the following mutation and replace YOUR_DISCOUNT_ID_HERE with the full global ID of your product discount.
 The value of the metafield specifies that the function should discount products by 15% when they have a quantity of three or more.
 discount-update.graphql
 1 mutation {
 2
    discountAutomaticAppUpdate(
 3
      id: "YOUR_DISCOUNT_ID_HERE",
 4
      automaticAppDiscount: {
 5
        metafields: [
 6
          {
 7
            namespace: "volume-discount"
 8
            key: "function-configuration"
 9
            value: "{ \"quantity\": 3, \"percentage\": 15.0 }"
 10
            type: "json"
 11
          }
 12
        ]
 13
      }
 14 ) {
 15
      userErrors {
 16
        field
 17
        message
 18
      }
 19
    }
 20 }
 If the response includes any messages under userErrors, then review the errors, check that your mutation and discount ID are correct, and try the request again.
 Step 3: Test the product discount
 You can test your product discount to ensure it's working as expected, and review logs for your function.
 Open your development store and build a cart with a single item in it.
 No discounts should be applied to the cart.
 Increase the item quantity to three.
 The 15% Volume discount should now be applied to the cart.
 To debug your function, or view its output, you can review its logs in your Partner Dashboard:
 Log in to your Partner Dashboard and navigate to Apps > {your app} > Extensions > product-discount.
 Click on any function run to view its input, output, and any logs written to STDERR.
 Next steps
 Build a discounts user interface with App Bridge.
 Learn how to use variables in your input query
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Configure the function
 Step 2: Populate the product discount configuration metafield
 Step 3: Test the product discount
 Next steps
 Updates & News
 Developer changelog
 Partner blog
