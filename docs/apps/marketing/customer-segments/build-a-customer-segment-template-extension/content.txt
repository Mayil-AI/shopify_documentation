Billing
 App Store
 Getting started with customer segment template extensions
 A customer segment template extension is an extension that is displayed in the template drawer of the customer segment editor.
 This guide is the first part in a two-part tutorial series on how to build a feature using customer segment template extensions and an admin action in the Use segment modal. This guide demonstrates how to build a customer segment template extension that enables users to create a segment based on a custom query your app provides. The customer segment template extension displays in the template drawer of the customer segment editor under the segment details page.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Create a customer segment template extension that is displayed in the template drawer of customer segment editor in the Shopify admin.
 Run the extension locally and test it on a development store.
 Requirements
 You've created a Partner account and a development store.
 You've created an app that uses the Remix template.
 Your app is using Shopify CLI 3.48 or higher.
 Tip
 Learn how to check your Shopify CLI version.
 Step 1: Create a new extension
 To create your customer segment template extension, you can use Shopify CLI to generate a starter extension.
 Navigate to your app directory:
 Terminal
 $ cd <directory>
 Run one of the following commands to create a new admin action extension:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app generate extension -- --template customer_segment_template --name loyal-customers-template --flavor react
 The command creates a new extension template in your app's extensions directory with the following structure:
 Customer segment template structure
 1 extensions/loyal-customers-template
 2 ├── README.md
 3 ├── locales
 4 │   ├── en.default.json // The default locale for the extension
 5 │   └── fr.json // The French language translations for the extension
 6 ├── package.json
 7 ├── shopify.extension.toml // The config file for the extension
 8 └── src
 9
      └── CustomerSegmentTemplate.jsx // The code that defines the action's UI and behavior
 Step 2: Build the extension's UI
 Complete the following steps to build the extension's UI.
 Review the configuration
 The extension's .toml file stores the extension's static configuration. To have the template appear in the template drawer of the customer segment editor, validate that the target is set to admin.customers.segmentation-templates.render. For a full list of targets and the locations where they display in the Shopify admin, refer to the admin extension configuration reference.
 shopify.extension.toml
 1 api_version = "2023-10"
 2
 3 [[extensions]]
 4 name = "t:title"
 5 description = "t:description"
 6 handle = "loyal-customers-template"
 7 type = "ui_extension"
 8
 9 [[extensions.targeting]]
 10 module = "./src/CustomerSegmentTemplate.jsx"
 11 # The target must match the target used in the module file (./src/CustomerSegmentTemplate.jsx)
 12 target = "admin.customers.segmentation-templates.render"
 Create the UI
 Note
 This tutorial uses the React implementation of admin UI extensions. If you want to create JavaScript-only extensions, then you'll need to use the provided API from the root object.
 Customer segment template extensions are rendered using Remote UI, which is a fast and secure remote-rendering framework. Because Shopify renders the UI remotely, components used in the extensions must comply with a contract in the Shopify host.
 Note
 Unlike other UI extensions, customer segment template extensions don't support the entire range of UI components. They're designed to operate in conjunction with the CustomerSegmentTemplate component.
 You can view the source of your extension in the src/CustomerSegmentTemplate.jsx file. This file defines a functional React component that's exported to run at the extension's target. The CustomerSegmentTemplate component is specifically designed for customer segment template extensions and has already been imported for you. All the template extensions that you create for your application will be displayed under your application's category.
 Caution
 The extension point in the component export must match the extension point defined in your .toml file, or the extension won't render.
 If the template refers to a metafield, the metafield needs to exist in our database or the extension won't render.
 To build your customer segment template, you need to populate the CustomerSegmentTemplate component's title, description, query, queryToInsert and createdOn props. For a list of all the component's props and their descriptions, refer to the CustomerSegmentTemplate component reference.
 Add the following code to src/CustomerSegmentTemplate.jsx:
 src/CustomerSegmentTemplate.jsx
 1 import {
 2
    reactExtension,
 3
    CustomerSegmentTemplate,
 4
    useApi,
 5 } from '@shopify/ui-extensions-react/admin';
 6
 7 // The target used here must match the target used in the extension's toml file (./shopify.extension.toml)
 8 const TARGET = 'admin.customers.segmentation-templates.render';
 9
 10 export default reactExtension(TARGET, () => <App />);
 11
 12 function App() {
 13
    // The useApi hook provides access to several useful APIs like i18n, close, and data.
 14
    const {i18n} = useApi(TARGET);
 15
 16
    const query =
 17
      'number_of_orders >= 10';
 18
 19
    return (
 20
      // The CustomerSegmentTemplate component provides an API for setting the title, description, date, query, and query to insert of the segmentation template.
 21
      <CustomerSegmentTemplate
 22
        title={i18n.translate('title')}
 23
        description={i18n.translate('description')}
 24
        createdOn={new Date('2023-10-15').toISOString()}
 25
        query={query}
 26
      />
 27
    );
 28 }
 Caution
 The validity of the query's syntax is not verified and needs to be tested in the customer segment editor.
 To update the title and description of the template, edit the corresponding title and description values in the locale files.
 Locales
 English
 French
 locales/en.default.json
 1 {
 2
    "title": "Loyal customers",
 3
    "description": "Use this template to identify your loyal customers, you can reward them with discounts, or award them loyalty points!"
 4 }
 Tip
 You can create queries using your own metafields. You could choose to query your loyal customers by using a loyalty points metafield. For example, customers that have already 10 loyalty points could be considered as loyal customers. Once the segment is created, an additional number of loyalty points could be awarded to these customers.
 Step 3: Test the extension
 After you've built the extension, you can test it by completing the following steps.
 Navigate to your app directory:
 Terminal
 $ cd <directory>
 To build and preview your app, either start or restart your server with the following command:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run dev
 Press p to open the developer console.
 In the developer console page, click on the preview link for the loyalty points template extension.
 The template drawer of the customer segment editor opens on the customer index page.
 To use your extension, click the Use this template button:
 Validate the query inside the customer segment editor:
 Next steps
 Complete the next guide in this tutorial series by building an action extension in the Use segment modal. This will allow your app to use the newly created customer segment.
 Step 1: Create a new extension
 Step 2: Build the extension's UI
 Step 3: Test the extension
 Next steps
 Updates & News
