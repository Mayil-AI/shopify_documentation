Functions
 Deployment
 Overview
 Deploy a web app
 App versions
 Distribution
 Billing
 App Store
 Deploy your web app
 Shopify CLI lets you use your local environment to run your app during development. However, you might want to deploy your web app to test the functionality in a different environment, or deploy your app to a production environment to get it ready for distribution. In this tutorial, you'll learn how to deploy your app for testing or production using your preferred hosting provider.
 What you'll learn
 In this tutorial, you'll learn how to do the following tasks:
 Set up hosting
 Retrieve and set environment variables
 Build and deploy your app
 Update your app URLs
 Test your deployed app
 Requirements
 You've created an app using Shopify CLI, or you've migrated your app to work with Shopify CLI.
 Step 1: Set up hosting
 To make your app available to Shopify and to app users, you need to host it. For example, when you embed your app in the Shopify admin or Shopify Point of Sale using App Bridge, you need to host your app's pages so Shopify can display them in an iframe or mobile webview.
 All Shopify app templates include a Dockerfile that contains instructions to deploy a web app in a Docker container. To simplify the deployment process, we recommend that you choose a hosting provider that supports deployment using Docker.
 You can host your app using any service or platform you prefer. In this tutorial, we'll use Fly.io and Heroku as examples.
 Set up hosting with Fly.io
 Set up hosting for your app in Fly.io.
 Install flyctl and sign up for Fly.io. For detailed steps, refer to the Fly.io docs.
 Navigate to your app directory:
 Terminal
 $ cd my-app
 Run the following command to create a new app in Fly.io and create a fly.toml file:
 Terminal
 $ flyctl launch
 Set up hosting with Heroku
 Set up hosting for your app in Heroku.
 Note
 To deploy to Heroku, your app code needs to be committed to a Git repository.
 Download and install the Heroku CLI and Docker.
 Navigate to your app directory:
 Terminal
 $ cd my-app
 Log in to the Heroku CLI:
 Terminal
 $ heroku login
 Log in to the Heroku Container Registry:
 Terminal
 $ heroku container:login
 Create an app in Heroku:
 Terminal
 $ heroku create -a <my-app-name> -s container
 This command configures Heroku with a container-based app and creates a Git remote branch named heroku for deploying the app. It also returns the URL to where the app will run when it's deployed.
 Step 2: Retrieve environment variables
 Apps created using Shopify CLI use environment variables for configuration. During local development, Shopify CLI provides the environment variables directly to the environment. However, to deploy your app, you need to retrieve these variables for your app so you can set them in a later step.
 Navigate to your app directory:
 Terminal
 $ cd my-app
 To retrieve the values that you'll need to set as environment variables, run the following command using your preferred package manager:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app env show
 Tip
 Creating or selecting an app using this command doesn't connect the selected app to your local environment. If you selected an app as a part of the dev or deploy process, then that app is still connected to your local environment. If needed, you can use the --reset flag to point your local environment to a different app.
 To avoid conflicts, you might want to deploy your app as a separate app from the one used by your local environment.
 Take note of the SCOPES, SHOPIFY_API_KEY, and the SHOPIFY_API_SECRET values. You'll need to set these values as environment variables for your hosted app.
 Step 3: Set environment variables
 After you create your hosted app, you need to configure it by setting environment variables. You need to set the environment variables that you retrieved, and additional variables specific to your app and hosting environment.
 Caution
 Some variables represent API secrets or secure keys. These variables should be stored securely as secrets in your production environment, and should never be committed to a repository.
 The following environment variables need to be provided for all apps:
 Variable Description
 PORT The port on which to run the app. For apps built using the Node app template, this variable needs to be set to the same value as the EXPOSE value in the Dockerfile. The default value is 8081.
 SHOPIFY_APP_URL (or HOST for non-Remix apps) The fully qualified domain name (FQDN) where the app will be accessed when it's deployed. Must include HTTPS.
 APP_ENV The app's environment. This variable is only for PHP apps and must be set to production.
 SCOPES The app's access scopes, retrieved using Shopify CLI.
 SHOPIFY_API_KEY The client ID of the app, retrieved using Shopify CLI.
 SHOPIFY_API_SECRET The client secret of the app, retrieved using Shopify CLI. This value should be stored securely.
 Tip
 Depending on the language or template that you used to build your app, you might need to provide additional information as environment variables. For more information, refer to your template README.
 If you need to retrieve the SCOPES, SHOPIFY_API_KEY, or SHOPIFY_API_SECRET values again, then you can rerun the Shopify CLI env show command.
 The following examples describe how to set up environment variables in Fly.io and Heroku.
 Configure Fly.io
 Configure your Fly.io app to run your app code and communicate with Shopify.
 Update the fly.toml file
 From your project root, open fly.toml.
 In the [env] section, add the following environment variables, using the format <VARIABLE>= "<VALUE>":
 Remix apps
 Non-Remix apps
 1 PORT = ""
 2 SHOPIFY_APP_URL = ""
 3 SHOPIFY_API_KEY = ""
 4 SCOPES = ""
 In the [http_service] section, change the value of internal_port. This value needs to match the PORT value.
 Your config file should look similar to the following:
 fly.toml
 Remix apps
 Non-Remix apps
 1 ...
 2 [env]
 3
    PORT = "8081"
 4
    SHOPIFY_APP_URL = "https://my-app.fly.dev"
 5
    SHOPIFY_API_KEY = "<API_KEY>"
 6
    SCOPES = "write_products"
 7 ...
 8 [http_service]
 9
    ...
 10
    internal_port = 8081
 11
    ...
 Set environment secrets
 In a terminal, set the API secret for your app:
 Terminal
 $ flyctl secrets set SHOPIFY_API_SECRET=<API_SECRET>
 Configure Heroku
 Configure your Heroku app to run your app code and communicate with Shopify.
 Create a Heroku config file
 At the top-level directory of your app's source code, create a heroku.yml file with the following content:
 1 build:
 2
    docker:
 3
      web: Dockerfile
 4
    config:
 5
      SHOPIFY_API_KEY: <SHOPIFY_API_KEY>
 Commit the heroku.yml file to your Git repository:
 Terminal
 $ git add heroku.yml
 $ git commit -m "Add Heroku manifest"
 Set environment variables
 In a terminal, add the environment variables for your app using the heroku config:set command with the following syntax:
 Terminal
 $ heroku config:set -a <my-app-name> <VARIABLE>=<value>
 Terminal
 Remix apps
 Non-Remix apps
 $ heroku config:set -a <my-app-name> SCOPES=<SCOPES> SHOPIFY_APP_URL=<SHOPIFY_APP_URL> SHOPIFY_API_KEY=<SHOPIFY_API_KEY> SHOPIFY_API_SECRET=<SHOPIFY_API_SECRET>
 Note
 Heroku automatically assigns a port for your container and sets the PORT variable.
 Step 4: Deploy your app
 After you add environment variables to your app, you can follow your hosting solution's deployment process to deploy the app. You can also use this process to push updates to your app.
 The following sections show examples of the deployment process for Fly.io and Heroku.
 Deploy to Fly.io
 Run the following command to deploy your app to Fly.io:
 Terminal
 Remix apps
 Non-Remix apps
 $ flyctl deploy --remote-only
 Deploy to Heroku
 Push the app to Heroku. This will automatically build the docker image and deploy the app:
 Terminal
 $ git push heroku main
 Step 5: Update URLs in the Partner Dashboard
 After you deploy your app, you need to update URLs in the app's settings so that the app can be tested and used. The following settings need to be updated to point to your hosted app:
 App URL: The base URL of your app. This URL should match your HOST / SHOPIFY_APP_URL environment variable.
 Allowed redirection URL(s): The callback URL for your app. This is usually the same as the app URL, with /auth/callback (for Remix apps) or /api/auth/callback (for Non-Remix apps) appended.
 From the Partner Dashboard, go to Apps.
 Select the app that you deployed to your hosting provider.
 On the Configuration page, in the URLs section, update the App URL and Allowed redirection URL(s) settings.
 Tip
 If you have multiple apps, for example, a separate app for your development and test environments, then make sure that you're updating these settings for the correct app.
 The following are examples of URLs that you might set for Fly.io and Heroku:
 Hosting provider App URL Allowed redirection URLs
 Fly.io https://my-app.fly.dev https://my-app.fly.dev/auth/callback (Remix)
 https://my-app.fly.dev/api/auth/callback (Non-Remix)
 Heroku https://my-app.herokuapp.com https://my-app.herokuapp.com/auth/callback (Remix)
 https://my-app.herokuapp.com/api/auth/callback (Non-Remix)
 Step 6: Test the app
 After you update your app URLs in the Partner Dashboard, you can test the app in a development store to make sure it's configured correctly.
 In the Partner Dashboard, go to your app's Overview page.
 In the Test your app section, click Select store and then choose a store to test the app.
 Next steps
 Keep developing your app. When you make changes that you want to deploy to production, you can deploy your app again.
 Select a distribution method for your app and distribute it to users.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Set up hosting
 Step 2: Retrieve environment variables
 Step 3: Set environment variables
 Step 4: Deploy your app
 Step 5: Update URLs in the Partner Dashboard
 Step 6: Test the app
 Next steps
 Updates & News
 Developer changelog
