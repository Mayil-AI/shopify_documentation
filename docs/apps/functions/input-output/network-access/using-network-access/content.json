Variables in input queries
 Network access
 Overview
 Using network access
 GraphQL reference
 Performance and resilience
 Language support
 Testing and debugging
 Localization
 Deployment
 Distribution
 Billing
 App Store
 Using network access
 You can use a Shopify Functions to create network requests and handle responses. In this tutorial, you'll use Cart and Checkout Validation Function API to query an external system for user-specific cart limits based on the email they enter at checkout.
 What you'll learn
 In this tutorial, youâ€™ll learn how to do the following tasks:
 Define a function that declares an HTTP request to an external system, where additional information is available.
 Use the HTTP response to apply further logic to the function.
 Requirements
 You're using Shopify CLI version 3.49.3 or higher.
 You have an HTTP server. In this tutorial, you'll use a NodeJS Express server.
 Step 1: Create the validation function
 To create your validation function, you can use Shopify CLI to generate a starter function, specify the inputs for your function using an input query, and implement your function logic using Javascript or Rust.
 Navigate to your app directory:
 Terminal
 $ cd <directory>
 Run one of the following commands to create a new validation function:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app generate extension -- --template cart_checkout_validation --name validation-using-network-access
 Tip
 Shopify Functions support any language that compiles to WebAssembly (Wasm), such as Rust, AssemblyScript, or TinyGo. You specify the Wasm template option when you're using a language other than Rust and can conform to the Wasm API. Learn more about the Wasm API.
 Choose the language that you want to use. For this tutorial, you should select either JavaScript or Rust.
 If you expect to be working with large payloads of data, Rust is recommended.
 Terminal
 $ ?  What would you like to work in?
 $ > (1) JavaScript
 $
    (2) TypeScript
 $
    (3) Rust
 $
    (4) Wasm
 Configure the extension definition in shopify.extension.toml. Add [[targeting]] sections to set up the following targets:
 purchase.validation.fetch: Declares a network HTTP request to an external system
 purchase.validation.run: Apply logic based off the network HTTP response
 Add extension targets
 JavaScript
 Rust
 shopify.extension.toml
 1 api_version = "unstable"
 2
 3 [[extensions]]
 4 handle = "validation-using-network-access"
 5 name = "t:name"
 6 description = "t:description"
 7 type = "function"
 8
 9 [[extensions.targeting]]
 10 # An extensibility identifier.
 11 target = "purchase.validation.fetch"
 12 # The local GraphQL file used for code generation.
 13 input_query = "src/fetch.graphql"
 14 # The generated WASM export name for the given target.
 15 export = "fetch"
 16
 17 [[extensions.targeting]]
 18 # An extensibility identifier.
 19 target = "purchase.validation.run"
 20 # The local GraphQL file used for code generation.
 21 input_query = "src/run.graphql"
 22 # The generated WASM export name for the given target.
 23 export = "run"
 24
 25 [extensions.build]
 26 command = ""
 27 path = "dist/function.wasm"
 Define entry points for the purchase.validation.fetch and purchase.validation.run targets:
 Entry points
 JavaScript
 Rust
 src/index.js
 1 export * from './run';
 2 export * from './fetch';
 Update project dependencies and scripts. The package.json (JavaScript) and Cargo.toml (Rust) files contain metadata about your project. The files include project dependencies and scripts that let you run Shopify CLI commands using your package manager:
 Project dependencies and scripts
 JavaScript
 Rust
 package.json
 1 {
 2
    "name": "validation-using-network-access",
 3
    "version": "1.0.0",
 4
    "license": "UNLICENSED",
 5
    "scripts": {
 6
      "shopify": "npm exec -- shopify",
 7
      "typegen": "npm exec -- shopify app function typegen",
 8
      "build": "npm exec -- shopify app function build",
 9
      "preview": "npm exec -- shopify app function run",
 10
      "test": "vitest"
 11
    },
 12
    "codegen": {
 13
      "schema": "schema.graphql",
 14
      "documents": "src/*.graphql",
 15
      "generates": {
 16
        "./generated/api.ts": {
 17
          "plugins": [
 18
            "typescript",
 19
            "typescript-operations"
 20
          ]
 21
        }
 22
      },
 23
      "config": {
 24
        "omitOperationSuffix": true
 25
      }
 26
    },
 27
    "devDependencies": {
 28
      "vitest": "^0.34.1"
 29
    },
 30
    "dependencies": {
 31
      "@shopify/shopify_function": "0.1.0",
 32
      "javy": "0.1.2"
 33
    }
 34 }
 Step 2: Retrieve the latest GraphQL schema
 To use network access for Shopify Functions, you need to retrieve additional fields in the Cart and Checkout Validation Function API schema that relate to network access.
 Run one of the following Shopify CLI commands to retrieve the latest GraphQL schema:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app function schema -- --path ./extensions/validation-using-network-access
 Step 3: Create a network request using fetch
 The purchase.validation.fetch target, exported as fetch, is used to declare a network request to an external system. You can use this target to fetch data required by your validation logic.
 Create a file called fetch.graphql and define the input for the function. The input query can request any information available in the Cart and Checkout Validation Function API:
 fetch.graphql
 JavaScript
 Rust
 src/fetch.graphql
 1 query FetchInput {
 2
    cart {
 3
      buyerIdentity {
 4
        email
 5
        isAuthenticated
 6
      }
 7
      cost {
 8
        totalAmount {
 9
          amount
 10
          currencyCode
 11
        }
 12
      }
 13
    }
 14 }
 The following example shows the resulting input from the query:
 Example
 input.json
 1 {
 2
    "cart": {
 3
      "buyerIdentity": {
 4
        "email": "user@example.com",
 5
        "isAuthenticated": false
 6
      },
 7
      "cost": {
 8
        "totalAmount": {
 9
          "amount": "1234.0",
 10
          "currencyCode": "CAD"
 11
        }
 12
      }
 13
    }
 14 }
 Navigate to your extension directory:
 Terminal
 $ cd ./extensions/validation-using-network-access
 If you're using JavaScript, then run the following command to regenerate types based on your input query:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run shopify app function typegen
 Create a file called src/fetch.js (JavaScript) or src/fetch.rs (Rust) and add the following code to the file:
 Create a network request
 JavaScript
 Rust
 src/fetch.js
 1 import { HttpRequestMethod } from "../generated/api"
 2
 3 export function fetch(input) {
 4
    const SERVER_URL = "https://server_url.com";
 5
 6
    return {
 7
      request: {
 8
        method: HttpRequestMethod.Post,
 9
        url: SERVER_URL,
 10
        headers: [
 11
          { name: "accept", value: "application/json" },
 12
          { name: "content-type", value: "application/json" }
 13
        ],
 14
        body: JSON.stringify(input),
 15
        policy: {
 16
          readTimeoutMs: 2000
 17
        }
 18
      }
 19
    };
 20 }
 The following example shows the output of the Function:
 Example
 output.json
 1 {
 2
    "request": {
 3
      "method": "POST",
 4
      "url": "https://example.com/endpoint",
 5
      "headers": [
 6
        {
 7
          "name": "accept",
 8
          "value": "application/json"
 9
        },
 10
        {
 11
          "name": "content-type",
 12
          "value": "application/json"
 13
        }
 14
      ],
 15
      "body": "{\"cart\":{\"buyerIdentity\":{\"email\":\"user@example.com\",\"isAuthenticated\":false},\"cost\":{\"totalAmount\":{\"amount\":\"1234.0\",\"currencyCode\":\"CAD\"}}}}",
 16
      "policy": {
 17
        "readTimeoutMs": 2000
 18
      }
 19
    }
 20 }
 Step 4: Handle the network request
 The HTTP request is managed by Shopify, as set up by the fetch export. The HTTP response will be provided to the next step. The example in this section shows how to handle a network request from a Shopify Function, and includes information about the following areas:
 Business logic
 JWT verification
 Server files
 Exposing the server
 Business logic
 The example server incorporates the following business logic:
 If cart.cost.totalAmount.amount is less than 1000.00, then return no validation errors.
 If cart.buyerIdentity.isAuthenticated is false, then return a validation error.
 If cart.buyerIdentity.email isn't permitted to place an order, then return a validation error.
 If none of the above conditions is true, then return no validation errors.
 app.js
 1 // Business logic
 2 app.post('/', (req, res) => {
 3
      let errors = [];
 4
 5
      let input = req.body
 6
 7
      // Checkouts under $1,000 aren't subject to the validation.
 8
      // Don't forget to check for specific currencies if the store handles such mechanisms.
 9
      validations: if (parseFloat(input.cart.cost.totalAmount.amount) > 1000.0) {
 10
          // Shopify requires the user to be logged in to prevent end users from phishing for email values they might
 11
          // attempt to impersonate. This is a defense mechanism specific to the use case.
 12
          if (!input.cart.buyerIdentity.isAuthenticated) {
 13
              errors.push({
 14
                  localized_message: "There is an order maximum of $1,000 for non-authenticated customers",
 15
                  target: "cart"
 16
              })
 17
 18
              break validations;
 19
          }
 20
 21
          // This check should be replaced with business specific logic.
 22
          // For demo purposes, emails not containing "+allowed@" domain won't be able to place an order over $1,000.
 23
          // For example: test+allowed@example.com
 24
          if (!input.cart.buyerIdentity.email.includes('+allowed@') ) {
 25
              errors.push({
 26
                  localized_message: "There is an order maximum of $1,000 for customers without established order history",
 27
                  target: "cart"
 28
              })
 29
 30
              break validations;
 31
          }
 32
      }
 33
 34
      res.json({
 35
          errors: errors,
 36
      });
 37 });
 JWT verification
 Every request is accompanied by a verification header, x-shopify-request-jwt. This header contains a JSON Web Token (JWT) that has been signed using the secret client key of the app. This token includes specific claims that assist in validating that the request was sent from Shopify.
 JWT example
 JWT verification
 Encoded JWT
 Decoded JWT
 app.js
 1 app.use((req, res, next) => {
 2
    const token = req.headers['x-shopify-request-jwt'];
 3
    const requestRunId = req.headers['x-shopify-request-id'];
 4
 5
    // Populate with your client secret
 6
    const secretKey = process.env.APP_SECRET;
 7
 8
    // Populate with the headers that you specified in your request and make sure to use lowercase
 9
    const includedVerificationHeaders = process.env.JWT_HEADERS.split(',');
 10
 11
    // Populate with the shop ID to verify issuer
 12
    const shop_id = parseInt(process.env.JWT_SHOP_ID, 10);
 13
 14
    if (!token) {
 15
        return res.status(403).send({ auth: false, message: 'No token provided.' });
 16
    }
 17
 18
    jwt.verify(token, secretKey, (err, decoded) => {
 19
        if (err) {
 20
            // Possible errors https://github.com/auth0/node-jsonwebtoken#errors--codes
 21
            return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });
 22
        }
 23
 24
        // JWT claims verifications
 25
 26
        // Verify the request_run_id
 27
        if (decoded.x_shopify_request_id !== requestRunId) {
 28
            return res.status(401).send({ auth: false, message: 'Invalid request_run_id.' });
 29
        }
 30
 31
        // Verify the headers_sha256
 32
        const headers = req.headers;
 33
        const canonicalHeaders = Object.keys(headers)
 34
          .filter(k => includedVerificationHeaders.includes(k.toLowerCase()))
 35
          .map(k => `${k.toLowerCase()}:${headers[k]}`)
 36
          .sort()
 37
          .join(',');
 38
 39
        const headersSha256 = crypto.createHash('sha256').update(canonicalHeaders).digest('hex');
 40
 41
        if (decoded.headers_sha256 !== headersSha256) {
 42
            return res.status(401).send({ auth: false, message: 'Invalid headers_sha256.' });
 43
        }
 44
 45
        // Verify the issuer shop
 46
        if (decoded.iss !== shop_id) {
 47
            return res.status(401).send({ auth: false, message: 'Invalid issuer.' });
 48
        }
 49
 50
        // Verify the body
 51
        if (req.body) {
 52
            const body_sha256 = crypto.createHash('sha256').update(req.rawBody.toString()).digest('hex')
 53
            if (decoded.body_sha256 !== body_sha256) {
 54
                return res.status(401).send({ auth: false, message: 'Invalid body.' });
 55
            }
 56
        }
 57
 58
        // Verify the method
 59
        const method = req.method
 60
        if (decoded.method !== method) {
 61
            return res.status(401).send({ auth: false, message: 'Invalid method.' });
 62
        }
 63
 64
        // Verify the URL
 65
        const fullUrl = ('https://' + req.get('host') + req.originalUrl).replace(/\/$/, "");
 66
        const url_sha256 = crypto.createHash('sha256').update(fullUrl).digest('hex')
 67
        if (decoded.url_sha256 !== url_sha256) {
 68
            return res.status(401).send({ auth: false, message: 'Invalid url.' });
 69
        }
 70
 71
        // If everything is verified, then proceed to the next middleware
 72
        next();
 73
    });
 74 });
 Server files
 The following example shows all assembled server files:
 package.json: Contains Node-specific metadata about your project
 .env: Contains the UUIDs for your app and each extension in the app
 app.js: Handles your business logic and JWT verification
 Server files
 package.json
 .env
 app.js
 1 {
 2
    "name": "server-example",
 3
    "version": "1.0.0",
 4
    "description": "",
 5
    "main": "index.js",
 6
    "dependencies": {
 7
      "dotenv": "^16.3.1",
 8
      "express": "^4.18.2",
 9
      "express-winston": "^4.2.0",
 10
      "jsonwebtoken": "^9.0.0",
 11
      "morgan": "^1.10.0"
 12
    }
 13 }
 Exposing the server
 The server used needs to be accessible on the public internet.
 Step 5: Create the validation logic
 The purchase.validation.run target, exported as run, is used to apply logic based off the network response from an external system.
 In the following example, the function takes the server response and returns it to Checkout as it is already formatted for validation errors. In a more complex use case, you could apply additional local logic in your function.
 Create a file called run.graphql and define the input for the function. The GraphQL query takes the server response data as input.
 run.graphql
 JavaScript
 Rust
 src/run.graphql
 1 query RunInput {
 2
    fetchResult {
 3
      status
 4
      headers {
 5
        name
 6
        value
 7
      }
 8
      body
 9
    }
 10 }
 The following example shows the resulting input to the query:
 Example
 input.json
 1 {
 2
    "fetchResult": {
 3
      "status": 200,
 4
      "headers": [
 5
        {
 6
          "name": "content-type",
 7
          "value": "application/json; charset=utf-8"
 8
        }
 9
      ],
 10
      "body": "{\"errors\":[{\"localized_message\":\"There is an order maximum of $1,000 for non-authenticated customers\",\"target\":\"cart\"}]}"
 11
    }
 12 }
 $ npm run shopify app function typegen
 Create a file called src/run.js (JavaScript) or src/run.rs (Rust) and add the following code to the file:
 Create the validation logic
 JavaScript
 Rust
 src/run.js
 1 export function run(input) {
 2
    const fetchResult = input.fetchResult;
 3
 4
    if (!fetchResult) {
 5
      return { errors: [] };
 6
    }
 7
 8
    if (fetchResult.status !== 200) {
 9
      throw new Error("Server response unprocessable (status)");
 10
    }
 11
 12
    if (!fetchResult.body) {
 13
      throw new Error("Server response unprocessable (body)");
 14
    }
 15
 16
    const data = JSON.parse(fetchResult.body);
 17
 18
    // The test server is using a "snake case" representation for variables.
 19
    const errors = data.errors.map(error => ({
 20
      localizedMessage: error.localized_message,
 21
      target: error.target
 22
    }))
 23
 24
    return { errors };
 25 }
 The following example shows the output of the Function:
 Example
 output.json
 1 {
 2
    "errors": [
 3
      {
 4
        "localizedMessage": "There is an order maximum of $1,000 for non-authenticated customers",
 5
        "target": "cart"
 6
      }
 7
    ]
 8 }
 Step 6: Preview the function on a development store
 To test your function, you need to make it available to your development store.
 If you're developing a function in a language other than JavaScript or TypeScript, ensure you have configured build.watch in your function extension configuration.
 Navigate back to your app root:
 Terminal
 $ cd ../..
 Use the Shopify CLI dev command to start app preview:
 Terminal
 npm
 Yarn
 pnpm
 $ npm run dev
 You can keep the preview running as you work on your function. When you make changes to a watched file, Shopify CLI rebuilds your function and updates the function extension's drafts, so you can immediately test your changes.
 Follow the CLI prompts to preview your app, and install it on your development store.
 Step 7: Activate the validation
 From the Shopify admin, go to Settings > Checkout.
 In the Checkout Rules section of the page click Add rule.
 A dialog opens and shows the validation-using-network-access function that you just deployed.
 To add a validation, click Add rule and select the validation.
 Click Activate to activate the validation.
 Click on Save.
 Optional: Control how checkout behaves when encountering runtime exceptions by clicking on the validation and selecting or deselecting Allow all customers to submit checkout.
 Step 8: Test the validation
 From your online store, without logging in, create a cart with more then $1,000 in merchandise.
 Proceed to Checkout and verify that a warning message displays.
 Verify that checkout progress is blocked. Clicking the Continue to shipping button shouldn't redirect the user.
 Using the Storefront API cartLinesAdd mutation, confirm that the mutation's userErrors field contains the function's error message, and that executing the mutation was unsuccessful.
 To debug your function, or view its output, you can review its logs in your Partner Dashboard.
 Log in to your Partner Dashboard and navigate to Apps > {your app} > Extensions > validation-using-network-access.
 Click on any function run to view its input, output, and any logs written to STDERR.
 Next step
 Consult the GraphQL reference for Functions.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 What you'll learn
 Requirements
 Step 1: Create the validation function
 Step 2: Retrieve the latest GraphQL schema
 Step 3: Create a network request using fetch
 Step 4: Handle the network request
 Step 5: Create the validation logic
 Step 6: Preview the function on a development store
 Step 7: Activate the validation
 Step 8: Test the validation
 Next step
 Updates & News
 Developer changelog
 Partner blog
 Engineering blog
