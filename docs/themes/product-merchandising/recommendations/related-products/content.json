Product recommendations
 Overview
 Related products
 Complementary products
 Media and images
 Theme Store
 Show related products on product pages
 Related products are products that are similar to a selected product. You can display potential substitutes to help customers discover other similar products they might like. These products should appear in a You might also like section on the product page.
 Adding the related products section to your product pages displays an automatically generated list of product recommendations.
 In this tutorial, you'll learn how to show related products in your theme.
 Resources
 To implement product recommendations, you'll use the following:
 The recommendations object
 The /{locale}/recommendations/products endpoint of the Product Recommendations API
 Recommendation logic
 The recommendation algorithm predicts the most relevant products based on the product that a customer is interacting with. The criteria that the algorithm uses depends on the merchant's online store. In general, it might take into account the following factors:
 Purchase history: Products that have historically been purchased together.
 Product description: Products with similar descriptions.
 Related collections: Products from collections that the current product is part of, excluding collections with handles all and frontpage.
 Recommendation algorithm criteria
 The criteria that's used depends on a merchant's online store, and the recommendation intent. The following outlines which criteria is used, and when:
 Criteria Application
 Purchase history
 and
 Product description Merchants with an English storefront.
 Purchase history only Merchants with a non-English storefront.
 Related collections All merchants when purchase history and product description recommendations aren't available.
 Tip
 To learn more about the recommendation logic limitations, refer to Limitations.
 The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.
 Limitations
 The following list describes some limitations of the recommendation logic:
 You can't customize the recommendation algorithm to exclude specific products. However, you can choose which of the returned products to show with JavaScript.
 The recommendation algorithm doesn't use orders that have been imported from another store or ecommerce platform to generate product recommendations.
 Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.
 UI guidelines
 The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:
 The recommendation algorithm associates up to ten products with each product, in order of relevance. For example, the first recommended product is more relevant than the tenth recommended product. For this reason, it's a good idea to limit your recommendations to four products for each product page to promote only the most relevant recommendations.
 Make sure that you load the proper image size for the product card.
 Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the recommended products section at all. The placeholder is swapped with the actual recommended products after you load them.
 Use phrases such as “You might also like” for the section header to explain to your customers why you're displaying the recommended products.
 Implementing product recommendations
 In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn’t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.
 Example
 sections/product-recommendations.liquid
 1 <div
 2
    class="product-recommendations"
 3
    data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related"
 4 >
 5
    {%- if recommendations.performed? and recommendations.products_count > 0 -%}
 6
      {% if recommendations.intent == 'related' %}
 7
        <h2>You may also like</h2>
 8
      {% elsif recommendations.intent == 'complementary' %}
 9
        <h2>Pair it with</h2>
 10
      {% endif %}
 11
 12
      <ul>
 13
        {%- for product in recommendations.products -%}
 14
          <li class="product">
 15
            <a href="{{ product.url }}">
 16
              <img
 17
                class="product__img"
 18
                src="{{ product.featured_image | image_url: width: 300, height: 300 }}"
 19
                alt="{{ product.featured_image.alt }}"
 20
              />
 21
 22
              <p class="product__title">{{ product.title }}</p>
 23
              <p class="product__price">{{ product.price | money}}</p>
 24
            </a>
 25
          </li>
 26
        {%- endfor -%}
 27
      </ul>
 28
    {%- endif -%}
 29 </div>
 30
 31 {% javascript %}
 32
    const handleIntersection = (entries, observer) => {
 33
      if (!entries[0].isIntersecting) return;
 34
 35
      observer.unobserve(productRecommendationsSection);
 36
 37
      const url = productRecommendationsSection.dataset.url;
 38
 39
      fetch(url)
 40
        .then(response => response.text())
 41
        .then(text => {
 42
          const html = document.createElement('div');
 43
          html.innerHTML = text;
 44
          const recommendations = html.querySelector('.product-recommendations');
 45
 46
          if (recommendations && recommendations.innerHTML.trim().length) {
 47
            productRecommendationsSection.innerHTML = recommendations.innerHTML;
 48
          }
 49
        })
 50
        .catch(e => {
 51
          console.error(e);
 52
        });
 53
    };
 54
 55
    const productRecommendationsSection = document.querySelector('.product-recommendations');
 56
    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});
 57
 58
    observer.observe(productRecommendationsSection);
 59 {% endjavascript %}
 60
 61 {% schema %}
 62
    {
 63
      "name": "Product recommendations",
 64
      "settings": []
 65
    }
 66 {% endschema %}
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Resources
 Recommendation logic
 Limitations
 UI guidelines
 Implementing product recommendations
 Updates & News
 Developer changelog
