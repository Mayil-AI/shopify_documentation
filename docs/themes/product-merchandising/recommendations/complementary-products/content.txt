Product recommendations
 Overview
 Related products
 Complementary products
 Media and images
 Theme Store
 Show complementary products on product pages
 Complementary products are products that are often bought in addition to a selected product. They're often referred to as something that “pairs well with" the current product. You can display complementary products on the product page to help customers discover new products.
 In this tutorial, you'll learn how to show complementary products in your theme.
 Resources
 To implement product recommendations, you'll use the following:
 The recommendations object
 The /{locale}/recommendations/products endpoint of the Product Recommendations API
 Limitations
 Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.
 UI guidelines
 The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:
 Complementary product recommendations should usually be placed near the top of the product page, typically in the product information section, near the original product image.
 The product recommendations API serves up to 10 complementary products for each product. We recommend showing 2-3 products by default, and paginating for additional products.
 Make sure that you load the proper image size for the product card.
 Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the complementary products section at all. The placeholder is swapped with the actual complementary products after you load them.
 Use phrases such as “Pairs well with” for the section header to explain to your customers why you're displaying the products.
 Implementing complementary products
 In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn’t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.
 sections/product-recommendations.liquid
 1 <div
 2
    class="product-recommendations"
 3
    data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related"
 4 >
 5
    {%- if recommendations.performed? and recommendations.products_count > 0 -%}
 6
      {% if recommendations.intent == 'related' %}
 7
        <h2>You may also like</h2>
 8
      {% elsif recommendations.intent == 'complementary' %}
 9
        <h2>Pair it with</h2>
 10
      {% endif %}
 11
 12
      <ul>
 13
        {%- for product in recommendations.products -%}
 14
          <li class="product">
 15
            <a href="{{ product.url }}">
 16
              <img
 17
                class="product__img"
 18
                src="{{ product.featured_image | image_url: width: 300, height: 300 }}"
 19
                alt="{{ product.featured_image.alt }}"
 20
              />
 21
 22
              <p class="product__title">{{ product.title }}</p>
 23
              <p class="product__price">{{ product.price | money}}</p>
 24
            </a>
 25
          </li>
 26
        {%- endfor -%}
 27
      </ul>
 28
    {%- endif -%}
 29 </div>
 30
 31 {% javascript %}
 32
    const handleIntersection = (entries, observer) => {
 33
      if (!entries[0].isIntersecting) return;
 34
 35
      observer.unobserve(productRecommendationsSection);
 36
 37
      const url = productRecommendationsSection.dataset.url;
 38
 39
      fetch(url)
 40
        .then(response => response.text())
 41
        .then(text => {
 42
          const html = document.createElement('div');
 43
          html.innerHTML = text;
 44
          const recommendations = html.querySelector('.product-recommendations');
 45
 46
          if (recommendations && recommendations.innerHTML.trim().length) {
 47
            productRecommendationsSection.innerHTML = recommendations.innerHTML;
 48
          }
 49
        })
 50
        .catch(e => {
 51
          console.error(e);
 52
        });
 53
    };
 54
 55
    const productRecommendationsSection = document.querySelector('.product-recommendations');
 56
    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});
 57
 58
    observer.observe(productRecommendationsSection);
 59 {% endjavascript %}
 60
 61 {% schema %}
 62
    {
 63
      "name": "Product recommendations",
 64
      "settings": []
 65
    }
 66 {% endschema %}
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Resources
 Limitations
 UI guidelines
 Implementing complementary products
 Updates & News
 Developer changelog
 Partner blog
