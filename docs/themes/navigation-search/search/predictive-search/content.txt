Storefront search
 Overview
 Predictive search
 Predictive search UX guidelines
 Filtering
 Add predictive search to your theme
 You can add predictive search to your theme so that suggested results appear immediately as you type into the search field. Predictive search helps customers articulate and refine their search queries, and provides new ways for them to explore an online store. It also lets them quickly browse matches without having to leave their current page to see a separate list of search results.
 Predictive search supports suggestions for products, collections, queries, pages, and articles.
 Before implementing predictive search in your theme, it's important to be familiar with how suggestions are generated, current API limitations, and the UX guidelines.
 How suggestions are generated
 The predictive search dropdown displays the following information when you enter a query.
 Legend for the diagram of the search dropdown
 Point Description
 1 Predictive search dropdown
 2 Query suggestions
 3 Collection suggestions
 4 Product suggestions
 5 Page suggestions
 6 Article suggestions
 After you start typing into the search bar, predictive search suggests results that are related to what you’re typing. They match search terms either exactly or with typo tolerance on searchable properties of shop resources.
 Matching products or variants are returned as product suggestions that drop down from the search bar. For example, you’re looking for a snowboard and type very-fast snowbo. Product suggestions appear for products or variants that contain very, fast, and a term that begins with snowbo.
 If a word is separated by a hyphen or space, then it will be considered as two terms. Words or phrases that are separated into multiple terms return different results than a single term that includes the same words. For example, T-shirt and t shirt return the same results, but tshirt does not.
 Product variants are returned only when the query matches terms specific to the variant title. Only the variants with the most matching terms are returned as results. For example, a store has a snowboard with a blue variant and a light blue variant. If you search for snowbo, then the snowboard product is returned. However, if you search for light blue snowbo, then only the light blue variant is returned.
 Query suggestions are generated by extracting words and phrases from your product catalog, as well as from customer searches, using natural language processing techniques.
 Resources
 The predictive_search object
 The /{locale}/search/suggest endpoint of the Predictive Search API
 Implementing predictive search
 To support predictive search, you need to implement the following components:
 The main search: A search input for predictive search to apply to.
 The predictive search section: A section to host the general predictive search display. This display is populated with the results of the predictive search using the resources attribute of the predictive_search object.
 A JavaScript function: Renders the predictive search section using the section response of the Predictive Search API.
 The following examples illustrate a basic predictive search implementation. These examples follow the listbox component pattern suggested by the W3C ARIA authoring practices guide.
 Tip
 For a more in-depth example, refer to the following files in Dawn:
 sections/main-search.liquid
 sections/predictive-search.liquid
 assets/predictive-search.js
 The main search
 The main search is a search input for the predictive search functionality to apply to.
 /sections/main-search.liquid
 1 <script src="{{ 'predictive-search.js' | asset_url }}" defer="defer"></script>
 2
 3 <predictive-search>
 4
    <form action="{{ routes.search_url }}" method="get" role="search">
 5
      <label for="Search">Search</label>
 6
      <input
 7
        id="Search"
 8
        type="search"
 9
        name="q"
 10
        value="{{ search.terms | escape }}"
 11
        role="combobox"
 12
        aria-expanded="false"
 13
        aria-owns="predictive-search-results"
 14
        aria-controls="predictive-search-results"
 15
        aria-haspopup="listbox"
 16
        aria-autocomplete="list"
 17
      >
 18
      <input name="options[prefix]" type="hidden" value="last">
 19
 20
      <div id="predictive-search" tabindex="-1"></div>
 21
    </form>
 22 </predictive-search>
 The predictive search section
 The predictive search section hosts the predictive search results. These results are output by looping through the resources attribute of the predictive_search object.
 This section is rendered with the main search using the JavaScript function.
 The following example renders the products from the search results. For a more complex template that accepts all resource types, refer to Dawn's source files.
 /sections/predictive-search.liquid
 1 {%- if predictive_search.performed -%}
 2
    <div id="predictive-search-results">
 3
      {%- if predictive_search.resources.products.size > 0 -%}
 4
        <h3 id="predictive-search-products">
 5
          Products
 6
        </h3>
 7
        <ul role="listbox" aria-labelledby="predictive-search-products">
 8
          {%- for product in predictive_search.resources.products -%}
 9
            <li role="option">
 10
              <a href="{{ product.url }}">
 11
                {{ product | image_url: width: 50 | image_tag }}
 12
                <span>{{ product.title }}</span>
 13
              </a>
 14
            </li>
 15
          {%- endfor -%}
 16
        </ul>
 17
      {%- endif -%}
 18
      <button>
 19
        Search for “{{ predictive_search.terms }}”
 20
      </button>
 21
    </div>
 22 {%- endif -%}
 The JavaScript function
 The predictive_search object isn't defined when the predictive search section is initially rendered, so you need to retrieve the populated section content using the section response of the Predictive Search API.
 The following example uses the default parameters for the Predictive Search API, but you can customize them to fit your needs.
 Tip
 It's recommended to use the Liquid routes object to dynamically set the endpoint URL for the fetch call.
 /assets/predictive-search.js
 1 class PredictiveSearch extends HTMLElement {
 2
    constructor() {
 3
      super();
 4
 5
      this.input = this.querySelector('input[type="search"]');
 6
      this.predictiveSearchResults = this.querySelector('#predictive-search');
 7
 8
      this.input.addEventListener('input', this.debounce((event) => {
 9
        this.onChange(event);
 10
      }, 300).bind(this));
 11
    }
 12
 13
    onChange() {
 14
      const searchTerm = this.input.value.trim();
 15
 16
      if (!searchTerm.length) {
 17
        this.close();
 18
        return;
 19
      }
 20
 21
      this.getSearchResults(searchTerm);
 22
    }
 23
 24
    getSearchResults(searchTerm) {
 25
      fetch(`/search/suggest?q=${searchTerm}&section_id=predictive-search`)
 26
        .then((response) => {
 27
          if (!response.ok) {
 28
            var error = new Error(response.status);
 29
            this.close();
 30
            throw error;
 31
          }
 32
 33
          return response.text();
 34
        })
 35
        .then((text) => {
 36
          const resultsMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-predictive-search').innerHTML;
 37
          this.predictiveSearchResults.innerHTML = resultsMarkup;
 38
          this.open();
 39
        })
 40
        .catch((error) => {
 41
          this.close();
 42
          throw error;
 43
        });
 44
    }
 45
 46
    open() {
 47
      this.predictiveSearchResults.style.display = 'block';
 48
    }
 49
 50
    close() {
 51
      this.predictiveSearchResults.style.display = 'none';
 52
    }
 53
 54
    debounce(fn, wait) {
 55
      let t;
 56
      return (...args) => {
 57
        clearTimeout(t);
 58
        t = setTimeout(() => fn.apply(this, args), wait);
 59
      };
 60
    }
 61 }
 62
 63 customElements.define('predictive-search', PredictiveSearch);
 Was this section helpful?
 YesNo
 ON THIS PAGE
 How suggestions are generated
 Resources
 Implementing predictive search
 Updates & News
 Developer changelog
 Partner blog
 Engineering blog
