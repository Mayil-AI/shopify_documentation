Layouts
 Templates
 Sections
 Overview
 Section schema
 Section assets
 Integrate with the theme editor
 Blocks
 Section groups
 Config
 Theme Store
 Section schema
 Sections support the {% schema %} Liquid tag. This tag allows you to define various attributes of a section, such as the section name, any section blocks, and settings to allow for theme editor customization options.
 Schema
 Each section can have only a single {% schema %} tag, which must contain only valid JSON using the attributes listed in Content. The tag can be placed anywhere within the section file, but it can’t be nested inside another Liquid tag.
 Caution
 Having more than one {% schema %} tag, or placing it inside another Liquid tag, will result in an error.
 The following is an example of a valid section schema. For details on each attribute, refer to Content.
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "limit": 1,
 7
    "settings": [
 8
      {
 9
        "type": "text",
 10
        "id": "title",
 11
        "label": "Slideshow"
 12
      }
 13
    ],
 14
    "max_blocks": 5,
 15
    "blocks": [
 16
       {
 17
         "name": "Slide",
 18
         "type": "slide",
 19
         "settings": [
 20
           {
 21
             "type": "image_picker",
 22
             "id": "image",
 23
             "label": "Image"
 24
           }
 25
         ]
 26
       }
 27
    ],
 28
    "presets": [
 29
      {
 30
        "name": "Slideshow",
 31
        "settings": {
 32
          "title": "Slideshow"
 33
        },
 34
        "blocks": [
 35
          {
 36
            "type": "slide"
 37
          },
 38
          {
 39
            "type": "slide"
 40
          }
 41
        ]
 42
      }
 43
    ],
 44
    "locales": {
 45
      "en": {
 46
        "title": "Slideshow"
 47
      },
 48
      "fr": {
 49
        "title": "Diaporama"
 50
      }
 51
    },
 52
    "enabled_on": {
 53
      "templates": ["*"],
 54
      "groups": ["footer"]
 55
    }
 56 }
 57 {% endschema %}
 Content
 The content of {% schema %} can include the following attributes:
 name
 tag
 class
 limit
 settings
 blocks
 max_blocks
 presets
 default
 locales
 In addition, you can use one of the following attributes to specify where a section can be used:
 enabled_on: Limit a section to specific templates and section groups.
 disabled_on: Prevent a section from being used in specific templates and section groups.
 Note
 The {% schema %} tag is a Liquid tag. However, it doesn’t output its contents, or render any Liquid included inside it.
 You should also consider making your section compatible with app blocks. App blocks allow app developers to create blocks for merchants to add app content to their theme without having to directly edit their theme code.
 name
 The name attribute determines the section title that is shown in the theme editor. For example, the following schema returns the following output:
 1 {% schema %}
 2 {
 3
    "name": "Slideshow"
 4 }
 5 {% endschema %}
 Output
 tag
 By default, when Shopify renders a section, it’s wrapped in a <div> element with a unique id attribute:
 1 <div id="shopify-section-[id]" class="shopify-section">
 2
    // Output of the section content
 3 </div>
 If you don’t want to use a <div>, then you can specify which kind of HTML element to use with the tag attribute. The following are the accepted values:
 article
 aside
 div
 footer
 header
 section
 For example, the following schema returns the following output:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section"
 5 }
 6 {% endschema %}
 Output
 1 <section id="shopify-section-[id]" class="shopify-section">
 2
    // Output of the section content
 3 </section>
 class
 When Shopify renders a section, it’s wrapped in an HTML element with a class of shopify-section. You can add to that class with the class attribute:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow"
 6 }
 7 {% endschema %}
 Output
 1 <section id="shopify-section-[id]" class="shopify-section slideshow">
 2
    // Output of the section content
 3 </section>
 limit
 By default, there's no limit to how many times a section can be added to a template or section group. You can specify a limit of 1 or 2 with the limit attribute:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "limit": 1
 7 }
 8 {% endschema %}
 settings
 You can create section specific settings to allow merchants to customize the section with the settings object:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "settings": [
 7
      {
 8
        "type": "text",
 9
        "id": "header",
 10
        "label": "Header"
 11
      }
 12
    ]
 13 }
 14 {% endschema %}
 Caution
 All section setting IDs must be unique within each section. Having duplicate IDs within a section will result in an error.
 Access section settings
 Section settings can be accessed through the section object. Refer to Access settings to learn more.
 Tip
 If a section is statically rendered, then there’s only one instance of the section across all static renderings, as a result they all share the same section setting values.
 blocks
 You can create blocks for a section. Blocks are reusable modules of content that can be added, removed, and reordered within a section.
 Blocks have the following attributes:
 blocks attributes
 Attribute Description >Required
 type The block type. This is a free-form string that you can use as an identifier. You can access this value through the type attribute of the block object. Yes
 name The block name, which will show as the block title in the theme editor. Yes
 limit The number of blocks of this type that can be used. No
 settings Any input or sidebar settings that you want for the block. Certain settings might be used as the title of the block in the theme editor. No
 The following is an example of including blocks in a section:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "settings": [
 7
      {
 8
        "type": "text",
 9
        "id": "title",
 10
        "label": "Slideshow"
 11
      }
 12
    ],
 13
    "blocks": [
 14
       {
 15
         "name": "Slide",
 16
         "type": "slide",
 17
         "settings": [
 18
           {
 19
             "type": "image_picker",
 20
             "id": "image",
 21
             "label": "Image"
 22
           }
 23
         ]
 24
       }
 25
     ]
 26 }
 27 {% endschema %}
 Caution
 All block names and types must be unique within each section, and all setting IDs must be unique within each block. Having duplicates will result in an error.
 Access block settings
 Block settings can be accessed through the block object. Refer to Access settings to learn more.
 Tip
 If a section is statically rendered, then there’s only one instance of the section across all static renderings, meaning they all share the same block setting values.
 Render blocks
 You can render a section's blocks by looping over the blocks attribute of the section object:
 1 {% for block in section.blocks %}
 2
    {% case block.type %}
 3
      {% when 'slide' %}
 4
        <div class="slide" {{ block.shopify_attributes }}>
 5
          {{ block.settings.image | image_url: width: 2048 | image_tag }}
 6
        </div>
 7
      ...
 8
    {% endcase %}
 9 {% endfor %}
 In the example above, each block's content is included inside a parent container, and that container has {{ block.shopify_attributes }} added as an attribute. Shopify's theme editor uses that attribute to identify blocks in its JavaScript API.
 If your block is a single element, then ensure that the element has this attribute.
 Show dynamic block titles in the theme editor
 In certain cases, the theme editor can display an input setting value as the title of a block in the theme editor sidebar. This can help merchants to identify and rearrange blocks in a section.
 The theme editor checks the id values of the settings in a block to determine the best one to use for the block title.
 The theme editor uses settings with the following id values, in order of precedence:
 heading
 title
 text
 If a setting with a matching id value doesn't exist, then the block name is used as the title.
 For example, this block with a setting id of heading displays in the sidebar with the title Welcome to our store.
 File
 1 "blocks": [
 2
    {
 3
      "name": "Announcement",
 4
      "type": "announcement",
 5
      "settings": [
 6
        {
 7
          "type": "text",
 8
          "id": "heading",
 9
          "default": "Welcome to our store",
 10
          "label": "Heading"
 11
        }
 12
      ]
 13
    }
 14 ]
 max_blocks
 There’s a limit of 50 blocks per section. You can specify a lower limit with the max_blocks attribute:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "max_blocks": 5,
 7
    "settings": [
 8
      {
 9
        "type": "text",
 10
        "id": "title",
 11
        "label": "Slideshow"
 12
      }
 13
    ],
 14
    "blocks": [
 15
       {
 16
         "name": "Slide",
 17
         "type": "slide",
 18
         "settings": [
 19
           {
 20
             "type": "image_picker",
 21
             "id": "image",
 22
             "label": "Image"
 23
           }
 24
         ]
 25
       }
 26
     ]
 27 }
 28 {% endschema %}
 Example
 presets
 Presets are default configurations of sections that enable users to easily add a section to a JSON template through the theme editor. Presets aren't related to theme styles that are defined in settings_data.json.
 Presets have the following attributes:
 presets attributes
 Attribute Description >Required
 name The preset name, which will show in the Add section picker of the theme editor. Yes
 settings A list of default values for any settings you might want to populate. Each entry should include the setting name and the value. No
 blocks A list of default blocks that you might want to include. Each entry should be an object with attributes of type and settings. The type attribute value should reflect the type of the block that you want to include, and the settings object should be in the same format as the settings attribute above. No
 The following is an example of including presets in a section:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "max_blocks": 5,
 7
    "settings": [
 8
      {
 9
        "type": "text",
 10
        "id": "title",
 11
        "label": "Slideshow"
 12
      }
 13
    ],
 14
    "blocks": [
 15
       {
 16
         "name": "Slide",
 17
         "type": "slide",
 18
         "settings": [
 19
           {
 20
             "type": "image_picker",
 21
             "id": "image",
 22
             "label": "Image"
 23
           }
 24
         ]
 25
       }
 26
     ],
 27
    "presets": [
 28
      {
 29
        "name": "Slideshow",
 30
        "settings": {
 31
          "title": "Slideshow"
 32
        },
 33
        "blocks": [
 34
          {
 35
            "type": "slide"
 36
          },
 37
          {
 38
            "type": "slide"
 39
          }
 40
        ]
 41
      }
 42
    ]
 43 }
 44 {% endschema %}
 Example
 Tip
 Sections with presets shouldn't be statically rendered. If you’re going to statically render a section, then you should use default settings.
 default
 If you statically render a section, then you can define a default configuration with the default object, which has the same attributes as the preset object.
 The following is an example of including a default in a section:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "max_blocks": 5,
 7
    "settings": [
 8
      {
 9
        "type": "text",
 10
        "id": "title",
 11
        "label": "Slideshow"
 12
      }
 13
    ],
 14
    "blocks": [
 15
       {
 16
         "name": "Slide",
 17
         "type": "slide",
 18
         "settings": [
 19
           {
 20
             "type": "image_picker",
 21
             "id": "image",
 22
             "label": "Image"
 23
           }
 24
         ]
 25
       }
 26
     ],
 27
    "default": {
 28
      "settings": {
 29
        "title": "Slideshow"
 30
      },
 31
      "blocks": [
 32
        {
 33
          "type": "slide"
 34
        },
 35
        {
 36
          "type": "slide"
 37
        }
 38
      ]
 39
    }
 40 }
 41 {% endschema %}
 Tip
 You should only use the section default attribute for sections that will be reused, or installed on multiple themes or shops. Statically rendered sections that come pre-installed on a theme should have their default configuration defined by the default attribute for each individual setting.
 locales
 Sections can provide their own set of translated strings through the locales object. This is separate from the locales directory of the theme, which makes it a useful feature for sections that are meant to be installed on multiple themes or shops.
 The locales object has the following general format:
 General format
 1 {
 2
    "locales": {
 3
      "language": {
 4
        "translation_key": "translation_value"
 5
      }
 6
    }
 7 }
 For example:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "max_blocks": 5,
 7
    "settings": [
 8
      {
 9
        "type": "text",
 10
        "id": "title",
 11
        "label": "Slideshow"
 12
      }
 13
    ],
 14
    "blocks": [
 15
       {
 16
         "name": "Slide",
 17
         "type": "slide",
 18
         "settings": [
 19
           {
 20
             "type": "image_picker",
 21
             "id": "image",
 22
             "label": "Image"
 23
           }
 24
         ]
 25
       }
 26
     ],
 27
     "default": {
 28
      "settings": {
 29
        "title": "Slideshow"
 30
      },
 31
      "blocks": [
 32
        {
 33
          "type": "slide"
 34
        },
 35
        {
 36
          "type": "slide"
 37
        }
 38
      ]
 39
    },
 40
    "locales": {
 41
      "en": {
 42
        "title": "Slideshow"
 43
      },
 44
      "fr": {
 45
        "title": "Diaporama"
 46
      }
 47
    }
 48 }
 49 {% endschema %}
 Any translations will show up under the Sections tab of the language editor for merchants to edit. When edits are made, the changes are saved directly to the applicable locale file, and the section schema is unchanged.
 These translations can be accessed through the Liquid translation filter (t filter) where the key will be in the following format:
 1 sections.[section-name].[translation-description]
 For example, if you want to reference the title translation from the example above, then use the following:
 1 {{ 'sections.slideshow.title' | t }}
 enabled_on
 You can restrict a section to certain template page types and section group types by specifying them through the enabled_on attribute.
 enabled_on, along with disabled_on, replaces the templates attribute.
 Caution
 You can use only one of enabled_on or disabled_on.
 enabled_on must have at least one of the following attributes:
 enabled_on attributes
 Attribute Description
 templates
 A list of the template page types where the section can be used.
 Accepted values:
 A list of page types
 ["*"] (all template page types)
 groups
 A list of the section groups where the section can be used.
 Accepted values:
 A list of the section group types. Accepted values: header, footer, aside, and custom types in the format custom.<NAME>.
 ["*"] (all section group types)
 In the following example, the section is available to all templates, and to the footer section group:
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "max_blocks": 5,
 7
    "settings": [
 8
      {
 9
        "type": "text",
 10
        "id": "title",
 11
        "label": "Slideshow"
 12
      }
 13
    ],
 14
    "blocks": [
 15
       {
 16
         "name": "Slide",
 17
         "type": "slide",
 18
         "settings": [
 19
           {
 20
             "type": "image_picker",
 21
             "id": "image",
 22
             "label": "Image"
 23
           }
 24
         ]
 25
       }
 26
     ],
 27
     "default": {
 28
      "settings": {
 29
        "title": "Slideshow"
 30
      },
 31
      "blocks": [
 32
        {
 33
          "type": "slide"
 34
        },
 35
        {
 36
          "type": "slide"
 37
        }
 38
      ]
 39
    },
 40
    "locales": {
 41
        "en": {
 42
          "title": "Slideshow"
 43
        },
 44
        "fr": {
 45
          "title": "Diaporama"
 46
        }
 47
    },
 48
    "enabled_on": {
 49
      "templates": ["*"],
 50
      "groups": ["footer"]
 51
    },
 52 }
 53 {% endschema %}
 disabled_on
 You can prevent a section from being used on certain template page types and section group types by setting them in the disabled_on attribute. When you use disabled_on, the section is available to all templates and section groups except the ones that you specified.
 disabled_on, along with enabled_on, replaces the templates attribute.
 Caution
 You can use only one of enabled_on or disabled_on.
 disabled_on must have at least one of the following attributes:
 disabled_on attributes
 Attribute Description
 templates
 A list of the template page types where the section can't be used.
 Accepted values:
 A list of page types
 ["*"] (all template page types)
 groups
 A list of the section groups where the section can't be used.
 Accepted values:
 A list of the section group types. Accepted values: header, footer, aside, and custom types in the format custom.<NAME>.
 ["*"] (all section group types)
 In the following example, the section is available to all templates other than password templates, and to all section groups other than footer section groups.
 /sections/slideshow.liquid
 1 {% schema %}
 2 {
 3
    "name": "Slideshow",
 4
    "tag": "section",
 5
    "class": "slideshow",
 6
    "max_blocks": 5,
 7
    "settings": [
 8
      {
 9
        "type": "text",
 10
        "id": "title",
 11
        "label": "Slideshow"
 12
      }
 13
    ],
 14
    "blocks": [
 15
       {
 16
         "name": "Slide",
 17
         "type": "slide",
 18
         "settings": [
 19
           {
 20
             "type": "image_picker",
 21
             "id": "image",
 22
             "label": "Image"
 23
           }
 24
         ]
 25
       }
 26
     ],
 27
     "default": {
 28
      "settings": {
 29
        "title": "Slideshow"
 30
      },
 31
      "blocks": [
 32
        {
 33
          "type": "slide"
 34
        },
 35
        {
 36
          "type": "slide"
 37
        }
 38
      ]
 39
    },
 40
    "locales": {
 41
        "en": {
 42
          "title": "Slideshow"
 43
        },
 44
        "fr": {
 45
          "title": "Diaporama"
 46
        }
 47
    },
 48
    "disabled_on": {
 49
      "templates": ["password"],
 50
      "groups": ["footer"]
 51
    },
 52 }
 53 {% endschema %}
 App blocks
 If your section is part of a JSON template or section group, then you should support blocks of type @app. App blocks allow app developers to create blocks for merchants to add app content to their theme without having to directly edit theme code.
 Was this section helpful?
 YesNo
 ON THIS PAGE
 Schema
 Content
 Updates & News
 Developer changelog
